{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.7.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@fluentui/react-internal!",
  "docComment": "",
  "name": "@fluentui/react-internal",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@fluentui/react-internal!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ActivityItem:class",
          "docComment": "/**\n * {@docCategory ActivityItem}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ActivityItem extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IActivityItemProps",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "ActivityItem",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!ActivityItem:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ActivityItem` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IActivityItemProps",
                  "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ActivityItem#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!Alignment:type",
          "docComment": "/**\n * Defines a type made by the union of the different values that the align-items and justify-content flexbox properties can take. {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Alignment = "
            },
            {
              "kind": "Content",
              "text": "'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'baseline' | 'stretch'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Alignment",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Announced:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Announced: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAnnouncedProps",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Announced",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!AnnouncedBase:class",
          "docComment": "/**\n * {@docCategory Announced}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnnouncedBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAnnouncedProps",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "AnnouncedBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!AnnouncedBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAnnouncedProps",
                  "canonicalReference": "@fluentui/react-internal!IAnnouncedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!AnnouncedBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!Autofill:class",
          "docComment": "/**\n * {@docCategory Autofill}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Autofill extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAutofillProps",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IAutofillState",
              "canonicalReference": "@fluentui/react-internal!IAutofillState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IAutofill",
              "canonicalReference": "@fluentui/react-internal!IAutofill:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Autofill",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!Autofill:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Autofill` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IAutofillProps",
                  "canonicalReference": "@fluentui/react-internal!IAutofillProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Autofill#clear:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Autofill#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Autofill#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill#cursorLocation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get cursorLocation(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cursorLocation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        enableAutofillOnKeyPress: number[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Autofill#focus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Autofill.getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getDerivedStateFromProps(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IAutofillProps",
                  "canonicalReference": "@fluentui/react-internal!IAutofillProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", state: "
                },
                {
                  "kind": "Reference",
                  "text": "IAutofillState",
                  "canonicalReference": "@fluentui/react-internal!IAutofillState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IAutofillState",
                  "canonicalReference": "@fluentui/react-internal!IAutofillState:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "state",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill#inputElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get inputElement(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill#isValueSelected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isValueSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isValueSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Autofill#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill#selectionEnd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectionEnd(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill#selectionStart:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectionStart(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Autofill#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get value(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BaseExtendedPeoplePicker:class",
          "docComment": "/**\n * {@docCategory ExtendedPeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseExtendedPeoplePicker extends "
            },
            {
              "kind": "Reference",
              "text": "BaseExtendedPicker",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IExtendedPeoplePickerProps",
              "canonicalReference": "@fluentui/react-internal!IExtendedPeoplePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseExtendedPeoplePicker",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseExtendedPicker<T, P extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseExtendedPickerProps",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<P, "
            },
            {
              "kind": "Reference",
              "text": "IBaseExtendedPickerState",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerState:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IBaseExtendedPicker",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPicker:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BaseExtendedPicker",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#_onSelectedItemsChanged:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _onSelectedItemsChanged: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_onSelectedItemsChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#_onSuggestionSelected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _onSuggestionSelected: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_onSuggestionSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BaseExtendedPicker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(basePickerProps: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "basePickerProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#canAddItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected canAddItems(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "canAddItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#clearInput:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearInput(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearInput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#floatingPicker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floatingPicker: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseFloatingPicker",
                  "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker:class"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "floatingPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#floatingPickerProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get floatingPickerProps(): "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "floatingPickerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#focus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#highlightedItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get highlightedItems(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "highlightedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected input: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#inputElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get inputElement(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get items(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onBackspace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onBackspace: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBackspace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onCopy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onCopy: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ClipboardEvent",
                  "canonicalReference": "@types/react!~React.ClipboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCopy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onInputChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onInputChange: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string, composing?: boolean | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onInputClick:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onInputClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onInputFocus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onInputFocus: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onPaste:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onPaste: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ClipboardEvent",
                  "canonicalReference": "@types/react!~React.ClipboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPaste",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#onSelectionChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSelectionChange: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSelectionChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#renderFloatingPicker:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderFloatingPicker(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderFloatingPicker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#renderSelectedItemsList:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderSelectedItemsList(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderSelectedItemsList"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected root: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#selectedItemsList:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedItemsList: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BaseSelectedItemsList",
                  "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList:class"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsListProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItemsList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#selectedItemsListProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get selectedItemsListProps(): "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsListProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItemsListProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPicker#selection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selection: "
                },
                {
                  "kind": "Reference",
                  "text": "Selection",
                  "canonicalReference": "@fluentui/utilities!Selection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "implementsTokenRanges": [
            {
              "startIndex": 9,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BaseFloatingPeoplePicker:class",
          "docComment": "/**\n * {@docCategory FloatingPeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseFloatingPeoplePicker extends "
            },
            {
              "kind": "Reference",
              "text": "BaseFloatingPicker",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPeopleFloatingPickerProps",
              "canonicalReference": "@fluentui/react-internal!IPeopleFloatingPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseFloatingPeoplePicker",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseFloatingPicker<T, P extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseFloatingPickerProps",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<P, "
            },
            {
              "kind": "Reference",
              "text": "IBaseFloatingPickerState",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IBaseFloatingPicker",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BaseFloatingPicker",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BaseFloatingPicker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(basePickerProps: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "basePickerProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#completeSuggestion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "completeSuggestion: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "completeSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#currentPromise:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected currentPromise: "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentPromise",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#currentSelectedSuggestionIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get currentSelectedSuggestionIndex(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentSelectedSuggestionIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#forceResolveSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceResolveSuggestion(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "forceResolveSuggestion"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#hidePicker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidePicker: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidePicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#inputText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get inputText(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#isComponentMounted:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected isComponentMounted: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isComponentMounted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#isSuggestionsShown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isSuggestionsShown(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSuggestionsShown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#onChange:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onChange(item: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "item",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onChange"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#onKeyDown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onKeyDown: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onKeyDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#onQueryStringChanged:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onQueryStringChanged: "
                },
                {
                  "kind": "Content",
                  "text": "(queryString: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onQueryStringChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#onSelectionChange:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSelectionChange(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "onSelectionChange"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#onSuggestionClick:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSuggestionClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item: T, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#onSuggestionRemove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSuggestionRemove: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item: T, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionRemove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#renderSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderSuggestions"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected root: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#selection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selection: "
                },
                {
                  "kind": "Reference",
                  "text": "Selection",
                  "canonicalReference": "!Selection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#showPicker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showPicker: "
                },
                {
                  "kind": "Content",
                  "text": "(updateValue?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#suggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get suggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#suggestionsControl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestionsControl: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsControl",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsControl:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsControl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#SuggestionsControlOfProperType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected SuggestionsControlOfProperType: "
                },
                {
                  "kind": "Content",
                  "text": "new (props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsControlProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsControl",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsControl:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SuggestionsControlOfProperType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#suggestionStore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestionStore: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsStore",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsStore:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#updateSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSuggestions(suggestions: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", forceUpdate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "forceUpdate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#updateSuggestionsList:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected updateSuggestionsList(suggestions: "
                },
                {
                  "kind": "Content",
                  "text": "T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateSuggestionsList"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#updateSuggestionWithZeroState:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected updateSuggestionWithZeroState(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "updateSuggestionWithZeroState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPicker#updateValue:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected updateValue(updatedValue: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "updatedValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateValue"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "implementsTokenRanges": [
            {
              "startIndex": 9,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BasePeoplePicker:class",
          "docComment": "/**\n * {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BasePeoplePicker extends "
            },
            {
              "kind": "Reference",
              "text": "BasePicker",
              "canonicalReference": "@fluentui/react-internal!BasePicker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "BasePeoplePicker",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BasePeopleSelectedItemsList:class",
          "docComment": "/**\n * {@docCategory SelectedPeopleList}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BasePeopleSelectedItemsList extends "
            },
            {
              "kind": "Reference",
              "text": "BaseSelectedItemsList",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExtendedPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ISelectedPeopleProps",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "BasePeopleSelectedItemsList",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BasePicker:class",
          "docComment": "/**\n * {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BasePicker<T, P extends "
            },
            {
              "kind": "Reference",
              "text": "IBasePickerProps",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<P, "
            },
            {
              "kind": "Reference",
              "text": "IBasePickerState",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IBasePicker",
              "canonicalReference": "@fluentui/react-internal!IBasePicker:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BasePicker",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#_ariaMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _ariaMap: "
                },
                {
                  "kind": "Reference",
                  "text": "IPickerAriaIds",
                  "canonicalReference": "@fluentui/react-internal!IPickerAriaIds:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_ariaMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#_shouldFocusZoneEnterInnerZone:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _shouldFocusZoneEnterInnerZone: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_shouldFocusZoneEnterInnerZone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!BasePicker:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BasePicker` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(basePickerProps: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "basePickerProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#addItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected addItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#addItemByIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected addItemByIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addItemByIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#canAddItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected canAddItems(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "canAddItems"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#completeSelection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected completeSelection: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "completeSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#completeSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "completeSuggestion(forceComplete?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forceComplete",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "completeSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(oldProps: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ", oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerState",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "oldProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "oldState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#currentPromise:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected currentPromise: "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentPromise",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#dismissSuggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#focus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#focusInput:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusInput(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focusInput"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#focusZone:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected focusZone: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFocusZone",
                  "canonicalReference": "@fluentui/react-focus!IFocusZone:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusZone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#getActiveDescendant:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getActiveDescendant(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getActiveDescendant"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker.getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getDerivedStateFromProps(newProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        items: any[];\n    } | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#getSuggestionsAlert:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getSuggestionsAlert(suggestionAlertClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestionAlertClassName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSuggestionsAlert"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected input: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAutofill",
                  "canonicalReference": "@fluentui/react-internal!IAutofill:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get items(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onBackspace:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onBackspace(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ev",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "onBackspace"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onBlur:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onBlur: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onChange:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onChange(items?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "items",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onChange"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onClick:member",
              "docComment": "/**\n * Reveals suggestions any time the user clicks on the input element without shifting focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onEmptyInputFocus:member(1)",
              "docComment": "/**\n * Only to be called when there is nothing in the input. Checks to see if the consumer has provided a function to resolve suggestions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onEmptyInputFocus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "onEmptyInputFocus"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onGetMoreResults:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onGetMoreResults: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGetMoreResults",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onInputBlur:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onInputBlur: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onInputChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onInputChange: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onInputFocus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onInputFocus: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onItemChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onItemChange: "
                },
                {
                  "kind": "Content",
                  "text": "(changedItem: T, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onKeyDown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onKeyDown: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onKeyDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onSelectionChange:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSelectionChange(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "onSelectionChange"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onSuggestionClick:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSuggestionClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item: any, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onSuggestionRemove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSuggestionRemove: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item: T, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionRemove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#onSuggestionSelect:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSuggestionSelect(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "onSuggestionSelect"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#refocusSuggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refocusSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "(keyCode: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "refocusSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#removeItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected removeItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IPickerItemProps",
                  "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>, focusNextItem?: boolean | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#removeItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected removeItems: "
                },
                {
                  "kind": "Content",
                  "text": "(itemsToRemove: any[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#renderItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderItems(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#renderSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#resetFocus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected resetFocus(index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "resetFocus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#resolveNewValue:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected resolveNewValue(updatedValue: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", suggestions: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "updatedValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "resolveNewValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected root: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#selection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selection: "
                },
                {
                  "kind": "Reference",
                  "text": "Selection",
                  "canonicalReference": "@fluentui/utilities!Selection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#suggestionElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestionElement: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestions",
                  "canonicalReference": "@fluentui/react-internal!ISuggestions:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#SuggestionOfProperType:member",
              "docComment": "/**\n * @deprecated\n *\n * this is no longer necessary as typescript now supports generic elements\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected SuggestionOfProperType: "
                },
                {
                  "kind": "Content",
                  "text": "new (props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Suggestions",
                  "canonicalReference": "@fluentui/react-internal!Suggestions:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SuggestionOfProperType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BasePicker#suggestionStore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected suggestionStore: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsController",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsController:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#updateSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected updateSuggestions(suggestions: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#updateSuggestionsList:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected updateSuggestionsList(suggestions: "
                },
                {
                  "kind": "Content",
                  "text": "T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ", updatedValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "updatedValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "updateSuggestionsList"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePicker#updateValue:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected updateValue(updatedValue: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "updatedValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateValue"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "implementsTokenRanges": [
            {
              "startIndex": 9,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BasePickerListBelow:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BasePickerListBelow<T, P extends "
            },
            {
              "kind": "Reference",
              "text": "IBasePickerProps",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "BasePicker",
              "canonicalReference": "@fluentui/react-internal!BasePicker:class"
            },
            {
              "kind": "Content",
              "text": "<T, P> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BasePickerListBelow",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePickerListBelow#onBackspace:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onBackspace(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ev",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "onBackspace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BasePickerListBelow#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BaseSelectedItemsList<T, P extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseSelectedItemsListProps",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<P, "
            },
            {
              "kind": "Reference",
              "text": "IBaseSelectedItemsListState",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListState:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IBaseSelectedItemsList",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsList:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BaseSelectedItemsList",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BaseSelectedItemsList` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(basePickerProps: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "basePickerProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#addItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addItems: "
                },
                {
                  "kind": "Content",
                  "text": "(items: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(oldProps: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ", oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsListState",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListState:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IObjectWithKey",
                  "canonicalReference": "@fluentui/utilities!IObjectWithKey:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "oldProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "oldState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#copyItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected copyItems(items: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "items",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList.getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getDerivedStateFromProps(newProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsListProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        items: any[];\n    } | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#hasSelectedItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSelectedItems(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSelectedItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#highlightedItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "highlightedItems(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "highlightedItems"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get items(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#onChange:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onChange(items?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "items",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onChange"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#onCopy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCopy: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ClipboardEvent",
                  "canonicalReference": "@types/react!~React.ClipboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCopy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#onItemChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onItemChange: "
                },
                {
                  "kind": "Content",
                  "text": "(changedItem: T, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#onSelectionChanged:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onSelectionChanged: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSelectionChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#removeItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#removeItemAt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeItemAt: "
                },
                {
                  "kind": "Content",
                  "text": "(index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeItemAt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#removeItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeItems: "
                },
                {
                  "kind": "Content",
                  "text": "(itemsToRemove: any[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#removeSelectedItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSelectedItems(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "removeSelectedItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#renderItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderItems: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#replaceItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "replaceItem: "
                },
                {
                  "kind": "Content",
                  "text": "(itemToReplace: T, itemsToReplaceWith: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "replaceItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected root: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#selection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get selection(): "
                },
                {
                  "kind": "Reference",
                  "text": "Selection",
                  "canonicalReference": "@fluentui/utilities!Selection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#unselectAll:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unselectAll(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "unselectAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!BaseSelectedItemsList#updateItems:member(1)",
              "docComment": "/**\n * Controls what happens whenever there is an action that impacts the selected items. If selectedItems is provided, this will act as a controlled component and will not update its own state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateItems(items: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", focusIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "items",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "focusIndex",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateItems"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "implementsTokenRanges": [
            {
              "startIndex": 9,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!BaseSlots:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum BaseSlots "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseSlots",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!BaseSlots.backgroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!BaseSlots.foregroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "foregroundColor = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "foregroundColor",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!BaseSlots.primaryColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryColor = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryColor",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!buildKeytipConfigMap:function(1)",
          "docComment": "/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n *\n * @returns Config map\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function buildKeytipConfigMap(config: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipConfig",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfig:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IKeytipConfigMap",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigMap:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "buildKeytipConfigMap"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ButtonGrid:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ButtonGrid: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IButtonGridProps",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ButtonGrid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ButtonGridCell:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ButtonGridCell: "
            },
            {
              "kind": "Content",
              "text": "<T, P extends "
            },
            {
              "kind": "Reference",
              "text": "IButtonGridCellProps",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>(props: "
            },
            {
              "kind": "Reference",
              "text": "IButtonGridCellProps",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ButtonGridCell",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Callout:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Callout: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICalloutProps",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Callout",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!CalloutContent:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CalloutContent: "
            },
            {
              "kind": "Content",
              "text": "import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<import(\"./Callout.types\")."
            },
            {
              "kind": "Reference",
              "text": "ICalloutProps",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "CalloutContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!CalloutContentBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CalloutContentBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICalloutProps",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "CalloutContentBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!canAnyMenuItemsCheck:function(1)",
          "docComment": "/**\n * Returns true if a list of menu items can contain a checkbox\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function canAnyMenuItemsCheck(items: "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "canAnyMenuItemsCheck"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Check:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Check: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICheckProps",
              "canonicalReference": "@fluentui/react-internal!ICheckProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Check",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!CheckBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CheckBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICheckProps",
              "canonicalReference": "@fluentui/react-internal!ICheckProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "CheckBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ChoiceGroup:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChoiceGroup: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IChoiceGroupProps",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ChoiceGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ChoiceGroupBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChoiceGroupBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IChoiceGroupProps",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ChoiceGroupBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ChoiceGroupOption:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChoiceGroupOption: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IChoiceGroupOptionProps",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ChoiceGroupOption",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!clamp:function(1)",
          "docComment": "/**\n * Clamp a value to ensure it falls within a given range.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clamp(value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", max: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", min?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "clamp"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!COACHMARK_ATTRIBUTE_NAME:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COACHMARK_ATTRIBUTE_NAME = \"data-coachmarkid\""
            }
          ],
          "releaseTag": "Public",
          "name": "COACHMARK_ATTRIBUTE_NAME",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Coachmark:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Coachmark: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICoachmarkProps",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Coachmark",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!CoachmarkBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CoachmarkBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICoachmarkProps",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "CoachmarkBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ColorPicker:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorPicker: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorPickerProps",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ColorPicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ColorPickerBase:class",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ColorPickerBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorPickerProps",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IColorPickerState",
              "canonicalReference": "@fluentui/react-internal!IColorPickerState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IColorPicker",
              "canonicalReference": "@fluentui/react-internal!IColorPicker:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ColorPickerBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!ColorPickerBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ColorPickerBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ColorPickerBase#color:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get color(): "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ColorPickerBase#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(prevProps: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerState",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerState:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prevProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ColorPickerBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ColorPickerBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ColorPickerGridCell:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorPickerGridCell: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorPickerGridCellProps",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ColorPickerGridCell",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ColorPickerGridCellBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorPickerGridCellBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorPickerGridCellProps",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ColorPickerGridCellBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!CommandBar:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CommandBar: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICommandBarProps",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "CommandBar",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!CommandBarBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CommandBarBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICommandBarProps",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "ICommandBar",
              "canonicalReference": "@fluentui/react-internal!ICommandBar:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CommandBarBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!CommandBarBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CommandBarBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!CommandBarBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!CommandBarBase#focus:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!CommandBarBase#remeasure:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remeasure(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remeasure"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!CommandBarBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!CompactPeoplePicker:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CompactPeoplePicker: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "CompactPeoplePicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!CompactPeoplePickerBase:class",
          "docComment": "/**\n * Compact layout. It uses personas without secondary text when displaying search results. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CompactPeoplePickerBase extends "
            },
            {
              "kind": "Reference",
              "text": "BasePeoplePicker",
              "canonicalReference": "@fluentui/react-internal!BasePeoplePicker:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CompactPeoplePickerBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!CompactPeoplePickerBase.defaultProps:member",
              "docComment": "/**\n * Default props for CompactPeoplePicker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onRenderItem: (props: "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedProps",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        onRenderSuggestionsItem: (personaProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", suggestionsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerSuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerSuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any> | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        createGenericItem: typeof "
                },
                {
                  "kind": "Reference",
                  "text": "createGenericItem",
                  "canonicalReference": "@fluentui/react-internal!createGenericItem:function"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!constructKeytip:function(1)",
          "docComment": "/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n *\n * @param parentSequence - string of the parent keytip\n *\n * @param keytip - IKeytipConfigItem data\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function constructKeytip(configMap: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipConfigMap",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigMap:interface"
            },
            {
              "kind": "Content",
              "text": ", parentSequence: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", keytip: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipConfigItem",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "configMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "parentSequence",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "keytip",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "constructKeytip"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ContextualMenu:var",
          "docComment": "/**\n * ContextualMenu description\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ContextualMenu: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuProps",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ContextualMenu",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ContextualMenuBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ContextualMenuBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuProps",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ContextualMenuBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ContextualMenuItem:var",
          "docComment": "/**\n * ContextualMenuItem description\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ContextualMenuItem: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItemProps",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ContextualMenuItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ContextualMenuItemBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ContextualMenuItemBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItemProps",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "ContextualMenuItemBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ContextualMenuItemBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemBase#dismissMenu:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissMenu: "
                },
                {
                  "kind": "Content",
                  "text": "(dismissAll?: boolean | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemBase#dismissSubMenu:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissSubMenu: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemBase#openSubMenu:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openSubMenu: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ContextualMenuItemType:enum",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ContextualMenuItemType "
            }
          ],
          "releaseTag": "Public",
          "name": "ContextualMenuItemType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemType.Divider:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Divider = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Divider",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemType.Header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Header = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Header",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemType.Normal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Normal = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Normal",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ContextualMenuItemType.Section:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Section = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Section",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!correctHex:function(1)",
          "docComment": "/**\n * Corrects a hex color to have length 3 or 6. Defaults to white if too short. Does NOT check anything besides the length (such as valid characters) and does NOT handle hex values starting with # sign.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function correctHex(hex: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "correctHex"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!correctHSV:function(1)",
          "docComment": "/**\n * Corrects an HSV color to fall within the valid range.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function correctHSV(color: "
            },
            {
              "kind": "Reference",
              "text": "IHSV",
              "canonicalReference": "@fluentui/react-internal!IHSV:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IHSV",
              "canonicalReference": "@fluentui/react-internal!IHSV:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "correctHSV"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!correctRGB:function(1)",
          "docComment": "/**\n * Corrects an RGB color to fall within the valid range.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function correctRGB(color: "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "correctRGB"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!createGenericItem:function(1)",
          "docComment": "/**\n * {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createGenericItem(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", currentValidationState: "
            },
            {
              "kind": "Reference",
              "text": "ValidationState",
              "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IGenericItem",
              "canonicalReference": "@fluentui/react-internal!IGenericItem:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    key: "
            },
            {
              "kind": "Reference",
              "text": "React.Key",
              "canonicalReference": "@types/react!~React.Key:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "currentValidationState",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "createGenericItem"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!createItem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createItem(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", isValid: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ISuggestionModel",
              "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "isValid",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "createItem"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!cssColor:function(1)",
          "docComment": "/**\n * Converts a valid CSS color string to an RGB color. Note that hex colors *must* be prefixed with # to be considered valid. Alpha in returned color defaults to 100. Four and eight digit hex values (with alpha) are supported if the current browser supports them.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cssColor(color?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "cssColor"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DATAKTP_ARIA_TARGET:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DATAKTP_ARIA_TARGET = \"data-ktp-aria-target\""
            }
          ],
          "releaseTag": "Public",
          "name": "DATAKTP_ARIA_TARGET",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DATAKTP_EXECUTE_TARGET:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DATAKTP_EXECUTE_TARGET = \"data-ktp-execute-target\""
            }
          ],
          "releaseTag": "Public",
          "name": "DATAKTP_EXECUTE_TARGET",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DATAKTP_TARGET:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DATAKTP_TARGET = \"data-ktp-target\""
            }
          ],
          "releaseTag": "Public",
          "name": "DATAKTP_TARGET",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DEFAULT_MASK_CHAR:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_MASK_CHAR = \"_\""
            }
          ],
          "releaseTag": "Public",
          "name": "DEFAULT_MASK_CHAR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Dialog:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Dialog: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IDialogProps",
              "canonicalReference": "@fluentui/react-internal!IDialogProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Dialog",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!DialogBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DialogBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IDialogProps",
              "canonicalReference": "@fluentui/react-internal!IDialogProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "DialogBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!DialogBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DialogBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!DialogBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!DialogBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DialogContent:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DialogContent: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IDialogContentProps",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "DialogContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!DialogContentBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DialogContentBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IDialogContentProps",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "DialogContentBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!DialogContentBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DialogContentBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogContentProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogContentProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!DialogContentBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogContentProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogContentProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!DialogContentBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DialogFooter:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DialogFooter: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IDialogFooterProps",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "DialogFooter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!DialogFooterBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DialogFooterBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IDialogFooterProps",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "DialogFooterBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!DialogFooterBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DialogFooterBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogFooterProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogFooterProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!DialogFooterBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!DialogType:enum",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum DialogType "
            }
          ],
          "releaseTag": "Public",
          "name": "DialogType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!DialogType.close:member",
              "docComment": "/**\n * Dialog with an 'x' close button in the upper-right corner\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "close",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!DialogType.largeHeader:member",
              "docComment": "/**\n * Dialog with large header banner\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "largeHeader = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "largeHeader",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!DialogType.normal:member",
              "docComment": "/**\n * Standard dialog\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normal = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "normal",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!DirectionalHint:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DirectionalHint = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "DirectionalHint",
              "canonicalReference": "@fluentui/react-internal!DirectionalHint:var"
            },
            {
              "kind": "Content",
              "text": "[keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "DirectionalHint",
              "canonicalReference": "@fluentui/react-internal!DirectionalHint:var"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DirectionalHint",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!DirectionalHint:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DirectionalHint: "
            },
            {
              "kind": "Content",
              "text": "{\n    topLeftEdge: 0;\n    topCenter: 1;\n    topRightEdge: 2;\n    topAutoEdge: 3;\n    bottomLeftEdge: 4;\n    bottomCenter: 5;\n    bottomRightEdge: 6;\n    bottomAutoEdge: 7;\n    leftTopEdge: 8;\n    leftCenter: 9;\n    leftBottomEdge: 10;\n    rightTopEdge: 11;\n    rightCenter: 12;\n    rightBottomEdge: 13;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "DirectionalHint",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!DragDropHelper:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DragDropHelper implements "
            },
            {
              "kind": "Reference",
              "text": "IDragDropHelper",
              "canonicalReference": "@fluentui/react-internal!IDragDropHelper:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DragDropHelper",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!DragDropHelper:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DragDropHelper` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(params: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropHelperParams",
                  "canonicalReference": "@fluentui/react-internal!IDragDropHelperParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!DragDropHelper#dispose:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!DragDropHelper#subscribe:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe(root: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", events: "
                },
                {
                  "kind": "Reference",
                  "text": "EventGroup",
                  "canonicalReference": "@fluentui/utilities!EventGroup:class"
                },
                {
                  "kind": "Content",
                  "text": ", dragDropOptions: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropOptions",
                  "canonicalReference": "@fluentui/react-internal!IDragDropOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        key: string;\n        dispose(): void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "root",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "events",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "dragDropOptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "subscribe"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!DragDropHelper#unsubscribe:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsubscribe(root: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "root",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "unsubscribe"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ExpandingCard:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ExpandingCard: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExpandingCardProps",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ExpandingCard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ExpandingCardBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ExpandingCardBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExpandingCardProps",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IExpandingCardState",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ExpandingCardBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ExpandingCardBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IExpandingCardProps",
                  "canonicalReference": "@fluentui/react-internal!IExpandingCardProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        compactCardHeight: number;\n        expandedCardHeight: number;\n        directionalHintFixed: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ExpandingCardMode:enum",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ExpandingCardMode "
            }
          ],
          "releaseTag": "Public",
          "name": "ExpandingCardMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardMode.compact:member",
              "docComment": "/**\n * To have top compact card only\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compact = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "compact",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ExpandingCardMode.expanded:member",
              "docComment": "/**\n * To have both top compact and bottom expanded card\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expanded = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "expanded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ExtendedPeoplePicker:class",
          "docComment": "/**\n * {@docCategory ExtendedPeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ExtendedPeoplePicker extends "
            },
            {
              "kind": "Reference",
              "text": "BaseExtendedPeoplePicker",
              "canonicalReference": "@fluentui/react-internal!BaseExtendedPeoplePicker:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ExtendedPeoplePicker",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ExtendedSelectedItem:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ExtendedSelectedItem extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISelectedPeopleItemProps",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemState",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ExtendedSelectedItem",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!ExtendedSelectedItem:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ExtendedSelectedItem` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectedPeopleItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ExtendedSelectedItem#persona:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected persona: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "persona",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ExtendedSelectedItem#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Fabric:var",
          "docComment": "/**\n * @deprecated\n *\n * This component is deprecated as of `@fluentui/react` version 8. Use `ThemeProvider` instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Fabric: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFabricProps",
              "canonicalReference": "@fluentui/react-internal!IFabricProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Fabric",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!FabricBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FabricBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFabricProps",
              "canonicalReference": "@fluentui/react-internal!IFabricProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "FabricBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!FabricSlots:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum FabricSlots "
            }
          ],
          "releaseTag": "Public",
          "name": "FabricSlots",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.black:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "black = "
                },
                {
                  "kind": "Content",
                  "text": "20"
                }
              ],
              "releaseTag": "Public",
              "name": "black",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralDark:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralDark = "
                },
                {
                  "kind": "Content",
                  "text": "19"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralDark",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralLight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralLight = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralLight",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralLighter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralLighter = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralLighter",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralLighterAlt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralLighterAlt = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralLighterAlt",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralPrimary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralPrimary = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralPrimary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralPrimaryAlt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralPrimaryAlt = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralPrimaryAlt",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralQuaternary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralQuaternary = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralQuaternary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralQuaternaryAlt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralQuaternaryAlt = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralQuaternaryAlt",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralSecondary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralSecondary = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralSecondary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralTertiary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralTertiary = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralTertiary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.neutralTertiaryAlt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "neutralTertiaryAlt = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "releaseTag": "Public",
              "name": "neutralTertiaryAlt",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeDark:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeDark = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "themeDark",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeDarkAlt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeDarkAlt = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "themeDarkAlt",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeDarker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeDarker = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "themeDarker",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeLight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeLight = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "themeLight",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeLighter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeLighter = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "themeLighter",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeLighterAlt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeLighterAlt = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "themeLighterAlt",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themePrimary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themePrimary = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "themePrimary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeSecondary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeSecondary = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "themeSecondary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.themeTertiary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "themeTertiary = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "themeTertiary",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!FabricSlots.white:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "white = "
                },
                {
                  "kind": "Content",
                  "text": "21"
                }
              ],
              "releaseTag": "Public",
              "name": "white",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Facepile:var",
          "docComment": "/**\n * The Facepile shows a list of faces or initials in a horizontal lockup. Each circle represents a person.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Facepile: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFacepileProps",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Facepile",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!FacepileBase:class",
          "docComment": "/**\n * FacePile with no default styles. [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Component-Styling)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FacepileBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFacepileProps",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "FacepileBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!FacepileBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `FacepileBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepileProps",
                  "canonicalReference": "@fluentui/react-internal!IFacepileProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!FacepileBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepileProps",
                  "canonicalReference": "@fluentui/react-internal!IFacepileProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!FacepileBase#onRenderAriaDescription:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onRenderAriaDescription(): "
                },
                {
                  "kind": "Content",
                  "text": "\"\" | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "onRenderAriaDescription"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!FacepileBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!FloatingPeoplePicker:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FloatingPeoplePicker extends "
            },
            {
              "kind": "Reference",
              "text": "BaseFloatingPeoplePicker",
              "canonicalReference": "@fluentui/react-internal!BaseFloatingPeoplePicker:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FloatingPeoplePicker",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!FloatingPeoplePicker.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!FocusTrapCallout:var",
          "docComment": "/**\n * A special Callout that uses FocusTrapZone to trap focus\n *\n * @param props - Props for the component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FocusTrapCallout: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFocusTrapCalloutProps",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapCalloutProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "FocusTrapCallout",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!FocusTrapZone:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FocusTrapZone: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFocusTrapZoneProps",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    focusStack: string[];\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "FocusTrapZone",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!FontIcon:var",
          "docComment": "/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations. To style the icon, use `className` or reference `ms-Icon` in CSS. {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FontIcon: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IFontIconProps",
              "canonicalReference": "@fluentui/react-internal!IFontIconProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "FontIcon",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getAllSelectedOptions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllSelectedOptions(options: "
            },
            {
              "kind": "Reference",
              "text": "ISelectableOption",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", selectedIndices: "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ISelectableOption",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "selectedIndices",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "getAllSelectedOptions"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getAriaDescribedBy:function(1)",
          "docComment": "/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n *\n * @returns The aria-describedby value to set on the component with this keytip.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAriaDescribedBy(keySequences: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySequences",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getAriaDescribedBy"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getBackgroundShade:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBackgroundShade(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", shade: "
            },
            {
              "kind": "Reference",
              "text": "Shade",
              "canonicalReference": "@fluentui/react-internal!Shade:enum"
            },
            {
              "kind": "Content",
              "text": ", isInverted?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "shade",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "isInverted",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "getBackgroundShade"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getBoundsFromTargetWindow:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBoundsFromTargetWindow(target: "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MouseEvent",
              "canonicalReference": "!MouseEvent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Point",
              "canonicalReference": "@fluentui/utilities!Point:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ", targetWindow: "
            },
            {
              "kind": "Reference",
              "text": "IWindowWithSegments",
              "canonicalReference": "@fluentui/react-internal!IWindowWithSegments:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IRectangle",
              "canonicalReference": "@fluentui/utilities!IRectangle:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "parameterName": "targetWindow",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "name": "getBoundsFromTargetWindow"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getColorFromHSV:function(1)",
          "docComment": "/**\n * Converts an HSV color (and optional alpha value) to a color object. If `a` is not given, a default of 100 is used. Hex in the returned value will *not* be prefixed with #. If `a` is unspecified or 100, the result's `str` property will contain a hex value (*not* prefixed with #)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getColorFromHSV(hsv: "
            },
            {
              "kind": "Reference",
              "text": "IHSV",
              "canonicalReference": "@fluentui/react-internal!IHSV:interface"
            },
            {
              "kind": "Content",
              "text": ", a?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hsv",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getColorFromHSV"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getColorFromRGBA:function(1)",
          "docComment": "/**\n * Converts an RGBA color to a color object (alpha defaults to 100).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getColorFromRGBA(rgba: "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rgba",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getColorFromRGBA"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getColorFromString:function(1)",
          "docComment": "/**\n * Converts a CSS color string to a color object. Note that hex colors *must* be prefixed with # to be considered valid.\n *\n * `inputColor` will be used unmodified as the `str` property of the returned object. Alpha defaults to 100 if not specified in `inputColor`. Returns undefined if the color string is invalid/not recognized.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getColorFromString(inputColor: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "inputColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getColorFromString"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getContrastRatio:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getContrastRatio(color1: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", color2: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "color2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getContrastRatio"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!getFontIcon:var",
          "docComment": "/**\n * Memoized helper for rendering a FontIcon.\n *\n * @param iconName - The name of the icon to use from the icon font.\n *\n * @param className - Class name for styling the icon.\n *\n * @param ariaLabel - Label for the icon for the benefit of screen readers. {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getFontIcon: "
            },
            {
              "kind": "Content",
              "text": "(iconName: string, className?: string | undefined, ariaLabel?: string | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "React.ReactElement",
              "canonicalReference": "@types/react!~React.ReactElement:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any> | null"
            }
          ],
          "releaseTag": "Public",
          "name": "getFontIcon",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getFullColorString:function(1)",
          "docComment": "/**\n * Converts a color hue to an HTML color string (with # prefix). This implementation ignores all components of `color` except hue.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFullColorString(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getFullColorString"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!getIconContent:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getIconContent: "
            },
            {
              "kind": "Content",
              "text": "(iconName?: string | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "IIconContent",
              "canonicalReference": "@fluentui/react-internal!IIconContent:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "releaseTag": "Public",
          "name": "getIconContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getMaxHeight:function(1)",
          "docComment": "/**\n * Gets the maximum height that a rectangle can have in order to fit below or above a target. If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder of the target given. If no bounds are provided then the window is treated as the bounds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMaxHeight(target: "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MouseEvent",
              "canonicalReference": "!MouseEvent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Point",
              "canonicalReference": "@fluentui/utilities!Point:interface"
            },
            {
              "kind": "Content",
              "text": ", targetEdge: "
            },
            {
              "kind": "Reference",
              "text": "DirectionalHint",
              "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
            },
            {
              "kind": "Content",
              "text": ", gapSpace?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", bounds?: "
            },
            {
              "kind": "Reference",
              "text": "IRectangle",
              "canonicalReference": "@fluentui/utilities!IRectangle:interface"
            },
            {
              "kind": "Content",
              "text": ", coverTarget?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "parameterName": "targetEdge",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "gapSpace",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "bounds",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            },
            {
              "parameterName": "coverTarget",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              }
            }
          ],
          "name": "getMaxHeight"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!getMeasurementCache:var",
          "docComment": "/**\n * Returns a simple object is able to store measurements with a given key.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getMeasurementCache: "
            },
            {
              "kind": "Content",
              "text": "() => {\n    getCachedMeasurement: (data: any) => number | undefined;\n    addMeasurementToCache: (data: any, measurement: number) => void;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "getMeasurementCache",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!getMenuItemStyles:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getMenuItemStyles: "
            },
            {
              "kind": "Content",
              "text": "(theme: "
            },
            {
              "kind": "Reference",
              "text": "ITheme",
              "canonicalReference": "@fluentui/theme!ITheme:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "IMenuItemStyles",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "getMenuItemStyles",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!getNextResizeGroupStateProvider:var",
          "docComment": "/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current state and any measurement updates.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getNextResizeGroupStateProvider: "
            },
            {
              "kind": "Content",
              "text": "(measurementCache?: {\n    getCachedMeasurement: (data: any) => number | undefined;\n    addMeasurementToCache: (data: any, measurement: number) => void;\n}) => {\n    getNextState: (props: "
            },
            {
              "kind": "Reference",
              "text": "IResizeGroupProps",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ", currentState: "
            },
            {
              "kind": "Reference",
              "text": "IResizeGroupState",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState:interface"
            },
            {
              "kind": "Content",
              "text": ", getElementToMeasureDimension: () => number, newContainerDimension?: number | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "IResizeGroupState",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n    shouldRenderDataForMeasurement: (dataToMeasure: any) => boolean;\n    getInitialResizeGroupState: (data: any) => "
            },
            {
              "kind": "Reference",
              "text": "IResizeGroupState",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "getNextResizeGroupStateProvider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getOppositeEdge:function(1)",
          "docComment": "/**\n * Returns the opposite edge of the given RectangleEdge.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getOppositeEdge(edge: "
            },
            {
              "kind": "Reference",
              "text": "RectangleEdge",
              "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RectangleEdge",
              "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "edge",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getOppositeEdge"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getPersonaInitialsColor:function(1)",
          "docComment": "/**\n * Gets the hex color string (prefixed with #) for the given persona props. This is the logic used internally by the Persona control.\n *\n * @param props - Current persona props\n *\n * @returns Hex color string prefixed with #\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPersonaInitialsColor(props: "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'primaryText' | 'text' | 'initialsColor'>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "name": "getPersonaInitialsColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getShade:function(1)",
          "docComment": "/**\n * Given a color and a shade specification, generates the requested shade of the color. Logic: if white darken via tables defined above if black lighten if light strongen if dark soften else default soften or strongen depending on shade#\n *\n * @param color - The base color whose shade is to be computed\n *\n * @param shade - The shade of the base color to compute\n *\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getShade(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", shade: "
            },
            {
              "kind": "Reference",
              "text": "Shade",
              "canonicalReference": "@fluentui/react-internal!Shade:enum"
            },
            {
              "kind": "Content",
              "text": ", isInverted?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "shade",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "isInverted",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "getShade"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!getSubmenuItems:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSubmenuItems(item: "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": "[] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "item",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getSubmenuItems"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!HEX_REGEX:var",
          "docComment": "/**\n * Regular expression matching only valid hexadecimal chars\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HEX_REGEX: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "HEX_REGEX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!HoverCard:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HoverCard: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IHoverCardProps",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "HoverCard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!HoverCardBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HoverCardBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IHoverCardProps",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IHoverCardState",
              "canonicalReference": "@fluentui/react-internal!IHoverCardState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IHoverCard",
              "canonicalReference": "@fluentui/react-internal!IHoverCard:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HoverCardBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `HoverCardBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IHoverCardProps",
                  "canonicalReference": "@fluentui/react-internal!IHoverCardProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(prevProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IHoverCardProps",
                  "canonicalReference": "@fluentui/react-internal!IHoverCardProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "IHoverCardState",
                  "canonicalReference": "@fluentui/react-internal!IHoverCardState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prevProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        cardOpenDelay: number;\n        cardDismissDelay: number;\n        expandedCardOpenDelay: number;\n        instantOpenOnClick: boolean;\n        setInitialFocus: boolean;\n        openHotKey: number;\n        type: "
                },
                {
                  "kind": "Reference",
                  "text": "HoverCardType",
                  "canonicalReference": "@fluentui/react-internal!HoverCardType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase#dismiss:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "(withTimeOut?: boolean | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!HoverCardBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!HoverCardType:enum",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum HoverCardType "
            }
          ],
          "releaseTag": "Public",
          "name": "HoverCardType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!HoverCardType.expanding:member",
              "docComment": "/**\n * File card consisting of two parts: compact and expanded. Has some default sizes if not specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expanding = "
                },
                {
                  "kind": "Content",
                  "text": "\"ExpandingCard\""
                }
              ],
              "releaseTag": "Public",
              "name": "expanding",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!HoverCardType.plain:member",
              "docComment": "/**\n * Plain card consisting of one part responsive to the size of content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "plain = "
                },
                {
                  "kind": "Content",
                  "text": "\"PlainCard\""
                }
              ],
              "releaseTag": "Public",
              "name": "plain",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!hsl2hsv:function(1)",
          "docComment": "/**\n * Converts HSL components to an HSV color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hsl2hsv(h: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", s: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", l: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IHSV",
              "canonicalReference": "@fluentui/react-internal!IHSV:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "h",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "l",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "hsl2hsv"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!hsl2rgb:function(1)",
          "docComment": "/**\n * Converts HSL components to an RGB color. Does not set the alpha value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hsl2rgb(h: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", s: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", l: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "h",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "l",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "hsl2rgb"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!hsv2hex:function(1)",
          "docComment": "/**\n * Converts HSV components to a hex color string (without # prefix).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hsv2hex(h: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", s: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", v: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "h",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "hsv2hex"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!hsv2hsl:function(1)",
          "docComment": "/**\n * Converts HSV components to an HSL color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hsv2hsl(h: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", s: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", v: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IHSL",
              "canonicalReference": "@fluentui/react-internal!IHSL:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "h",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "hsv2hsl"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!hsv2rgb:function(1)",
          "docComment": "/**\n * Converts HSV components to an RGB color. Does not set the alpha value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hsv2rgb(h: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", s: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", v: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "h",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "hsv2rgb"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps:interface",
          "docComment": "/**\n * {@docCategory IAccessiblePopupProps}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAccessiblePopupProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IAccessiblePopupProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps#closeButtonAriaLabel:member",
              "docComment": "/**\n * Aria label on close button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps#elementToFocusOnDismiss:member",
              "docComment": "/**\n * Sets the element to focus on when exiting the control's FocusTrapZone.\n *\n * @defaultvalue\n *\n * The `element.target` that triggered the control opening.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementToFocusOnDismiss?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementToFocusOnDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps#firstFocusableSelector:member",
              "docComment": "/**\n * Class name (not actual selector) for first focusable item. Do not append a dot.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "firstFocusableSelector?: "
                },
                {
                  "kind": "Content",
                  "text": "string | (() => string)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "firstFocusableSelector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps#forceFocusInsideTrap:member",
              "docComment": "/**\n * Whether control should force focus inside its focus trap zone.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceFocusInsideTrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceFocusInsideTrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps#ignoreExternalFocusing:member",
              "docComment": "/**\n * If false (the default), the control's FocusTrapZone will restore focus to the element which activated it once the trap zone is unmounted or disabled. Set to true to disable this behavior.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreExternalFocusing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreExternalFocusing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps#isClickableOutsideFocusTrap:member",
              "docComment": "/**\n * Whether this control will allow clicks outside its FocusTrapZone.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isClickableOutsideFocusTrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isClickableOutsideFocusTrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface",
          "docComment": "/**\n * {@docCategory ActivityItem}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IActivityItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IActivityItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#activityDescription:member",
              "docComment": "/**\n * An element describing the activity that took place. If no activityDescription, activityDescriptionText, or onRenderActivityDescription are included, no description of the activity is shown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityDescription?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#activityDescriptionText:member",
              "docComment": "/**\n * Text describing the activity that occurred and naming the people involved in it. Deprecated, use `activityDescription` instead.\n *\n * @deprecated\n *\n * Use `activityDescription` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityDescriptionText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityDescriptionText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#activityIcon:member",
              "docComment": "/**\n * An element containing an icon shown next to the activity item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#activityPersonas:member",
              "docComment": "/**\n * If activityIcon is not set, then the persona props in this array will be used as the icon for this activity item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityPersonas?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaSharedProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityPersonas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#animateBeaconSignal:member",
              "docComment": "/**\n * Enables/Disables the beacon that radiates from the center of the center of the activity icon. Signals an activity has started.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animateBeaconSignal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animateBeaconSignal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#beaconColorOne:member",
              "docComment": "/**\n * Beacon color one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beaconColorOne?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beaconColorOne",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#beaconColorTwo:member",
              "docComment": "/**\n * Beacon color two\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beaconColorTwo?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beaconColorTwo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#comments:member",
              "docComment": "/**\n * An element containing the text of comments or \\@mention messages. If no comments, commentText, or onRenderComments are included, no comments are shown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "comments?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "comments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#commentText:member",
              "docComment": "/**\n * Text of comments or \\@mention messages. Deprecated, use `comments` instead.\n *\n * @deprecated\n *\n * Use `comments` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commentText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "commentText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#isCompact:member",
              "docComment": "/**\n * Indicated if the compact styling should be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompact?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompact",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#onRenderActivityDescription:member",
              "docComment": "/**\n * A renderer for the description of the current activity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderActivityDescription?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IActivityItemProps",
                  "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderActivityDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#onRenderComments:member",
              "docComment": "/**\n * A renderer that adds the text of a comment below the activity description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderComments?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IActivityItemProps",
                  "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderComments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#onRenderIcon:member",
              "docComment": "/**\n * A renderer to create the icon next to the activity item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IActivityItemProps",
                  "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#onRenderTimeStamp:member",
              "docComment": "/**\n * A renderer adds a time stamp. If not included, timeStamp is shown as plain text below the activity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderTimeStamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IActivityItemProps",
                  "canonicalReference": "@fluentui/react-internal!IActivityItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderTimeStamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#styles:member",
              "docComment": "/**\n * Optional styling for the elements within the Activity Item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IActivityItemStyles",
                  "canonicalReference": "@fluentui/react-internal!IActivityItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemProps#timeStamp:member",
              "docComment": "/**\n * Element shown as a timestamp on this activity. If not included, no timestamp is shown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeStamp?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "timeStamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IActivityItemStyles:interface",
          "docComment": "/**\n * {@docCategory ActivityItem}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IActivityItemStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IActivityItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#activityContent:member",
              "docComment": "/**\n * Styles applied to the main container of the activity's description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#activityPersona:member",
              "docComment": "/**\n * Styles applied to the persona of the user that did this activity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityPersona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityPersona",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#activityText:member",
              "docComment": "/**\n * Styles applied to the activity's description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#activityTypeIcon:member",
              "docComment": "/**\n * Styles applied to the icon indicating the type of the activity. Only shown when personas are unavailable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "activityTypeIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "activityTypeIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#commentText:member",
              "docComment": "/**\n * Styles applied to the text of comments.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commentText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "commentText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#doublePersona:member",
              "docComment": "/**\n * Styles applied to personas when two users are involved in a single activity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doublePersona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "doublePersona",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#isCompactContent:member",
              "docComment": "/**\n * Styles applied to main text container in the compact variant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompactContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompactContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#isCompactIcon:member",
              "docComment": "/**\n * Styles applied to personas and icons in the compact variant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompactIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompactIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#isCompactPersona:member",
              "docComment": "/**\n * Styles applied to personas in the compact variant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompactPersona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompactPersona",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#isCompactPersonaContainer:member",
              "docComment": "/**\n * Styles applied to a wrapper around personas in the compact variant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompactPersonaContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompactPersonaContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#isCompactRoot:member",
              "docComment": "/**\n * Styles applied to root in the compact variant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompactRoot?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompactRoot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#isCompactTimeStamp:member",
              "docComment": "/**\n * Styles applied to the timestamp in compact mode. This can occur if a host overrides the render behavior to force the timestamp to render.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCompactTimeStamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCompactTimeStamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#personaContainer:member",
              "docComment": "/**\n * Styles applied to the container of the persona image or activity type icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personaContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#pulsingBeacon:member",
              "docComment": "/**\n * Styles applied to the root activity item container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pulsingBeacon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pulsingBeacon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#root:member",
              "docComment": "/**\n * Styles applied to the root activity item container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IActivityItemStyles#timeStamp:member",
              "docComment": "/**\n * Styles applied to the timestamp at the end of each activity item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeStamp?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "timeStamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IAnnouncedProps:interface",
          "docComment": "/**\n * {@docCategory Announced}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAnnouncedProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.Props",
              "canonicalReference": "@types/react!~React.Props:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnnouncedBase",
              "canonicalReference": "@fluentui/react-internal!AnnouncedBase:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IAnnouncedProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps#\"aria-live\":member",
              "docComment": "/**\n * Priority with which the screen reader should treat updates to this region  @default 'polite'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-live'?: "
                },
                {
                  "kind": "Content",
                  "text": "'off' | 'polite' | 'assertive'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "\"aria-live\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps#as:member",
              "docComment": "/**\n * Optionally render the root of this component as another component type or primitive. The custom type **must** preserve any children or native props passed in.  @default 'div'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "as?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementType",
                  "canonicalReference": "@types/react!~React.ElementType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "as",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps#message:member",
              "docComment": "/**\n * The status message provided as screen reader output\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}, "
                },
                {
                  "kind": "Reference",
                  "text": "IAnnouncedStyles",
                  "canonicalReference": "@fluentui/react-internal!IAnnouncedStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IAnnouncedStyleProps:type",
          "docComment": "/**\n * {@docCategory Announced}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IAnnouncedStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IAnnouncedProps",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IAnnouncedStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IAnnouncedStyles:interface",
          "docComment": "/**\n * {@docCategory Announced}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAnnouncedStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IAnnouncedStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedStyles#root:member",
              "docComment": "/**\n * Style override for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAnnouncedStyles#screenReaderText:member",
              "docComment": "/**\n * Style override for the screen reader text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IAutofill:interface",
          "docComment": "/**\n * {@docCategory Autofill}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAutofill "
            }
          ],
          "releaseTag": "Public",
          "name": "IAutofill",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#clear:member(1)",
              "docComment": "/**\n * Clear all text in the input. Sets value to '';\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#cursorLocation:member",
              "docComment": "/**\n * The current index of the cursor in the input area. Returns -1 if the input element is not ready.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cursorLocation: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cursorLocation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#focus:member(1)",
              "docComment": "/**\n * Focus the input element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#inputElement:member",
              "docComment": "/**\n * The current input element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputElement: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#isValueSelected:member",
              "docComment": "/**\n * A boolean for whether or not there is a value selected in the input area.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValueSelected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isValueSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#selectionEnd:member",
              "docComment": "/**\n * the current index of where the selection ends. Returns -1 if the input element is not ready.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionEnd: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#selectionStart:member",
              "docComment": "/**\n * The current index of where the selection starts. Returns -1 if the input element is not ready.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionStart: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofill#value:member",
              "docComment": "/**\n * The current text value that the user has entered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IAutofillProps:interface",
          "docComment": "/**\n * {@docCategory Autofill}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAutofillProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.InputHTMLAttributes",
              "canonicalReference": "@types/react!~React.InputHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Autofill",
              "canonicalReference": "@fluentui/react-internal!Autofill:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IAutofillProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#componentRef:member",
              "docComment": "/**\n * Gets the components ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IAutofill",
                  "canonicalReference": "@fluentui/react-internal!IAutofill:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#defaultVisibleValue:member",
              "docComment": "/**\n * The default value to be visible. This is different from placeholder because it actually sets the current value of the picker Note: This will only be set upon component creation and will not update with subsequent prop updates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultVisibleValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultVisibleValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#enableAutofillOnKeyPress:member",
              "docComment": "/**\n * When the user uses left arrow, right arrow, clicks, or deletes text autofill is disabled Since the user has taken control. It is automatically re-enabled when the user enters text and the cursor is at the end of the text in the input box. This specifies other key presses that will re-enabled. autofill.\n *\n * @defaultvalue\n *\n * [KeyCodes.down, KeyCodes.up]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableAutofillOnKeyPress?: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyCodes",
                  "canonicalReference": "@fluentui/utilities!KeyCodes:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableAutofillOnKeyPress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#onInputChange:member",
              "docComment": "/**\n * A callback used to modify the input string. Do not use this to return a string anymore. Instead pass in value like you would any other controlled component. Called before the state has been updated.\n *\n * @param composing - true if the change event was triggered while the inner input was in the middle of a multi-character composition. (for example, jp-hiragana IME input)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onInputChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string, composing: boolean) => string | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#onInputValueChange:member",
              "docComment": "/**\n * A callback for when the current input value changes. Called after the state has been changed.\n *\n * @param composing - true if the change event was triggered while the inner input was in the middle of a multi-character composition. (for example, jp-hiragana IME input)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onInputValueChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(newValue?: string, composing?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputValueChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#preventValueSelection:member",
              "docComment": "/**\n * Should the value of the input be selected? True if we're focused on our input, false otherwise. We need to explicitly not select the text in the autofill if we are no longer focused. In IE11, selecting a input will also focus the input, causing other element's focus to be stolen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventValueSelection?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventValueSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#shouldSelectFullInputValueInComponentDidUpdate:member",
              "docComment": "/**\n * Handler for checking if the full value of the input should be selected in componentDidUpdate\n *\n * @returns - should the full value of the input be selected?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldSelectFullInputValueInComponentDidUpdate?: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldSelectFullInputValueInComponentDidUpdate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#suggestedDisplayValue:member",
              "docComment": "/**\n * The suggested autofill value that will display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestedDisplayValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestedDisplayValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillProps#updateValueInWillReceiveProps:member",
              "docComment": "/**\n * Handler for checking and updating the value if needed in componentWillReceiveProps\n *\n * @deprecated\n *\n * use standard input Value prop instead if the autofill should act like a controlled component\n *\n * @returns - the updated value to set, if needed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateValueInWillReceiveProps?: "
                },
                {
                  "kind": "Content",
                  "text": "() => string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "updateValueInWillReceiveProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IAutofillState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAutofillState "
            }
          ],
          "releaseTag": "Public",
          "name": "IAutofillState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IAutofillState#inputValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputValue: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseExtendedPicker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseExtendedPicker<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseExtendedPicker",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPicker#focus:member",
              "docComment": "/**\n * Sets focus to the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPicker#forceResolve:member",
              "docComment": "/**\n * Forces the picker to resolve\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceResolve?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceResolve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPicker#items:member",
              "docComment": "/**\n * Gets the current value of the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Content",
                  "text": "T[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseExtendedPickerProps<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseExtendedPickerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#className:member",
              "docComment": "/**\n * ClassName for the picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#componentRef:member",
              "docComment": "/**\n * Ref of the component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseExtendedPicker",
                  "canonicalReference": "@fluentui/react-internal!IBaseExtendedPicker:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#currentRenderedQueryString:member",
              "docComment": "/**\n * Current rendered query string that correlates to the rendered result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentRenderedQueryString?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentRenderedQueryString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#defaultSelectedItems:member",
              "docComment": "/**\n * Initial items that have already been selected and should appear in the people picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSelectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultSelectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#disabled:member",
              "docComment": "/**\n * Flag for disabling the picker.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#floatingPickerProps:member",
              "docComment": "/**\n * Floating picker properties\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floatingPickerProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "floatingPickerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#focusZoneProps:member",
              "docComment": "/**\n * Focus zone props\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusZoneProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFocusZoneProps",
                  "canonicalReference": "@fluentui/react-focus!IFocusZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusZoneProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#headerComponent:member",
              "docComment": "/**\n * Header/title element for the picker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerComponent?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerComponent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#inputProps:member",
              "docComment": "/**\n * Autofill input native props\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IInputProps",
                  "canonicalReference": "@fluentui/react-internal!IInputProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#itemLimit:member",
              "docComment": "/**\n * Restrict the amount of selectable items.\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemLimit?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onBlur:member",
              "docComment": "/**\n * A callback for when the user moves the focus away from the picker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEventHandler",
                  "canonicalReference": "@types/react!~React.FocusEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onChange:member",
              "docComment": "/**\n * A callback for when the selected list of items changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(items?: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onFocus:member",
              "docComment": "/**\n * A callback for when the user put focus on the picker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEventHandler",
                  "canonicalReference": "@types/react!~React.FocusEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onItemAdded:member",
              "docComment": "/**\n * A callback on when an item was added to the selected item list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemAdded?: "
                },
                {
                  "kind": "Content",
                  "text": "(addedItem: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemAdded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onItemSelected:member",
              "docComment": "/**\n * A callback to process a selection after the user selects a suggestion from the picker. The returned item will be added to the selected items list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemSelected?: "
                },
                {
                  "kind": "Content",
                  "text": "(selectedItem?: T) => T | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onItemsRemoved:member",
              "docComment": "/**\n * A callback on when an item or items were removed from the selected item list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemsRemoved?: "
                },
                {
                  "kind": "Content",
                  "text": "(removedItems: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemsRemoved",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onPaste:member",
              "docComment": "/**\n * A callback for when text is pasted into the input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPaste?: "
                },
                {
                  "kind": "Content",
                  "text": "(pastedText: string) => T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPaste",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onRenderFloatingPicker:member",
              "docComment": "/**\n * Function that specifies how the floating picker will appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderFloatingPicker: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!~React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderFloatingPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#onRenderSelectedItems:member",
              "docComment": "/**\n * Function that specifies how the floating picker will appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSelectedItems: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!~React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsListProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSelectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#selectedItems:member",
              "docComment": "/**\n * If using as a controlled component use selectedItems here instead of the SelectedItemsList\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#selectedItemsListProps:member",
              "docComment": "/**\n * Selected items list properties\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedItemsListProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsListProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItemsListProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps#suggestionItems:member",
              "docComment": "/**\n * If using as a controlled component use suggestionItems here instead of FloatingPicker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseExtendedPickerState<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseExtendedPickerState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerState#queryString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryString: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "queryString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseFloatingPicker "
            }
          ],
          "releaseTag": "Public",
          "name": "IBaseFloatingPicker",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker#hidePicker:member",
              "docComment": "/**\n * Hides the picker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidePicker: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidePicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker#inputText:member",
              "docComment": "/**\n * Gets the input text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker#isSuggestionsShown:member",
              "docComment": "/**\n * Whether the suggestions are shown\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSuggestionsShown: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSuggestionsShown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker#onQueryStringChanged:member",
              "docComment": "/**\n * On queryString changed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onQueryStringChanged: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onQueryStringChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker#showPicker:member",
              "docComment": "/**\n * Shows the picker\n *\n * @param updateValue - Optional param to indicate whether to update the query string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showPicker: "
                },
                {
                  "kind": "Content",
                  "text": "(updateValue?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker#suggestions:member",
              "docComment": "/**\n * Gets the suggestions\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseFloatingPickerProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<any> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseFloatingPickerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#calloutWidth:member",
              "docComment": "/**\n * Width for the suggestions callout\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#className:member",
              "docComment": "/**\n * ClassName for the picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#componentRef:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPicker",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPicker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#createGenericItem:member",
              "docComment": "/**\n * Function that specifies how arbitrary text entered into the well is handled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGenericItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string, isValid: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "createGenericItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#getTextFromItem:member",
              "docComment": "/**\n * A callback to get text from an item. Used to autofill text in the pickers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTextFromItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T, currentValue?: string) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getTextFromItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#inputElement:member",
              "docComment": "/**\n * The input element to listen on events\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onChange:member",
              "docComment": "/**\n * A callback for when a suggestion is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onInputChanged:member",
              "docComment": "/**\n * A callback for when the input has been changed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onInputChanged?: "
                },
                {
                  "kind": "Content",
                  "text": "(filter: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onRemoveSuggestion:member",
              "docComment": "/**\n * A callback for when an item is removed from the suggestion list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRemoveSuggestion?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRemoveSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onRenderSuggestionsItem:member",
              "docComment": "/**\n * Function that specifies how an individual suggestion item will appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSuggestionsItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: T, itemProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSuggestionsItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onResolveSuggestions:member",
              "docComment": "/**\n * A callback for what should happen when a person types text into the input. Returns the already selected items so the resolver can filter them out. If used in conjunction with resolveDelay this will only kick off after the delay throttle. Return null if using as a controlled component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResolveSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "(filter: string, selectedItems?: T[]) => T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onResolveSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onSuggestionsHidden:member",
              "docComment": "/**\n * The callback that should be called when the suggestions are hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuggestionsHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionsHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onSuggestionsShown:member",
              "docComment": "/**\n * The callback that should be called when the suggestions are shown\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuggestionsShown?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionsShown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onValidateInput:member",
              "docComment": "/**\n * A function used to validate if raw text entered into the well can be added\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onValidateInput?: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onValidateInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#onZeroQuerySuggestion:member",
              "docComment": "/**\n * The suggestions to show on zero query, return null if using as a controlled component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onZeroQuerySuggestion?: "
                },
                {
                  "kind": "Content",
                  "text": "(selectedItems?: T[]) => T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onZeroQuerySuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#pickerCalloutProps:member",
              "docComment": "/**\n * The properties that will get passed to the Callout component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pickerCalloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pickerCalloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#pickerSuggestionsProps:member",
              "docComment": "/**\n * The properties that will get passed to the Suggestions component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pickerSuggestionsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerSuggestionProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerSuggestionProps:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pickerSuggestionsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#resolveDelay:member",
              "docComment": "/**\n * The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. If a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resolveDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#searchingText:member",
              "docComment": "/**\n * The text to display while searching for more results in a limited suggestions list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchingText?: "
                },
                {
                  "kind": "Content",
                  "text": "((props: {\n        input: string;\n    }) => string) | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchingText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#selectedItems:member",
              "docComment": "/**\n * The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#showForceResolve:member",
              "docComment": "/**\n * The callback that should be called to see if the force resolve command should be shown\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showForceResolve?: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showForceResolve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#suggestionItems:member",
              "docComment": "/**\n * If using as a controlled component, the items to show in the suggestion list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps#suggestionsStore:member",
              "docComment": "/**\n * The suggestions store\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsStore: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsStore",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsStore:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseFloatingPickerState "
            }
          ],
          "releaseTag": "Public",
          "name": "IBaseFloatingPickerState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerState#didBind:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "didBind: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "didBind",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerState#queryString:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryString: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "queryString",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerState#suggestionsVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerSuggestionProps:type",
          "docComment": "/**\n * Props which are passed on to the inner Suggestions component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IBaseFloatingPickerSuggestionProps = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsControlProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, 'shouldSelectFirstItem' | 'headerItemsProps' | 'footerItemsProps' | 'showRemoveButtons'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IBaseFloatingPickerSuggestionProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBasePicker:interface",
          "docComment": "/**\n * BasePicker component. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBasePicker<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBasePicker",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePicker#completeSuggestion:member",
              "docComment": "/**\n * When called, will take the currently selected suggestion and complete it. If called with forceComplete true, it will attempt to force the current suggestion to complete, must provide both createGenericSuggestion, so the text can be turned into an object in the right shape, and onValidateInput, so the object knows if it's correct or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "completeSuggestion: "
                },
                {
                  "kind": "Content",
                  "text": "(forceComplete?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "completeSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePicker#focus:member",
              "docComment": "/**\n * Sets focus to the focus zone.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePicker#focusInput:member",
              "docComment": "/**\n * Set focus to the input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusInput: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePicker#items:member",
              "docComment": "/**\n * Gets the current value of the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Content",
                  "text": "T[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface",
          "docComment": "/**\n * Type T is the type of the item that is displayed and searched for by the picker. For example, if the picker is displaying persona's then type T could either be of Persona or IPersona props {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBasePickerProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Props",
              "canonicalReference": "@types/react!~React.Props:interface"
            },
            {
              "kind": "Content",
              "text": "<any> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBasePickerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#\"aria-label\":member",
              "docComment": "/**\n * Optional aria-label that will be placed on the element that has the role \"combobox\" attached. Additionally aria-labelled by will get added to the supporting input element contained with in the combobox container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "['aria-label']?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "\"aria-label\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#className:member",
              "docComment": "/**\n * ClassName for the picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IBasePicker interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBasePicker",
                  "canonicalReference": "@fluentui/react-internal!IBasePicker:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#createGenericItem:member",
              "docComment": "/**\n * Function that specifies how arbitrary text entered into the well is handled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGenericItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string, ValidationState: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidationState",
                  "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "createGenericItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#defaultSelectedItems:member",
              "docComment": "/**\n * Initial items that have already been selected and should appear in the people picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSelectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultSelectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#disabled:member",
              "docComment": "/**\n * Flag for disabling the picker.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#enableSelectedSuggestionAlert:member",
              "docComment": "/**\n * Adds an additional alert for the currently selected suggestion. This prop should be set to true for IE11 and below, as it enables proper screen reader behavior for each suggestion (since aria-activedescendant does not work with IE11). It should not be set for modern browsers (Edge, Chrome).\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableSelectedSuggestionAlert?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableSelectedSuggestionAlert",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#getTextFromItem:member",
              "docComment": "/**\n * A callback to get text from an item. Used to autofill text in the pickers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTextFromItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T, currentValue?: string) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getTextFromItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#inputProps:member",
              "docComment": "/**\n * AutoFill input native props\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IInputProps",
                  "canonicalReference": "@fluentui/react-internal!IInputProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#itemLimit:member",
              "docComment": "/**\n * Restrict the amount of selectable items.\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemLimit?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemLimit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onBlur:member",
              "docComment": "/**\n * A callback for when the user moves the focus away from the picker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEventHandler",
                  "canonicalReference": "@types/react!~React.FocusEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onChange:member",
              "docComment": "/**\n * A callback for when the selected list of items changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(items?: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onDismiss:member",
              "docComment": "/**\n * A callback to override the default behavior of adding the selected suggestion on dismiss. If it returns true or nothing, the selected item will be added on dismiss. If false, the selected item will not be added on dismiss.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any, selectedItem?: T) => boolean | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onEmptyInputFocus:member",
              "docComment": "/**\n * A callback for what should happen when a user clicks within the input area.\n *\n * @deprecated\n *\n * Please use onEmptyResolveSuggestions instead, as the suggestions aren't about setting focus as they are about resolving suggestions when there is no input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEmptyInputFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(selectedItems?: T[]) => T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onEmptyInputFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onEmptyResolveSuggestions:member",
              "docComment": "/**\n * A callback for what should happen when suggestions are shown without input provided. Returns the already selected items so the resolver can filter them out. If used in conjunction with resolveDelay this will only kick off after the delay throttle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEmptyResolveSuggestions?: "
                },
                {
                  "kind": "Content",
                  "text": "(selectedItems?: T[]) => T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onEmptyResolveSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onFocus:member",
              "docComment": "/**\n * A callback for when the user put focus on the picker\n *\n * @deprecated\n *\n * Use `inputProps.onFocus` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEventHandler",
                  "canonicalReference": "@types/react!~React.FocusEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Autofill",
                  "canonicalReference": "@fluentui/react-internal!Autofill:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onGetMoreResults:member",
              "docComment": "/**\n * A callback that gets the rest of the results when a user clicks get more results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onGetMoreResults?: "
                },
                {
                  "kind": "Content",
                  "text": "(filter: string, selectedItems?: T[]) => T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGetMoreResults",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onInputChange:member",
              "docComment": "/**\n * A callback used to modify the input string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onInputChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onInputChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onItemSelected:member",
              "docComment": "/**\n * A callback to process a selection after the user selects something from the picker. If the callback returns null, the item will not be added to the picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemSelected?: "
                },
                {
                  "kind": "Content",
                  "text": "(selectedItem?: T) => T | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onRemoveSuggestion:member",
              "docComment": "/**\n * A callback for when an item is removed from the suggestion list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRemoveSuggestion?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRemoveSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onRenderItem:member",
              "docComment": "/**\n * Function that specifies how the selected item will appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IPickerItemProps",
                  "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onRenderSuggestionsItem:member",
              "docComment": "/**\n * Function that specifies how an individual suggestion item will appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSuggestionsItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: T, itemProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSuggestionsItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onResolveSuggestions:member",
              "docComment": "/**\n * A callback for what should happen when a person types text into the input. Returns the already selected items so the resolver can filter them out. If used in conjunction with resolveDelay this will only kick off after the delay throttle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onResolveSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "(filter: string, selectedItems?: T[]) => T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onResolveSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#onValidateInput:member",
              "docComment": "/**\n * A function used to validate if raw text entered into the well can be added into the selected items list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onValidateInput?: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "ValidationState",
                  "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onValidateInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#pickerCalloutProps:member",
              "docComment": "/**\n * The properties that will get passed to the Callout component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pickerCalloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pickerCalloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#pickerSuggestionsProps:member",
              "docComment": "/**\n * The properties that will get passed to the Suggestions component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pickerSuggestionsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerSuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerSuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pickerSuggestionsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#removeButtonAriaLabel:member",
              "docComment": "/**\n * Aria label for the \"X\" button in the selected item component.\n *\n * @defaultvalue\n *\n * ''\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#resolveDelay:member",
              "docComment": "/**\n * The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. If a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resolveDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#searchingText:member",
              "docComment": "/**\n * The text to display while searching for more results in a limited suggestions list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchingText?: "
                },
                {
                  "kind": "Content",
                  "text": "((props: {\n        input: string;\n    }) => string) | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchingText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#selectedItems:member",
              "docComment": "/**\n * The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerStyles",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps#theme:member",
              "docComment": "/**\n * Theme provided by styled() function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBasePickerState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBasePickerState "
            }
          ],
          "releaseTag": "Public",
          "name": "IBasePickerState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#isFocused:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFocused?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFocused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#isMostRecentlyUsedVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMostRecentlyUsedVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMostRecentlyUsedVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#isResultsFooterVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isResultsFooterVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isResultsFooterVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#isSearching:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSearching?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSearching",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#moreSuggestionsAvailable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreSuggestionsAvailable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "moreSuggestionsAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#selectedIndices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedIndices?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedIndices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#suggestedDisplayValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestedDisplayValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestedDisplayValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#suggestionsLoading:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsLoading?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerState#suggestionsVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IBasePickerStyleProps:type",
          "docComment": "/**\n * The props needed to construct styles. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IBasePickerStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IBasePickerProps",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, 'theme' | 'className' | 'disabled'> & {\n    isFocused?: boolean;\n    inputClassName?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IBasePickerStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBasePickerStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBasePickerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IBasePickerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerStyles#input:member",
              "docComment": "/**\n * Refers to the input were to type new selections (picks).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerStyles#itemsWrapper:member",
              "docComment": "/**\n * Refers to the items already selected (picked).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemsWrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemsWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerStyles#root:member",
              "docComment": "/**\n * Root element of any picker extending from BasePicker (wraps all the elements).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerStyles#screenReaderText:member",
              "docComment": "/**\n * Refers to helper element used for accessibility tools (hidden from view on screen).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBasePickerStyles#text:member",
              "docComment": "/**\n * Refers to the elements already selected (picked) wrapped by `itemsWrapper` along with the input to type a new selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBasePickerSuggestionsProps:interface",
          "docComment": "/**\n * Subset of picker options that may be legally passed through a picker to its internal Suggestions component. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBasePickerSuggestionsProps<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, 'onRenderNoResultFound' | 'suggestionsHeaderText' | 'mostRecentlyUsedHeaderText' | 'noResultsFoundText' | 'className' | 'suggestionsClassName' | 'suggestionsItemClassName' | 'searchForMoreText' | 'forceResolveText' | 'loadingText' | 'searchingText' | 'resultsFooterFull' | 'resultsFooter' | 'resultsMaximumNumber' | 'showRemoveButtons' | 'suggestionsAvailableAlertText' | 'suggestionsContainerAriaLabel' | 'showForceResolve'> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "IBasePickerSuggestionsProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsList:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseSelectedItemsList<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseSelectedItemsList",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsList#addItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addItems: "
                },
                {
                  "kind": "Content",
                  "text": "(items: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsList#items:member",
              "docComment": "/**\n * Gets the current value of the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Content",
                  "text": "T[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseSelectedItemsListProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<any> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseSelectedItemsListProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#canRemoveItem:member",
              "docComment": "/**\n * A callback on whether this item can be deleted\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canRemoveItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canRemoveItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#componentRef:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseSelectedItemsList",
                  "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsList:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#createGenericItem:member",
              "docComment": "/**\n * Function that specifies how arbitrary text entered into the well is handled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGenericItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(input: string, ValidationState: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidationState",
                  "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "createGenericItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#defaultSelectedItems:member",
              "docComment": "/**\n * Initial items that have already been selected and should appear in the people picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSelectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultSelectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#onChange:member",
              "docComment": "/**\n * A callback for when the selected list of items changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(items?: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#onCopyItems:member",
              "docComment": "/**\n * A callback for when items are copied\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCopyItems?: "
                },
                {
                  "kind": "Content",
                  "text": "(items: T[]) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCopyItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#onItemDeleted:member",
              "docComment": "/**\n * A callback when an item is deleted\n *\n * @deprecated\n *\n * Use `onItemsDeleted` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemDeleted?: "
                },
                {
                  "kind": "Content",
                  "text": "(deletedItem: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemDeleted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#onItemsDeleted:member",
              "docComment": "/**\n * A callback when and item or items are deleted\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemsDeleted?: "
                },
                {
                  "kind": "Content",
                  "text": "(deletedItems: T[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemsDeleted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#onItemSelected:member",
              "docComment": "/**\n * A callback to process a selection after the user selects something from the picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemSelected?: "
                },
                {
                  "kind": "Content",
                  "text": "(selectedItem?: T | T[]) => T | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | T[] | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#onRenderItem:member",
              "docComment": "/**\n * Function that specifies how the selected item will appear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectedItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectedItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#removeButtonAriaLabel:member",
              "docComment": "/**\n * Aria label for the 'X' button in the selected item component.\n *\n * @defaultvalue\n *\n * ''\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#selectedItems:member",
              "docComment": "/**\n * The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedItems?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps#selection:member",
              "docComment": "/**\n * The selection\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selection?: "
                },
                {
                  "kind": "Reference",
                  "text": "Selection",
                  "canonicalReference": "@fluentui/utilities!Selection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBaseSelectedItemsListState<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IBaseSelectedItemsListState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListState#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IButtonGrid:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IButtonGrid "
            }
          ],
          "releaseTag": "Public",
          "name": "IButtonGrid",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IButtonGridCellProps<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IButtonGridCellProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#cellDisabledStyle:member",
              "docComment": "/**\n * Optional, the CSS class used for when the cell is disabled\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellDisabledStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellDisabledStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#cellIsSelectedStyle:member",
              "docComment": "/**\n * Optional, the CSS class used for when the cell is selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellIsSelectedStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellIsSelectedStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#className:member",
              "docComment": "/**\n * Optional, className(s) to apply\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#disabled:member",
              "docComment": "/**\n * Optional, if the this option should be disabled\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#getClassNames:member",
              "docComment": "/**\n * Method to provide the classnames to style a button. The default value for this prop is the getClassnames func defined in BaseButton.classnames.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassNames?: "
                },
                {
                  "kind": "Content",
                  "text": "(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonClassNames",
                  "canonicalReference": "@fluentui/react-internal!IButtonClassNames:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getClassNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#id:member",
              "docComment": "/**\n * Arbitrary unique string associated with this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#index:member",
              "docComment": "/**\n * Index for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#item:member",
              "docComment": "/**\n * The option that will be made available to the user\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#label:member",
              "docComment": "/**\n * The label for this item. Visible text if this item is a header, tooltip if is this item is normal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onClick:member",
              "docComment": "/**\n * The on click handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onFocus:member",
              "docComment": "/**\n * Optional, the onFocus handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onHover:member",
              "docComment": "/**\n * Optional, the onHover handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHover?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onHover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onKeyDown:member",
              "docComment": "/**\n * Optional, onkeydown handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onKeyDown?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onKeyDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onMouseEnter:member",
              "docComment": "/**\n * Optional, mouseEnter handler.\n *\n * @returns true if the event should be processed, false otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseEnter?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseEnter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onMouseLeave:member",
              "docComment": "/**\n * Optional, mouseLeave handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseLeave?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseLeave",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onMouseMove:member",
              "docComment": "/**\n * Optional, mouseMove handler\n *\n * @returns true if the event should be processed, false otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseMove?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onRenderItem:member",
              "docComment": "/**\n * The render callback to handle rendering the item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#onWheel:member",
              "docComment": "/**\n * Optional, onWheel handler\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onWheel?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onWheel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#role:member",
              "docComment": "/**\n * The accessible role for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridCellProps#selected:member",
              "docComment": "/**\n * Optional, if the cell is currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IButtonGridProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IButtonGridProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.TableHTMLAttributes",
              "canonicalReference": "@types/react!~React.TableHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLTableElement",
              "canonicalReference": "!HTMLTableElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IButtonGridProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#ariaPosInSet:member",
              "docComment": "/**\n * Position this ButtonGrid is in the parent set (index in a parent menu, for example)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaPosInSet?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaPosInSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#ariaSetSize:member",
              "docComment": "/**\n * Size of the parent set (size of parent menu, for example)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaSetSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaSetSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#columnCount:member",
              "docComment": "/**\n * The number of columns\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columnCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "columnCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonGrid",
                  "canonicalReference": "@fluentui/react-internal!IButtonGrid:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#containerClassName:member",
              "docComment": "/**\n * Class name for the FocusZone container for the ButtonGrid.\n *\n * @deprecated\n *\n * Use `styles.focusedContainer` to define styling for the focus zone container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "containerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "containerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#doNotContainWithinFocusZone:member",
              "docComment": "/**\n * If false (the default), the ButtonGrid is contained inside a FocusZone. If true, a FocusZone is not used.  @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doNotContainWithinFocusZone?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "doNotContainWithinFocusZone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#items:member",
              "docComment": "/**\n * Items to display in a ButtonGrid with the specified number of columns\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#onBlur:member",
              "docComment": "/**\n * Handler for when focus leaves the ButtonGrid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#onRenderItem:member",
              "docComment": "/**\n * Custom renderer for the individual items\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: any, index: number) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#positionInSet:member",
              "docComment": "/**\n * @deprecated\n *\n * Use `ariaPosInSet`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positionInSet?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positionInSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#setSize:member",
              "docComment": "/**\n * @deprecated\n *\n * Use `ariaSetSize`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#shouldFocusCircularNavigate:member",
              "docComment": "/**\n * Whether focus should cycle back to the beginning once the user navigates past the end (and vice versa). Only relevant if `doNotContainWithinFocusZone` is not true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldFocusCircularNavigate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFocusCircularNavigate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#styles:member",
              "docComment": "/**\n * Optional styles for the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonGridStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonGridStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonGridStyles",
                  "canonicalReference": "@fluentui/react-internal!IButtonGridStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridProps#theme:member",
              "docComment": "/**\n * Theme to apply to the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IButtonGridStyleProps:interface",
          "docComment": "/**\n * Properties required to build the styles for the ButtonGrid component.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IButtonGridStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IButtonGridStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridStyleProps#theme:member",
              "docComment": "/**\n * Theme to apply to the ButtonGrid\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IButtonGridStyles:interface",
          "docComment": "/**\n * Styles for the ButtonGrid Component.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IButtonGridStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IButtonGridStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridStyles#focusedContainer:member",
              "docComment": "/**\n * Style for the FocusZone container for the ButtonGrid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusedContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusedContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridStyles#root:member",
              "docComment": "/**\n * Style for the table container of a ButtonGrid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IButtonGridStyles#tableCell:member",
              "docComment": "/**\n * Style for the table cells of the ButtonGrid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tableCell: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tableCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICalloutBeakPositionedInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICalloutBeakPositionedInfo extends "
            },
            {
              "kind": "Reference",
              "text": "IPositionedData",
              "canonicalReference": "@fluentui/react-internal!IPositionedData:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ICalloutBeakPositionedInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutBeakPositionedInfo#closestEdge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closestEdge: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closestEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps:interface",
          "docComment": "/**\n * {@docCategory Callout}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICalloutContentStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ICalloutContentStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#backgroundColor:member",
              "docComment": "/**\n * Background color for the beak and callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#beakWidth:member",
              "docComment": "/**\n * Width of Callout beak\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#calloutMaxWidth:member",
              "docComment": "/**\n * Max width for callout including borders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutMaxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMaxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#calloutMinWidth:member",
              "docComment": "/**\n * Min width for callout including borders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutMinWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMinWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#calloutWidth:member",
              "docComment": "/**\n * Width for callout including borders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#className:member",
              "docComment": "/**\n * CSS class to apply to the callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#overflowYHidden:member",
              "docComment": "/**\n * Whether or not to clip content of the callout, if it overflows vertically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowYHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowYHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#positions:member",
              "docComment": "/**\n * Callout positioning data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positions?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutPositionedInfo",
                  "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps#theme:member",
              "docComment": "/**\n * Theme to apply to the calloutContent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles:interface",
          "docComment": "/**\n * {@docCategory Callout}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICalloutContentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ICalloutContentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles#beak:member",
              "docComment": "/**\n * Style for callout beak.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beak: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beak",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles#beakCurtain:member",
              "docComment": "/**\n * Style for callout beak curtain.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakCurtain: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakCurtain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles#calloutMain:member",
              "docComment": "/**\n * Style for content component of the callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutMain: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles#container:member",
              "docComment": "/**\n * Style for wrapper of Callout component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "container: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "container",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles#root:member",
              "docComment": "/**\n * Style for callout container root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICalloutPositionedInfo extends "
            },
            {
              "kind": "Reference",
              "text": "IPositionedData",
              "canonicalReference": "@fluentui/react-internal!IPositionedData:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ICalloutPositionedInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo#beakPosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakPosition: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutBeakPositionedInfo",
                  "canonicalReference": "@fluentui/react-internal!ICalloutBeakPositionedInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICalloutPositionProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICalloutPositionProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPositionProps",
              "canonicalReference": "@fluentui/react-internal!IPositionProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ICalloutPositionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionProps#beakWidth:member",
              "docComment": "/**\n * The width of the beak.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionProps#isBeakVisible:member",
              "docComment": "/**\n * Whether or not the beak is visible\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBeakVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBeakVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface",
          "docComment": "/**\n * {@docCategory Callout}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICalloutProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ICalloutProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#alignTargetEdge:member",
              "docComment": "/**\n * If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds, thus making sure the element aligns perfectly with target's alignment edge\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignTargetEdge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignTargetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#ariaDescribedBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing the description for the callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#ariaLabel:member",
              "docComment": "/**\n * Accessible label text for callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#ariaLabelledBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing label text for callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#backgroundColor:member",
              "docComment": "/**\n * The background color of the Callout in hex format ie. #ffffff.\n *\n * @defaultvalue\n *\n * $ms-color-white\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#beakWidth:member",
              "docComment": "/**\n * The width of the beak.\n *\n * @defaultvalue\n *\n * 16\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#bounds:member",
              "docComment": "/**\n * The bounding rectangle (or callback that returns a rectangle) for which the contextual menu can appear in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounds?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | ((target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@fluentui/react-hooks!Target:type"
                },
                {
                  "kind": "Content",
                  "text": ", targetWindow?: "
                },
                {
                  "kind": "Reference",
                  "text": "Window",
                  "canonicalReference": "!Window:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#calloutMaxHeight:member",
              "docComment": "/**\n * Set max height of callout. When not set, the callout will expand with contents up to the bottom of the screen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutMaxHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMaxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#calloutMaxWidth:member",
              "docComment": "/**\n * Maximum width for callout including borders. If value is 0, no width is applied.\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutMaxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMaxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#calloutMinWidth:member",
              "docComment": "/**\n * Minimum width for callout including borders. If value is 0, no width is applied.\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutMinWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutMinWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#calloutWidth:member",
              "docComment": "/**\n * Custom width for callout including borders. If value is 0, no width is applied.\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#className:member",
              "docComment": "/**\n * CSS class to apply to the callout.\n *\n * @defaultvalue\n *\n * null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#coverTarget:member",
              "docComment": "/**\n * If true the position returned will have the menu element cover the target. If false then it will position next to the target;\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coverTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coverTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#directionalHint:member",
              "docComment": "/**\n * How the element should be positioned\n *\n * @defaultvalue\n *\n * DirectionalHint.BottomAutoEdge\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#directionalHintFixed:member",
              "docComment": "/**\n * If true the position will not change sides in an attempt to fit the callout within bounds. It will still attempt to align it to whatever bounds are given.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintFixed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#directionalHintForRTL:member",
              "docComment": "/**\n * How the element should be positioned in RTL layouts. If not specified, a mirror of the `directionalHint` alignment edge will be used instead. This means that `DirectionalHint.BottomLeft` will change to `DirectionalHint.BottomRight` but `DirectionalHint.LeftAuto` will not change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintForRTL?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintForRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#doNotLayer:member",
              "docComment": "/**\n * If true do not render on a new layer. If false render on a new layer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doNotLayer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "doNotLayer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#finalHeight:member",
              "docComment": "/**\n * Specify the final height of the content. To be used when expanding the content dynamically so that callout can adjust its position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "finalHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "finalHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#gapSpace:member",
              "docComment": "/**\n * The gap between the Callout and the target\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gapSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gapSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#hidden:member",
              "docComment": "/**\n * If specified, renders the Callout in a hidden state. Use this flag, rather than rendering a callout conditionally based on visibility, to improve rendering performance when it becomes visible. Note: When callout is hidden its content will not be rendered. It will only render once the callout is visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#hideOverflow:member",
              "docComment": "/**\n * Manually set OverflowYHidden style prop to true on calloutMain element A variety of callout load animations will need this to hide the scollbar that can appear\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hideOverflow?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hideOverflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#isBeakVisible:member",
              "docComment": "/**\n * If true then the beak is visible. If false it will not be shown.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBeakVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBeakVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#layerProps:member",
              "docComment": "/**\n * Optional props to pass to the Layer component hosting the panel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layerProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ILayerProps",
                  "canonicalReference": "@fluentui/react-internal!ILayerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#minPagePadding:member",
              "docComment": "/**\n * The minimum distance the callout will be away from the edge of the screen.\n *\n * @defaultvalue\n *\n * 8\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minPagePadding?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minPagePadding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#onDismiss:member",
              "docComment": "/**\n * Callback when the Callout tries to close.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#onLayerMounted:member",
              "docComment": "/**\n * Optional callback when the layer content has mounted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerMounted?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerMounted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#onPositioned:member",
              "docComment": "/**\n * Optional callback that is called once the callout has been correctly positioned.\n *\n * @param positions - Gives the user information about how the callout is positioned such as the final edge of the target that it positioned against, the beak position, and the beaks relationship to the edges of the callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPositioned?: "
                },
                {
                  "kind": "Content",
                  "text": "(positions?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutPositionedInfo",
                  "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPositioned",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#onRestoreFocus:member",
              "docComment": "/**\n * Called when the component is unmounting, and focus needs to be restored. If this is provided, focus will not be restored automatically, and you'll need to call `params.originalElement.focus()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRestoreFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(params: "
                },
                {
                  "kind": "Reference",
                  "text": "IPopupRestoreFocusParams",
                  "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRestoreFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#onScroll:member",
              "docComment": "/**\n * Callback when the Callout body is scrolled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#preventDismissOnEvent:member",
              "docComment": "/**\n * If defined, then takes priority over preventDismissOnLostFocus, preventDismissOnResize, and preventDismissOnScroll. If it returns true, then callout will not dismiss for this event. If not defined or returns false, callout can dismiss for this event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventDismissOnEvent?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventDismissOnEvent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#preventDismissOnLostFocus:member",
              "docComment": "/**\n * If true then the callout will not dismiss when it loses focus\n *\n * @deprecated\n *\n * use preventDismissOnEvent callback instead\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventDismissOnLostFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventDismissOnLostFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#preventDismissOnResize:member",
              "docComment": "/**\n * If true then the callout will not dismiss on resize\n *\n * @deprecated\n *\n * use preventDismissOnEvent callback instead\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventDismissOnResize?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventDismissOnResize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#preventDismissOnScroll:member",
              "docComment": "/**\n * If true then the callout will not dismiss on scroll\n *\n * @deprecated\n *\n * use preventDismissOnEvent callback instead\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventDismissOnScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventDismissOnScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#role:member",
              "docComment": "/**\n * Aria role assigned to the callout (Eg. dialog, alertdialog).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#setInitialFocus:member",
              "docComment": "/**\n * If true then the callout will attempt to focus the first focusable element that it contains. If it doesn't find a focusable element, no focus will be set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInitialFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setInitialFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#shouldDismissOnWindowFocus:member",
              "docComment": "/**\n * If true then the callout will dismiss when the window gets focus\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldDismissOnWindowFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldDismissOnWindowFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#shouldRestoreFocus:member",
              "docComment": "/**\n * If true, when this component is unmounted, focus will be restored to the element that had focus when the component first mounted.\n *\n * @deprecated\n *\n * use `onRestoreFocus` instead\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldRestoreFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldRestoreFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#shouldUpdateWhenHidden:member",
              "docComment": "/**\n * If true, the component will be updated even when `hidden` is true. Note that this would consume resources to update even though nothing is being shown to the user. This might be helpful though if your updates are small and you want the callout to be revealed fast to the user when hidden is set to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldUpdateWhenHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldUpdateWhenHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#style:member",
              "docComment": "/**\n * CSS style to apply to the callout.\n *\n * If you set `overflowY` in this object, it provides a performance optimization by preventing Popup (underlying component of Callout) from calculating whether it needs a scroll bar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.CSSProperties",
                  "canonicalReference": "@types/react!~React.CSSProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#styles:member",
              "docComment": "/**\n * Optional styles for the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutContentStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutContentStyles",
                  "canonicalReference": "@fluentui/react-internal!ICalloutContentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#target:member",
              "docComment": "/**\n * The target that the Callout should try to position itself based on. It can be either an Element a querySelector string of a valid Element or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@fluentui/react-hooks!Target:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps#theme:member",
              "docComment": "/**\n * Optional theme for component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICheckProps:interface",
          "docComment": "/**\n * {@docCategory Check}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICheckProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ICheckProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#alwaysShowCheck:member",
              "docComment": "/**\n * @deprecated\n *\n * Not used\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alwaysShowCheck?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alwaysShowCheck",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#checked:member",
              "docComment": "/**\n * Whether or not this menu item is currently checked.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Check\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICheckProps",
                  "canonicalReference": "@fluentui/react-internal!ICheckProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICheckStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ICheckStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ICheckStyles",
                  "canonicalReference": "@fluentui/react-internal!ICheckStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckProps#useFastIcons:member",
              "docComment": "/**\n * Whether to use fast icon components. The icons can't be targeted by customization but are still customizable via class names.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useFastIcons?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useFastIcons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ICheckStyleProps:type",
          "docComment": "/**\n * {@docCategory Check}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ICheckStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICheckProps",
              "canonicalReference": "@fluentui/react-internal!ICheckProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICheckProps",
              "canonicalReference": "@fluentui/react-internal!ICheckProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'checked'> & {\n    height?: string;\n    checkBoxHeight?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ICheckStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICheckStyles:interface",
          "docComment": "/**\n * {@docCategory Check}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICheckStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ICheckStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckStyles#check:member",
              "docComment": "/**\n * The 'check' icon styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "check: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "check",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckStyles#checkHost:member",
              "docComment": "/**\n * Check host style\n *\n * @deprecated\n *\n * Not used directly within the component. Instead, use `CheckGlobalClassNames.checkHost` from `Check.styles.ts` to get the static class name to apply to the parent element of the Check.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkHost: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checkHost",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckStyles#circle:member",
              "docComment": "/**\n * The 'circle' icon styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "circle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICheckStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroup:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroup "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroup",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroup#checkedOption:member",
              "docComment": "/**\n * Gets the current checked option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkedOption: "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOption",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checkedOption",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroup#focus:member",
              "docComment": "/**\n * Sets focus to the checked option or the first enabled option in the ChoiceGroup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupOption extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "React.InputHTMLAttributes",
              "canonicalReference": "@types/react!~React.InputHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": ">, 'checked'> "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#ariaLabel:member",
              "docComment": "/**\n * Aria label of the option for the benefit of screen reader users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#disabled:member",
              "docComment": "/**\n * Whether or not the option is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#iconProps:member",
              "docComment": "/**\n * Props for an icon to display with this option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#id:member",
              "docComment": "/**\n * ID used on the option's input element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#imageAlt:member",
              "docComment": "/**\n * Alt text if the option is an image.  @default '' (empty string)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageAlt?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageAlt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#imageSize:member",
              "docComment": "/**\n * The width and height of the image in px for choice field.\n *\n * @defaultvalue\n *\n * `{ width: 32, height: 32 }`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageSize?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        width: number;\n        height: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#imageSrc:member",
              "docComment": "/**\n * Image to display with this option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageSrc?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageSrc",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#key:member",
              "docComment": "/**\n * A required key to uniquely identify the option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#labelId:member",
              "docComment": "/**\n * ID used on the option's label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#onRenderField:member",
              "docComment": "/**\n * Used to customize option rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderField?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderField",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#onRenderLabel:member",
              "docComment": "/**\n * Used to customize label rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderLabel?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#selectedImageSrc:member",
              "docComment": "/**\n * The src of image for choice field which is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedImageSrc?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedImageSrc",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionStyles",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption#text:member",
              "docComment": "/**\n * The text string for the option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupOptionProps extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IChoiceGroupOption",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption:interface"
            },
            {
              "kind": "Content",
              "text": ", 'key'> "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupOptionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#checked:member",
              "docComment": "/**\n * Whether or not the option is checked. Set by `ChoiceGroup` based on `selectedKey` or `defaultSelectedKey` from `IChoiceGroupProps`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOption",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#focused:member",
              "docComment": "/**\n * Indicates if the ChoiceGroupOption should appear focused, visually\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focused?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#itemKey:member",
              "docComment": "/**\n * Unique key for the option, set based on `IChoiceGroupOption.key`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#key:member",
              "docComment": "/**\n * The option key. This will always be provided for callbacks (copied from `itemKey`) but is optional when manually creating ChoiceGroupOptions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#name:member",
              "docComment": "/**\n * This value is used to group each ChoiceGroupOption into the same logical ChoiceGroup\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#onBlur:member",
              "docComment": "/**\n * Callback for the ChoiceGroup creating the option to be notified when the choice has lost focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, props?: "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#onChange:member",
              "docComment": "/**\n * Callback for the ChoiceGroup creating the option to be notified when the choice has been changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(evt?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FormEvent",
                  "canonicalReference": "@types/react!~React.FormEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, props?: "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#onFocus:member",
              "docComment": "/**\n * Callback for the ChoiceGroup creating the option to be notified when the choice has received focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEvent",
                  "canonicalReference": "@types/react!~React.FocusEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, props?: "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOptionProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#required:member",
              "docComment": "/**\n * If true, it specifies that an option must be selected in the ChoiceGroup before submitting the form\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps:interface",
          "docComment": "/**\n * Defines props needed to construct styles. This represents the simplified set of immutable things which control the class names. {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupOptionStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupOptionStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#checked:member",
              "docComment": "/**\n * Whether the option is checked or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#disabled:member",
              "docComment": "/**\n * Whether the option is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#focused:member",
              "docComment": "/**\n * Whether the option is in focus or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focused?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#hasIcon:member",
              "docComment": "/**\n * Whether the option has an icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasIcon?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#hasImage:member",
              "docComment": "/**\n * Whether the option icon is an image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasImage?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasImage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#imageIsLarge:member",
              "docComment": "/**\n * Whether the image width or height are higher than `71`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageIsLarge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageIsLarge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#imageSize:member",
              "docComment": "/**\n * Image sizes used when `hasImage` or `hasIcon` style props are enabled.\n *\n * @defaultvalue\n *\n * `{height: 32, width: 32 }`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageSize?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        height: number;\n        width: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupOptionStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupOptionStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#choiceFieldWrapper:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "choiceFieldWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "choiceFieldWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#field:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "field?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "field",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#iconWrapper:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#imageWrapper:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#innerField:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerField?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "innerField",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#labelWrapper:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupOptionStyles#selectedImageWrapper:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedImageWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedImageWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.InputHTMLAttributes",
              "canonicalReference": "@types/react!~React.InputHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#ariaLabelledBy:member",
              "docComment": "/**\n * ID of an element to use as the aria label for this ChoiceGroup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroup",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroup:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#defaultSelectedKey:member",
              "docComment": "/**\n * The key of the option that will be initially checked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSelectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultSelectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#label:member",
              "docComment": "/**\n * Descriptive label for the choice group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#onChange:member",
              "docComment": "/**\n * A callback for receiving a notification when the choice has been changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FormEvent",
                  "canonicalReference": "@types/react!~React.FormEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, option?: "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOption",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#options:member",
              "docComment": "/**\n * The options for the choice group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupOption",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupOption:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#selectedKey:member",
              "docComment": "/**\n * The key of the selected option. If you provide this, you must maintain selection state by observing onChange events and passing a new value in when changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IChoiceGroupStyles",
                  "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyleProps:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyleProps#optionsContainIconOrImage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionsContainIconOrImage?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "optionsContainIconOrImage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyles:interface",
          "docComment": "/**\n * {@docCategory ChoiceGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IChoiceGroupStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IChoiceGroupStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyles#flexContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flexContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyles#label:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IChoiceGroupStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICircle:interface",
          "docComment": "/**\n * Circle element interface {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICircle extends "
            },
            {
              "kind": "Reference",
              "text": "IShimmerElement",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ICircle",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICircle#height:member",
              "docComment": "/**\n * Sets the height of the shimmer circle in pixels. Minimum supported 10px.\n *\n * @defaultvalue\n *\n * 24px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICoachmark:interface",
          "docComment": "/**\n * {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICoachmark "
            }
          ],
          "releaseTag": "Public",
          "name": "ICoachmark",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmark#dismiss:member",
              "docComment": "/**\n * Forces the Coachmark to dismiss\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICoachmarkProps:interface",
          "docComment": "/**\n * Coachmark component props {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICoachmarkProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ICoachmarkProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#ariaAlertText:member",
              "docComment": "/**\n * Text to announce to screen reader / narrator when Coachmark is displayed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaAlertText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaAlertText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#ariaDescribedBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing the description for the Coachmark.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#ariaDescribedByText:member",
              "docComment": "/**\n * Defines the text content for the ariaDescribedBy element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedByText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedByText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#ariaLabelledBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing label text for Coachmark.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#ariaLabelledByText:member",
              "docComment": "/**\n * Defines the text content for the ariaLabelledBy element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledByText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledByText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#beaconColorOne:member",
              "docComment": "/**\n * Beacon color one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beaconColorOne?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beaconColorOne",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#beaconColorTwo:member",
              "docComment": "/**\n * Beacon color two.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beaconColorTwo?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beaconColorTwo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#beakHeight:member",
              "docComment": "/**\n * The height of the Beak component.\n *\n * @deprecated\n *\n * No longer used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#beakWidth:member",
              "docComment": "/**\n * The width of the Beak component.\n *\n * @deprecated\n *\n * No longer used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#children:member",
              "docComment": "/**\n * Child nodes to render inside the Coachmark dialog\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#className:member",
              "docComment": "/**\n * If provided, additional class name to provide on the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#collapsed:member",
              "docComment": "/**\n * The starting collapsed state for the Coachmark. Use `isCollapsed` instead.\n *\n * @deprecated\n *\n * Use `isCollapsed` instead.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapsed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collapsed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#color:member",
              "docComment": "/**\n * Color of the Coachmark/TeachingBubble.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ICoachmark interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICoachmark",
                  "canonicalReference": "@fluentui/react-internal!ICoachmark:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#delayBeforeCoachmarkAnimation:member",
              "docComment": "/**\n * Delay in milliseconds before Coachmark animation appears.\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayBeforeCoachmarkAnimation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delayBeforeCoachmarkAnimation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#delayBeforeMouseOpen:member",
              "docComment": "/**\n * Delay before allowing mouse movements to open the Coachmark.\n *\n * @defaultvalue\n *\n * 3600\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayBeforeMouseOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delayBeforeMouseOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#height:member",
              "docComment": "/**\n * The height of the Coachmark.\n *\n * @deprecated\n *\n * No longer used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#isCollapsed:member",
              "docComment": "/**\n * The starting collapsed state for the Coachmark.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCollapsed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCollapsed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#isPositionForced:member",
              "docComment": "/**\n * Whether or not to force the Coachmark/TeachingBubble content to fit within the window bounds.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPositionForced?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isPositionForced",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#mouseProximityOffset:member",
              "docComment": "/**\n * The distance in pixels the mouse is located before opening up the Coachmark.\n *\n * @defaultvalue\n *\n * 10\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mouseProximityOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mouseProximityOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#onAnimationOpenEnd:member",
              "docComment": "/**\n * Callback when the opening animation completes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onAnimationOpenEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onAnimationOpenEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#onAnimationOpenStart:member",
              "docComment": "/**\n * Callback when the opening animation begins.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onAnimationOpenStart?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onAnimationOpenStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#onDismiss:member",
              "docComment": "/**\n * Callback when the Coachmark tries to close.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#onMouseMove:member",
              "docComment": "/**\n * Callback to run when the mouse moves.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseMove?: "
                },
                {
                  "kind": "Content",
                  "text": "(e: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#persistentBeak:member",
              "docComment": "/**\n * If true then the Coachmark beak (arrow pointing towards target) will always be visible as long as Coachmark is visible\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "persistentBeak?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "persistentBeak",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#positioningContainerProps:member",
              "docComment": "/**\n * Props to pass to the PositioningContainer component. Specify the `directionalHint` to indicate on which edge the Coachmark/TeachingBubble should be positioned.\n *\n * @defaultvalue\n *\n * directionalHint: DirectionalHint.bottomAutoEdge\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positioningContainerProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPositioningContainerProps",
                  "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positioningContainerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#preventDismissOnLostFocus:member",
              "docComment": "/**\n * If true then the Coachmark will not dismiss when it loses focus\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventDismissOnLostFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventDismissOnLostFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#preventFocusOnMount:member",
              "docComment": "/**\n * If true then focus will not be set to the Coachmark when it mounts. Useful in cases where focus on coachmark is causing other components in page to dismiss upon losing focus.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventFocusOnMount?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventFocusOnMount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICoachmarkStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ICoachmarkStyles",
                  "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#target:member",
              "docComment": "/**\n * The target that the Coachmark should try to position itself based on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#teachingBubbleRef:member",
              "docComment": "/**\n * Ref for TeachingBubble\n *\n * @deprecated\n *\n * Coachmark uses `focusFirstChild` utility instead to focus on TeachingBubbleContent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "teachingBubbleRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITeachingBubble",
                  "canonicalReference": "@fluentui/react-internal!ITeachingBubble:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "teachingBubbleRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#theme:member",
              "docComment": "/**\n * Theme provided by higher order component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps#width:member",
              "docComment": "/**\n * The width of the Coachmark.\n *\n * @deprecated\n *\n * No longer used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps:interface",
          "docComment": "/**\n * The props needed to construct styles. {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICoachmarkStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ICoachmarkStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#beaconColorOne:member",
              "docComment": "/**\n * Beacon color one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beaconColorOne?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beaconColorOne",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#beaconColorTwo:member",
              "docComment": "/**\n * Beacon color two\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beaconColorTwo?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beaconColorTwo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#className:member",
              "docComment": "/**\n * ClassName to provide on the root style area.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#collapsed:member",
              "docComment": "/**\n * Is the Coachmark collapsed. Deprecated, use `isCollapsed` instead.\n *\n * @deprecated\n *\n * Use `isCollapsed` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapsed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collapsed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#color:member",
              "docComment": "/**\n * Color\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#delayBeforeCoachmarkAnimation:member",
              "docComment": "/**\n * Delay time for the animation to start\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayBeforeCoachmarkAnimation?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delayBeforeCoachmarkAnimation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#entityHostHeight:member",
              "docComment": "/**\n * The height measured before the component has been mounted in pixels\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entityHostHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "entityHostHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#entityHostWidth:member",
              "docComment": "/**\n * The width measured in pixels\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entityHostWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "entityHostWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#height:member",
              "docComment": "/**\n * Height of the coachmark\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#isCollapsed:member",
              "docComment": "/**\n * Is the Coachmark collapsed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCollapsed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCollapsed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#isMeasuring:member",
              "docComment": "/**\n * Is the component taking measurements\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMeasuring: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMeasuring",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#theme:member",
              "docComment": "/**\n * Current theme.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#transformOrigin:member",
              "docComment": "/**\n * Transform origin for teaching bubble content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transformOrigin?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transformOrigin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyleProps#width:member",
              "docComment": "/**\n * Width of the coachmark\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICoachmarkStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ICoachmarkStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#ariaContainer:member",
              "docComment": "/**\n * The styles applied to the ARIA attribute container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#childrenContainer:member",
              "docComment": "/**\n * The layer that directly contains the TeachingBubbleContent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "childrenContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#collapsed:member",
              "docComment": "/**\n * The styles applied when the Coachmark has collapsed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapsed?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collapsed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#entityHost:member",
              "docComment": "/**\n * The layer that content/components/elements will be hosted in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entityHost?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "entityHost",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#entityInnerHost:member",
              "docComment": "/**\n * The inner layer that components will be hosted in and primary purpose is scaling the layer down while the Coachmark collapsed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entityInnerHost: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "entityInnerHost",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#pulsingBeacon:member",
              "docComment": "/**\n * The pulsing beacon that animates when the Coachmark is collapsed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pulsingBeacon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pulsingBeacon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#root:member",
              "docComment": "/**\n * Style for the root element in the default enabled/unchecked state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#rotateAnimationLayer:member",
              "docComment": "/**\n * The layer the Rotate animation will be applied to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotateAnimationLayer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rotateAnimationLayer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#scaleAnimationLayer:member",
              "docComment": "/**\n * The layer the Scale animation will be applied to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scaleAnimationLayer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scaleAnimationLayer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkStyles#translateAnimationContainer:member",
              "docComment": "/**\n * The layer, or div, that the translate animation will be applied to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "translateAnimationContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "translateAnimationContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ICoachmarkTypes:type",
          "docComment": "/**\n * @deprecated\n *\n * No longer used. {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ICoachmarkTypes = "
            },
            {
              "kind": "Reference",
              "text": "ICoachmarkProps",
              "canonicalReference": "@fluentui/react-internal!ICoachmarkProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ICoachmarkTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColor:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColor extends "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IHSV",
              "canonicalReference": "@fluentui/react-internal!IHSV:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IColor",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColor#hex:member",
              "docComment": "/**\n * Hex string for the color (excluding alpha component), *not* prefixed with #.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hex: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColor#str:member",
              "docComment": "/**\n * CSS color string. If a hex value, it must be prefixed with #.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "str: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "str",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColor#t:member",
              "docComment": "/**\n * Transparency value, range 0 (opaque) to 100 (transparent). Usually assumed to be 0 if not specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "t?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "t",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface",
          "docComment": "/**\n * {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorCellProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorCellProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorCellProps#color:member",
              "docComment": "/**\n * The CSS-compatible string to describe the color\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorCellProps#id:member",
              "docComment": "/**\n * Arbitrary unique string associated with this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorCellProps#index:member",
              "docComment": "/**\n * Index for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorCellProps#label:member",
              "docComment": "/**\n * Tooltip and aria label for this item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPicker:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPicker "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPicker",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPicker#color:member",
              "docComment": "/**\n * The currently selected color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps:interface",
          "docComment": "/**\n * {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerGridCellProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerGridCellProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#borderWidth:member",
              "docComment": "/**\n * Width of the border that indicates a selected/hovered cell, in pixels.\n *\n * @defaultvalue\n *\n * 2 if `cellWidth` is less than 24; otherwise 4\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "borderWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#circle:member",
              "docComment": "/**\n * True if this cell should be rendered as a circle, false if it should be a square.  @default `true` (render as circle)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "circle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#color:member",
              "docComment": "/**\n * The CSS-compatible string to describe the color\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#disabled:member",
              "docComment": "/**\n * Whether this cell should be disabled  @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#height:member",
              "docComment": "/**\n * Height of the cell, in pixels\n *\n * @defaultvalue\n *\n * 20\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#id:member",
              "docComment": "/**\n * Used as a PREFIX for the cell's ID (the cell will not have this literal string as its ID).\n *\n * @deprecated\n *\n * Deprecated due to misleading name. Use `idPrefix` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#idPrefix:member",
              "docComment": "/**\n * Prefix for this cell's ID. Will be required in a future version once `id` is removed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idPrefix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "idPrefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#index:member",
              "docComment": "/**\n * Index for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#item:member",
              "docComment": "/**\n * Item to render\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorCellProps",
                  "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#label:member",
              "docComment": "/**\n * Tooltip and aria label for this item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onClick:member",
              "docComment": "/**\n * Handler for when a color cell is clicked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorCellProps",
                  "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onFocus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorCellProps",
                  "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onHover:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHover?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorCellProps",
                  "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onHover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onKeyDown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onKeyDown?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onKeyDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onMouseEnter:member",
              "docComment": "/**\n * Mouse enter handler. Returns true if the event should be processed, false otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseEnter?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseEnter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onMouseLeave:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseLeave?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseLeave",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onMouseMove:member",
              "docComment": "/**\n * Mouse move handler. Returns true if the event should be processed, false otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseMove?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#onWheel:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onWheel?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onWheel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#selected:member",
              "docComment": "/**\n * Whether this cell is currently selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#styles:member",
              "docComment": "/**\n * Custom styles for the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerGridCellStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerGridCellStyles",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#theme:member",
              "docComment": "/**\n * The theme object to use for styling.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellProps#width:member",
              "docComment": "/**\n * Width of the cell, in pixels\n *\n * @defaultvalue\n *\n * 20\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps:interface",
          "docComment": "/**\n * {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerGridCellStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerGridCellStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#borderWidth:member",
              "docComment": "/**\n * The width of the border indicating a hovered or selected cell, in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "borderWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#circle:member",
              "docComment": "/**\n * Whether the svg color element should be rendered as a circle or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "circle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#disabled:member",
              "docComment": "/**\n * Whether the component is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#height:member",
              "docComment": "/**\n * The height of this cell, in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#isWhite:member",
              "docComment": "/**\n * Whether the color being rendered is white or not. If it is white we show a border around it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isWhite?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isWhite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#selected:member",
              "docComment": "/**\n * Whether the cell is currently selected or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#theme:member",
              "docComment": "/**\n * Theme to apply to the cell.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps#width:member",
              "docComment": "/**\n * The width of this cell, in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyles:interface",
          "docComment": "/**\n * {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerGridCellStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerGridCellStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyles#colorCell:member",
              "docComment": "/**\n * Style to apply to a colorCell in the color picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorCell: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "colorCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyles#svg:member",
              "docComment": "/**\n * Style to apply to the svg element that renders the color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "svg: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "svg",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#alphaLabel:member",
              "docComment": "/**\n * Label for the alpha textfield.\n *\n * @deprecated\n *\n * Use `strings`\n *\n * @defaultvalue\n *\n * Alpha\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#alphaSliderHidden:member",
              "docComment": "/**\n * Whether to hide the alpha (or transparency) slider and text field.\n *\n * @deprecated\n *\n * Use `alphaType: 'none'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaSliderHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaSliderHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#alphaType:member",
              "docComment": "/**\n * `alpha` (the default) means display a slider and text field for editing alpha values. `transparency` also displays a slider and text field but for editing transparency values. `none` hides these controls.\n *\n * Alpha represents the opacity of the color, whereas transparency represents the transparentness of the color: i.e. a 30% transparent color has 70% opaqueness.\n *\n * @defaultvalue\n *\n * 'alpha'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaType?: "
                },
                {
                  "kind": "Content",
                  "text": "'alpha' | 'transparency' | 'none'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#blueLabel:member",
              "docComment": "/**\n * Label for the blue text field.\n *\n * @deprecated\n *\n * Use `strings`\n *\n * @defaultvalue\n *\n * Blue\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blueLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "blueLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the ColorPicker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#color:member",
              "docComment": "/**\n * Object or CSS-compatible string to describe the color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPicker",
                  "canonicalReference": "@fluentui/react-internal!IColorPicker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#greenLabel:member",
              "docComment": "/**\n * Label for the green text field.\n *\n * @deprecated\n *\n * Use `strings`\n *\n * @defaultvalue\n *\n * Green\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "greenLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "greenLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#hexLabel:member",
              "docComment": "/**\n * Label for the hex text field.\n *\n * @deprecated\n *\n * Use `strings`\n *\n * @defaultvalue\n *\n * Hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hexLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hexLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#onChange:member",
              "docComment": "/**\n * Callback for when the user changes the color. (Not called when the color is changed via props.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.SyntheticEvent",
                  "canonicalReference": "@types/react!~React.SyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#redLabel:member",
              "docComment": "/**\n * Label for the red text field.\n *\n * @deprecated\n *\n * Use `strings`\n *\n * @defaultvalue\n *\n * Red\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "redLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#showPreview:member",
              "docComment": "/**\n * Whether to show color preview box.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showPreview?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showPreview",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#strings:member",
              "docComment": "/**\n * Labels for elements within the ColorPicker. Defaults are provided in English only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strings?: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerStrings",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerStrings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "strings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerStyles",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerState "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerState#color:member",
              "docComment": "/**\n * Most recently selected color\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerState#editingColor:member",
              "docComment": "/**\n * Color component currently being edited via a text field (if intermediate value is invalid)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editingColor?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        component: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorComponent",
                  "canonicalReference": "@fluentui/react-internal!~ColorComponent:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        value: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "editingColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerStrings:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerStrings "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerStrings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#alpha:member",
              "docComment": "/**\n * Label for the alpha text field. Also used as the aria label for the alpha slider if `alphaAriaLabel` is not provided.\n *\n * @defaultvalue\n *\n * Alpha\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alpha",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#alphaAriaLabel:member",
              "docComment": "/**\n * Customized aria-label for the alpha slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#blue:member",
              "docComment": "/**\n * Label for the blue text field.\n *\n * @defaultvalue\n *\n * Blue\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "blue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#green:member",
              "docComment": "/**\n * Label for the green text field.\n *\n * @defaultvalue\n *\n * Green\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "green?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "green",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#hex:member",
              "docComment": "/**\n * Label for the hex text field.\n *\n * @defaultvalue\n *\n * Hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hex?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#hue:member",
              "docComment": "/**\n * Aria label for the hue slider.\n *\n * @deprecated\n *\n * Use `hueAriaLabel`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#hueAriaLabel:member",
              "docComment": "/**\n * Aria label for the hue slider.\n *\n * @defaultvalue\n *\n * Hue\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hueAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hueAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#red:member",
              "docComment": "/**\n * Label for the red text field.\n *\n * @defaultvalue\n *\n * Red\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "red?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "red",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#rootAriaLabelFormat:member",
              "docComment": "/**\n * Accessible label for the root of the color picker region. The string should contain a placeholder `{0}` for the currently selected color.\n *\n * @defaultvalue\n *\n * `'Color picker, {0} selected.'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootAriaLabelFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rootAriaLabelFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#svAriaDescription:member",
              "docComment": "/**\n * Detailed description for how to use the color rectangle. Moving the thumb horizontally adjusts saturation and moving it vertically adjusts value (essentially, brightness).\n *\n * @defaultvalue\n *\n * 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "svAriaDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "svAriaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#svAriaLabel:member",
              "docComment": "/**\n * Aria label for the color rectangle, which adjusts saturation and value (brightness).\n *\n * @defaultvalue\n *\n * 'Saturation and brightness'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "svAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "svAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#svAriaValueFormat:member",
              "docComment": "/**\n * Format string for the current values of the color rectangle. The string must include descriptions and two placeholders for the current values: `{0}` for saturation and `{1}` for value/brightness.\n *\n * @defaultvalue\n *\n * `'Saturation {0} brightness {1}'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "svAriaValueFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "svAriaValueFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#transparency:member",
              "docComment": "/**\n * Label for the transparency text field.\n *\n * @defaultvalue\n *\n * Transparency\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparency?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStrings#transparencyAriaLabel:member",
              "docComment": "/**\n * Customized aria-label for the transparency slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparencyAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparencyAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IColorPickerStyleProps:type",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IColorPickerStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorPickerProps",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorPickerProps",
              "canonicalReference": "@fluentui/react-internal!IColorPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'alphaType'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorPickerStyles:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorPickerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorPickerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#colorRectangle:member",
              "docComment": "/**\n * Style set for the panel element that contains the color rectangle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorRectangle?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "colorRectangle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#colorSquare:member",
              "docComment": "/**\n * Color Square\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorSquare?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "colorSquare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#flexContainer:member",
              "docComment": "/**\n * flexContainer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flexContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#flexPreviewBox:member",
              "docComment": "/**\n * flexPreviewBox\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexPreviewBox?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flexPreviewBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#flexSlider:member",
              "docComment": "/**\n * flexSlider\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexSlider?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flexSlider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#input:member",
              "docComment": "/**\n * Style set for each text field input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#panel:member",
              "docComment": "/**\n * Style set for the panel element that contains the color rectangle, color sliders and inputs .\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "panel?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "panel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#root:member",
              "docComment": "/**\n * Style set for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#table:member",
              "docComment": "/**\n * Style set for the table element that contains the color sliders and inputs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "table?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "table",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#tableAlphaCell:member",
              "docComment": "/**\n * Style set for the table cell that contains the alpha or transparency label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tableAlphaCell?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tableAlphaCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#tableHeader:member",
              "docComment": "/**\n * Style set for the table header that contains the labels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tableHeader?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tableHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorPickerStyles#tableHexCell:member",
              "docComment": "/**\n * Style set for the table cell that contains the hex label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tableHexCell?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tableHexCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorRectangle:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorRectangle "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorRectangle",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangle#color:member",
              "docComment": "/**\n * Currently selected color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorRectangleProps:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorRectangleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorRectangleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#ariaDescription:member",
              "docComment": "/**\n * Detailed description for how to use the color rectangle. Moving the thumb horizontally adjusts saturation and moving it vertically adjusts value (essentially, brightness).\n *\n * @defaultvalue\n *\n * 'Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#ariaLabel:member",
              "docComment": "/**\n * Label of the ColorRectangle for the benefit of screen reader users.\n *\n * @defaultvalue\n *\n * 'Saturation and brightness'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#ariaValueFormat:member",
              "docComment": "/**\n * Format string for the color rectangle's current value as read by screen readers. The string must include descriptions and two placeholders for the current values: `{0}` for saturation and `{1}` for value/brightness.\n *\n * @defaultvalue\n *\n * `'Saturation {0} brightness {1}'`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaValueFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaValueFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the ColorRectangle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#color:member",
              "docComment": "/**\n * Current color of the rectangle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorRectangle",
                  "canonicalReference": "@fluentui/react-internal!IColorRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#minSize:member",
              "docComment": "/**\n * Minimum width and height.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#onChange:member",
              "docComment": "/**\n * Callback for when the color changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", color: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorRectangleStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IColorRectangleStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IColorRectangleStyles",
                  "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorRectangleStyleProps:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorRectangleStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorRectangleStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyleProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the ColorRectangle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyleProps#minSize:member",
              "docComment": "/**\n * Minimum width and height.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyleProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorRectangleStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorRectangleStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles#dark:member",
              "docComment": "/**\n * Style set for the dark-colored rectangle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dark?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dark",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles#description:member",
              "docComment": "/**\n * Style for a hidden detailed description for screen reader users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles#light:member",
              "docComment": "/**\n * Style set for the light-colored rectangle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "light?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "light",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles#root:member",
              "docComment": "/**\n * Style set for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorRectangleStyles#thumb:member",
              "docComment": "/**\n * Style set for the draggable thumb element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thumb?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "thumb",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorSlider:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorSlider "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorSlider",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSlider#value:member",
              "docComment": "/**\n * Current value of the slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorSliderProps:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorSliderProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorSliderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#ariaLabel:member",
              "docComment": "/**\n * Label of the ColorSlider for the benefit of screen reader users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the ColorSlider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorSlider",
                  "canonicalReference": "@fluentui/react-internal!IColorSlider:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#isAlpha:member",
              "docComment": "/**\n * If true, the slider represents an alpha slider and will display a gray checkered pattern in the background. Otherwise, the slider represents a hue slider.\n *\n * @deprecated\n *\n * Use `type`\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAlpha?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAlpha",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#maxValue:member",
              "docComment": "/**\n * Maximum value of the slider.\n *\n * @deprecated\n *\n * Will be 100 for alpha or transparency sliders, or 359 for hue sliders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxValue?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#minValue:member",
              "docComment": "/**\n * Minimum value of the slider.\n *\n * @deprecated\n *\n * Will always be 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minValue?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#onChange:member",
              "docComment": "/**\n * Callback issued when the value changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", newValue?: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#overlayColor:member",
              "docComment": "/**\n * Hex color to use when rendering an alpha or transparency slider's overlay, *without* the `#`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlayColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overlayColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#overlayStyle:member",
              "docComment": "/**\n * Custom style for the overlay element.\n *\n * @deprecated\n *\n * Use `overlayColor` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlayStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.CSSProperties",
                  "canonicalReference": "@types/react!~React.CSSProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overlayStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorSliderStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IColorSliderStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IColorSliderStyles",
                  "canonicalReference": "@fluentui/react-internal!IColorSliderStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#thumbColor:member",
              "docComment": "/**\n * CSS-compatible string for the color of the thumb element.\n *\n * @deprecated\n *\n * Not used. Use `styles.sliderThumb` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thumbColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "thumbColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#type:member",
              "docComment": "/**\n * Type of slider to display.\n *\n * @defaultvalue\n *\n * 'hue'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Content",
                  "text": "'hue' | 'alpha' | 'transparency'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps#value:member",
              "docComment": "/**\n * Current value of the slider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IColorSliderStyleProps:type",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IColorSliderStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorSliderProps",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IColorSliderProps",
              "canonicalReference": "@fluentui/react-internal!IColorSliderProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'type'> & {\n    isAlpha?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IColorSliderStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IColorSliderStyles:interface",
          "docComment": "/**\n * {@docCategory ColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorSliderStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IColorSliderStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderStyles#root:member",
              "docComment": "/**\n * Style set for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderStyles#sliderOverlay:member",
              "docComment": "/**\n * Style set for the overlay element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sliderOverlay?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sliderOverlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IColorSliderStyles#sliderThumb:member",
              "docComment": "/**\n * Style set for the draggable thumb element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sliderThumb?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sliderThumb",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICommandBar:interface",
          "docComment": "/**\n * {@docCategory CommandBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICommandBar "
            }
          ],
          "releaseTag": "Public",
          "name": "ICommandBar",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBar#focus:member(1)",
              "docComment": "/**\n * Sets focus to the active command in the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBar#remeasure:member(1)",
              "docComment": "/**\n * Remeasures the available space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remeasure(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remeasure"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICommandBarData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICommandBarData "
            }
          ],
          "releaseTag": "Public",
          "name": "ICommandBarData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarData#cacheKey:member",
              "docComment": "/**\n * Unique string used to cache the width of the command bar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cacheKey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cacheKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarData#farItems:member",
              "docComment": "/**\n * Items being rendered on the far side\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "farItems: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "farItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarData#minimumOverflowItems:member",
              "docComment": "/**\n * Length of original overflowItems to ensure that they are not moved into primary region on resize\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumOverflowItems: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minimumOverflowItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarData#overflowItems:member",
              "docComment": "/**\n * Items being rendered in the overflow\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowItems: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarData#primaryItems:member",
              "docComment": "/**\n * Items being rendered in the primary region\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryItems: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface",
          "docComment": "/**\n * ICommandBarItemProps extends IContextualMenuItem and adds a few CommandBar-specific props. {@docCategory CommandBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICommandBarItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ICommandBarItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps#buttonStyles:member",
              "docComment": "/**\n * Custom styles for individual button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonStyles",
                  "canonicalReference": "@fluentui/react-internal!IButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buttonStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps#cacheKey:member",
              "docComment": "/**\n * A custom cache key to be used for this item. If `cacheKey` is changed, the cache will invalidate. Defaults to `key` value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cacheKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cacheKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps#commandBarButtonAs:member",
              "docComment": "/**\n * Method to override the render of the individual command bar button. Not used when item is rendered in overflow.\n *\n * @defaultvalue\n *\n * CommandBarButton\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commandBarButtonAs?: "
                },
                {
                  "kind": "Reference",
                  "text": "IComponentAs",
                  "canonicalReference": "@fluentui/utilities!IComponentAs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "commandBarButtonAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps#iconOnly:member",
              "docComment": "/**\n * Show only an icon for this item, not text. Does not apply if item is in the overflow.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps#renderedInOverflow:member",
              "docComment": "/**\n * Context under which the item is being rendered. This value is mutated by the CommandBar and is useful for adjusting the `onRender` function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderedInOverflow?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderedInOverflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps#tooltipHostProps:member",
              "docComment": "/**\n * Props for the tooltip when in `iconOnly` mode.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipHostProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipHostProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipHostProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tooltipHostProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICommandBarProps:interface",
          "docComment": "/**\n * {@docCategory CommandBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICommandBarProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ICommandBarProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#ariaLabel:member",
              "docComment": "/**\n * Accessibility text to be read by the screen reader when the user's focus enters the command bar. The screen reader will read this text after reading information about the first focusable item in the command bar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#buttonAs:member",
              "docComment": "/**\n * Custom component for the near and far item buttons. Not used for overflow menu items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buttonAs?: "
                },
                {
                  "kind": "Reference",
                  "text": "IComponentAs",
                  "canonicalReference": "@fluentui/utilities!IComponentAs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buttonAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the command bar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ICommandBar interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBar",
                  "canonicalReference": "@fluentui/react-internal!ICommandBar:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#dataDidRender:member",
              "docComment": "/**\n * Function to be called every time data is rendered. It provides the data that was actually rendered. A use case would be adding telemetry when a particular control is shown in an overflow or dropped as a result of `onReduceData`, or to count the number of renders that an implementation of `onReduceData` triggers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataDidRender?: "
                },
                {
                  "kind": "Content",
                  "text": "(renderedData: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataDidRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#farItems:member",
              "docComment": "/**\n * Items to render on the right side (or left, in RTL). ICommandBarItemProps extends IContextualMenuItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "farItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "farItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#items:member",
              "docComment": "/**\n * Items to render. ICommandBarItemProps extends IContextualMenuItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#onDataGrown:member",
              "docComment": "/**\n * Callback invoked when data has been grown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDataGrown?: "
                },
                {
                  "kind": "Content",
                  "text": "(movedItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDataGrown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#onDataReduced:member",
              "docComment": "/**\n * Callback invoked when data has been reduced.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDataReduced?: "
                },
                {
                  "kind": "Content",
                  "text": "(movedItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDataReduced",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#onGrowData:member",
              "docComment": "/**\n * Custom function to grow data if items are too small for the given space. Return `undefined` if no more steps can be taken to avoid infinate loop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onGrowData?: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarData",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarData",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGrowData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#onReduceData:member",
              "docComment": "/**\n * Custom function to reduce data if items do not fit in given space. Return `undefined` if no more steps can be taken to avoid infinate loop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onReduceData?: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarData",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarData",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onReduceData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#overflowButtonAs:member",
              "docComment": "/**\n * Custom component for the overflow button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButtonAs?: "
                },
                {
                  "kind": "Reference",
                  "text": "IComponentAs",
                  "canonicalReference": "@fluentui/utilities!IComponentAs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButtonAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#overflowButtonProps:member",
              "docComment": "/**\n * Props to be passed to overflow button. If `menuProps` are passed through this prop, any items provided will be prepended to any computed overflow items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#overflowItems:member",
              "docComment": "/**\n * Default items to have in the overflow menu. ICommandBarItemProps extends IContextualMenuItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarItemProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#shiftOnReduce:member",
              "docComment": "/**\n * When true, items will be 'shifted' off the front of the array when reduced, and unshifted during grow.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shiftOnReduce?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shiftOnReduce",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#styles:member",
              "docComment": "/**\n * Customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ICommandBarStyles",
                  "canonicalReference": "@fluentui/react-internal!ICommandBarStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICommandBarStyleProps:interface",
          "docComment": "/**\n * {@docCategory CommandBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICommandBarStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ICommandBarStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ICommandBarStyles:interface",
          "docComment": "/**\n * {@docCategory CommandBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICommandBarStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ICommandBarStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarStyles#primarySet:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primarySet?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primarySet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ICommandBarStyles#secondarySet:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondarySet?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondarySet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Icon:var",
          "docComment": "/**\n * Legacy Icon component which can be targeted by customization. It's recommended to use `FontIcon` or `ImageIcon` instead, especially in scenarios where rendering performance is important. {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Icon: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IIconProps",
              "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Icon",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!IconBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class IconBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IIconProps",
              "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IIconState",
              "canonicalReference": "@fluentui/react-internal!IIconState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IconBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!IconBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `IconBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!IconBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenu:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenu "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenu",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames:interface",
          "docComment": "/**\n * @deprecated\n *\n * in favor of mergeStyles API.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuClassNames "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuClassNames",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames#container:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "container: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "container",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames#header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames#list:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "list: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "list",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames#subComponentStyles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuItem "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuItem",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:index(1)",
              "docComment": "/**\n * Any additional properties to use when custom rendering menu items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[propertyName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "propertyName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#ariaDescribedBy:member",
              "docComment": "/**\n * ID of the element that contains additional detailed descriptive information for screen readers\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#ariaDescription:member",
              "docComment": "/**\n * Detailed description of the menu item for the benefit of screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#ariaLabel:member",
              "docComment": "/**\n * Custom accessible label for the element. If no override is specified, the `aria-label` attribute will contain the item name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#canCheck:member",
              "docComment": "/**\n * Whether or not this menu item can be checked\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canCheck?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canCheck",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#checked:member",
              "docComment": "/**\n * Whether or not this menu item is currently checked.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#className:member",
              "docComment": "/**\n * Additional CSS class to apply to the menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IContextualMenuRenderItem interface. This will get passed down to ContextualMenuItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuRenderItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuRenderItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#customOnRenderListLength:member",
              "docComment": "/**\n * When rendering a custom menu component that is passed in, the component might also be a list of elements. We want to keep track of the correct index our menu is using based off of the length of the custom list. It is up to the user to increment the count for their list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customOnRenderListLength?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "customOnRenderListLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#data:member",
              "docComment": "/**\n * Any custom data the developer wishes to associate with the menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#disabled:member",
              "docComment": "/**\n * Whether the menu item is disabled\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#getItemClassNames:member",
              "docComment": "/**\n * Method to provide the classnames to style the individual items inside a menu.\n *\n * @deprecated\n *\n * Use `styles` prop of `IContextualMenuItemProps` to leverage mergeStyles API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getItemClassNames?: "
                },
                {
                  "kind": "Content",
                  "text": "(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink: boolean, knownIcon: boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string, subMenuClassName?: string, primaryDisabled?: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "IMenuItemClassNames",
                  "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getItemClassNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#getSplitButtonVerticalDividerClassNames:member",
              "docComment": "/**\n * Method to provide the classnames to style the Vertical Divider of a split button inside a menu. Default value is the `getSplitButtonVerticalDividerClassNames` func defined in `ContextualMenu.classnames.ts`.\n *\n * @defaultvalue\n *\n * getSplitButtonVerticalDividerClassNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSplitButtonVerticalDividerClassNames?: "
                },
                {
                  "kind": "Content",
                  "text": "(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "IVerticalDividerClassNames",
                  "canonicalReference": "@fluentui/react-internal!IVerticalDividerClassNames:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getSplitButtonVerticalDividerClassNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#href:member",
              "docComment": "/**\n * Navigate to this URL when the menu item is clicked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "href?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "href",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#iconProps:member",
              "docComment": "/**\n * Props for an icon to display next to the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#inactive:member",
              "docComment": "/**\n * This prop is no longer used. All contextual menu items are now focusable when disabled.\n *\n * @deprecated\n *\n * in 6.38.2 will be removed in 7.0.0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inactive?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inactive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#itemProps:member",
              "docComment": "/**\n * Optional IContextualMenuItemProps overrides to customize behaviors such as item styling via `styles`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#itemType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemType?: "
                },
                {
                  "kind": "Reference",
                  "text": "ContextualMenuItemType",
                  "canonicalReference": "@fluentui/react-internal!ContextualMenuItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#key:member",
              "docComment": "/**\n * Unique id to identify the item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#keytipProps:member",
              "docComment": "/**\n * Keytip for this contextual menu item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#name:member",
              "docComment": "/**\n * Text of the menu item.\n *\n * @deprecated\n *\n * Use `text` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#onClick:member",
              "docComment": "/**\n * Callback for when the menu item is invoked. If `ev.preventDefault()` is called in `onClick`, the click will not close the menu.\n *\n * Only for ContextualMenu items, returning true will dismiss the menu even if `ev.preventDefault()` was called (does not apply for button or CommandBar sub-menu items).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#onMouseDown:member",
              "docComment": "/**\n * A function to be executed on mouse down. This is executed before an `onClick` event and can be used to interrupt native on click events as well. The click event should still handle the commands. This should only be used in special cases when react and non-react are mixed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseDown?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ", event: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#onRender:member",
              "docComment": "/**\n * Method to custom render this menu item. For keyboard accessibility, the top-level rendered item should be a focusable element (like an anchor or a button) or have the `data-is-focusable` property set to true.\n *\n * @param item - Item to render. Will typically be of type `IContextualMenuItem`. (When rendering a command bar item, will be `ICommandBarItemProps`.)\n *\n * @param dismissMenu - Function to dismiss the menu. Can be used to ensure that a custom menu item click dismisses the menu. (Will be undefined if rendering a command bar item.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRender?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#onRenderContent:member",
              "docComment": "/**\n * Method to customize sub-components rendering of this menu item.\n *\n * @param props - Props used to pass into render functions\n *\n * @param defaultRenders - Default render functions that renders default sub-components\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderContent?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", defaultRenders: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemRenderFunctions",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#onRenderIcon:member",
              "docComment": "/**\n * Custom render function for the menu item icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#primaryDisabled:member",
              "docComment": "/**\n * If the menu item is a split button, this prop disables purely the primary action of the button.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryDisabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryDisabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#rel:member",
              "docComment": "/**\n * Link relation setting when using `href`. If `target` is `_blank`, `rel` is defaulted to a value to prevent clickjacking.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#role:member",
              "docComment": "/**\n * Optional override for the menu button's role. Defaults to `menuitem` or `menuitemcheckbox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#secondaryText:member",
              "docComment": "/**\n * Secondary description for the menu item to display\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#sectionProps:member",
              "docComment": "/**\n * Properties to apply to render this item as a section. This prop is mutually exclusive with `subMenuProps`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sectionProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuSection",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuSection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sectionProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#shortCut:member",
              "docComment": "/**\n * @deprecated\n *\n * Not used\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shortCut?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shortCut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#split:member",
              "docComment": "/**\n * Whether or not this menu item is a splitButton.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "split?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "split",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#style:member",
              "docComment": "/**\n * Additional styles to apply to the menu item\n *\n * @deprecated\n *\n * in favor of the `styles` prop to leverage mergeStyles API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.CSSProperties",
                  "canonicalReference": "@types/react!~React.CSSProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#submenuIconProps:member",
              "docComment": "/**\n * Props for the Icon used for the chevron.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "submenuIconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "submenuIconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#subMenuProps:member",
              "docComment": "/**\n * Properties to apply to a submenu to this item.\n *\n * The ContextualMenu will provide default values for `target`, `onDismiss`, `isSubMenu`, `id`, `shouldFocusOnMount`, `directionalHint`, `className`, and `gapSpace`, all of which can be overridden.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#target:member",
              "docComment": "/**\n * Target window when using `href`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#text:member",
              "docComment": "/**\n * Text of the menu item. If a standard hyphen (-) is passed in, then the item will be rendered as a divider. If a dash must appear as text, use an emdash (—), figuredash (‒), or minus symbol (−) instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem#title:member",
              "docComment": "/**\n * Title (tooltip) text displayed when hovering over an item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItemProps",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the ContextualMenuItem\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#classNames:member",
              "docComment": "/**\n * Classnames for different aspects of a menu item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "classNames: "
                },
                {
                  "kind": "Reference",
                  "text": "IMenuItemClassNames",
                  "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "classNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IContextualMenuRenderItem interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuRenderItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuRenderItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#dismissMenu:member",
              "docComment": "/**\n * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to. If dismissAll is true, all menus will be closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any, dismissAll?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#dismissSubMenu:member",
              "docComment": "/**\n * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissSubMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#getSubmenuTarget:member",
              "docComment": "/**\n * This prop will get set by the wrapping component and will return the element that wraps this ContextualMenuItem. Used for openSubMenu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSubmenuTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getSubmenuTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#hasIcons:member",
              "docComment": "/**\n * If this item has icons\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasIcons: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasIcons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#index:member",
              "docComment": "/**\n * Index of the item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#item:member",
              "docComment": "/**\n * The item to display\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#onCheckmarkClick:member",
              "docComment": "/**\n * Click handler for the checkmark\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCheckmarkClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ", ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCheckmarkClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#openSubMenu:member",
              "docComment": "/**\n * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openSubMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: any, target: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyles",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuItemRenderFunctions "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuItemRenderFunctions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions#renderCheckMarkIcon:member",
              "docComment": "/**\n * Rendering function for check mark icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderCheckMarkIcon: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", customClassNames?: string[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderCheckMarkIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions#renderItemIcon:member",
              "docComment": "/**\n * Rendering function for item icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItemIcon: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", customClassNames?: string[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderItemIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions#renderItemName:member",
              "docComment": "/**\n * Rendering function for item label\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItemName: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", customClassNames?: string[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderItemName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions#renderSecondaryText:member",
              "docComment": "/**\n * Rendering function for secondary text label\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderSecondaryText: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", customClassNames?: string[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderSecondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderFunctions#renderSubMenuIcon:member",
              "docComment": "/**\n * Rendering function for submenu icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderSubMenuIcon: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", customClassNames?: string[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderSubMenuIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuItemRenderProps extends "
            },
            {
              "kind": "Reference",
              "text": "IContextualMenuItem",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuItemRenderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps#focusableElementIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusableElementIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusableElementIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps#hasCheckmarks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCheckmarks: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCheckmarks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps#hasIcons:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasIcons: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasIcons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps#index:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps#totalItemCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalItemCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "totalItemCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuItemStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuItemStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#checked:member",
              "docComment": "/**\n * Whether or not the menu item is checked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checked: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#disabled:member",
              "docComment": "/**\n * Whether or not the menu item is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#dividerClassName:member",
              "docComment": "/**\n * The optional class name to apply to the divider element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dividerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dividerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#expanded:member",
              "docComment": "/**\n * Whether or not the menu item is expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expanded: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#iconClassName:member",
              "docComment": "/**\n * The optional class name to apply to the icon element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#isAnchorLink:member",
              "docComment": "/**\n * Indicates if a menu item is an anchor link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAnchorLink: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAnchorLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#itemClassName:member",
              "docComment": "/**\n * The optional class name to apply to the item element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#knownIcon:member",
              "docComment": "/**\n * Indicates if the icon used is of the known set of icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "knownIcon: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "knownIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#primaryDisabled:member",
              "docComment": "/**\n * Whether or not the primary section of a split menu item is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryDisabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryDisabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#subMenuClassName:member",
              "docComment": "/**\n * The optional class name to apply to the sub-menu if present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuItemStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IButtonStyles",
              "canonicalReference": "@fluentui/react-internal!IButtonStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#anchorLink:member",
              "docComment": "/**\n * Styles for a menu item that is an anchor link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anchorLink: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "anchorLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#checkmarkIcon:member",
              "docComment": "/**\n * Default style for checkmark icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkmarkIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checkmarkIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#divider:member",
              "docComment": "/**\n * Styles for a divider item of a ContextualMenu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divider: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#icon:member",
              "docComment": "/**\n * Styles for the icon element of a menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#iconColor:member",
              "docComment": "/**\n * Default icon color style for known icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconColor: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#item:member",
              "docComment": "/**\n * Styles for a menu item that is an anchor link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#label:member",
              "docComment": "/**\n * Styles for the label of a menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#linkContent:member",
              "docComment": "/**\n * Styles for the content inside the button/link of the menuItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#linkContentMenu:member",
              "docComment": "/**\n * Styles for a menu item that is a link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkContentMenu: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkContentMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#screenReaderText:member",
              "docComment": "/**\n * Styles for hidden screen reader text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#secondaryText:member",
              "docComment": "/**\n * Styles for the secondary text of a menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#splitContainer:member",
              "docComment": "/**\n * Styles for the container of a split menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splitContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "splitContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#splitMenu:member",
              "docComment": "/**\n * Styles for the menu portion of a split menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splitMenu: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "splitMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#splitPrimary:member",
              "docComment": "/**\n * Styles for the primary portion of a split menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splitPrimary: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "splitPrimary",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyles#subMenuIcon:member",
              "docComment": "/**\n * Styles for the submenu icon of a menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuListProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuListProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps#defaultMenuItemRenderer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultMenuItemRenderer: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemRenderProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemRenderProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultMenuItemRenderer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps#hasCheckmarks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCheckmarks: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCheckmarks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps#hasIcons:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasIcons: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasIcons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps#role:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps#totalItemCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalItemCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "totalItemCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseProps",
              "canonicalReference": "@fluentui/utilities!IBaseProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IContextualMenu",
              "canonicalReference": "@fluentui/react-internal!IContextualMenu:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IWithResponsiveModeState",
              "canonicalReference": "@fluentui/react-internal!IWithResponsiveModeState:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#alignTargetEdge:member",
              "docComment": "/**\n * If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds, thus making sure the element aligns perfectly with target's alignment edge\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignTargetEdge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignTargetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#ariaLabel:member",
              "docComment": "/**\n * Accessible label for the ContextualMenu's root element (inside the callout).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#beakWidth:member",
              "docComment": "/**\n * The width of the beak.\n *\n * @defaultvalue\n *\n * 16\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#bounds:member",
              "docComment": "/**\n * The bounding rectangle (or callback that returns a rectangle) which the contextual menu can appear in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounds?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | ((target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@fluentui/react-hooks!Target:type"
                },
                {
                  "kind": "Content",
                  "text": ", targetWindow?: "
                },
                {
                  "kind": "Reference",
                  "text": "Window",
                  "canonicalReference": "!Window:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#calloutProps:member",
              "docComment": "/**\n * Additional custom props for the Callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#className:member",
              "docComment": "/**\n * Additional CSS class to apply to the ContextualMenu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenu",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenu:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#contextualMenuItemAs:member",
              "docComment": "/**\n * Custom component to use for rendering individual menu items.\n *\n * @defaultvalue\n *\n * ContextualMenuItem\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contextualMenuItemAs?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentClass",
                  "canonicalReference": "@types/react!~React.ComponentClass:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.FunctionComponent",
                  "canonicalReference": "@types/react!~React.FunctionComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contextualMenuItemAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#coverTarget:member",
              "docComment": "/**\n * If true, the menu will be positioned to cover the target. If false, it will be positioned next to the target.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coverTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coverTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#delayUpdateFocusOnHover:member",
              "docComment": "/**\n * If true, the contextual menu will not be updated until focus enters the menu via other means. This will only result in different behavior when `shouldFocusOnMount = false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayUpdateFocusOnHover?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delayUpdateFocusOnHover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#directionalHint:member",
              "docComment": "/**\n * How the menu should be positioned\n *\n * @defaultvalue\n *\n * DirectionalHint.bottomAutoEdge\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#directionalHintFixed:member",
              "docComment": "/**\n * If true the position will not change sides in an attempt to fit the ContextualMenu within bounds. It will still attempt to align it to whatever bounds are given.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintFixed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#directionalHintForRTL:member",
              "docComment": "/**\n * How the menu should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintForRTL?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintForRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#doNotLayer:member",
              "docComment": "/**\n * If true do not render on a new layer. If false render on a new layer.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doNotLayer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "doNotLayer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#focusZoneProps:member",
              "docComment": "/**\n * Props to pass down to the FocusZone. NOTE: the default FocusZoneDirection will be used unless a direction is specified in the focusZoneProps (even if other focusZoneProps are defined)\n *\n * @defaultvalue\n *\n * \\{ direction: FocusZoneDirection.vertical \\}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusZoneProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFocusZoneProps",
                  "canonicalReference": "@fluentui/react-focus!IFocusZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusZoneProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#gapSpace:member",
              "docComment": "/**\n * The gap between the ContextualMenu and the target\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gapSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gapSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#getMenuClassNames:member",
              "docComment": "/**\n * Method to provide the classnames to style the contextual menu.\n *\n * @deprecated\n *\n * Use `styles` instead to leverage mergeStyles API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMenuClassNames?: "
                },
                {
                  "kind": "Content",
                  "text": "(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", className?: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuClassNames",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuClassNames:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getMenuClassNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#hidden:member",
              "docComment": "/**\n * If true, renders the ContextualMenu in a hidden state. Use this flag, rather than rendering a ContextualMenu conditionally based on visibility, to improve rendering performance when it becomes visible. Note: When ContextualMenu is hidden its content will not be rendered. It will only render once the ContextualMenu is visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#id:member",
              "docComment": "/**\n * ID for the ContextualMenu's root element (inside the callout). Should be used for `aria-owns` and other such uses, rather than direct reference for programmatic purposes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#isBeakVisible:member",
              "docComment": "/**\n * If true then the beak is visible. If false it will not be shown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBeakVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBeakVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#isSubMenu:member",
              "docComment": "/**\n * Whether this menu is a submenu of another menu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSubMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#items:member",
              "docComment": "/**\n * Menu items to display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#labelElementId:member",
              "docComment": "/**\n * Used as `aria-labelledby` for the menu element inside the callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelElementId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelElementId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onDismiss:member",
              "docComment": "/**\n * Callback when the ContextualMenu tries to close. If `dismissAll` is true then all submenus will be dismissed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", dismissAll?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onItemClick:member",
              "docComment": "/**\n * Click handler which is invoked if `onClick` is not passed for individual contextual menu item. Returning true will dismiss the menu even if `ev.preventDefault()` was called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onMenuDismissed:member",
              "docComment": "/**\n * Callback for when the menu is being closed (removing from the DOM).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMenuDismissed?: "
                },
                {
                  "kind": "Content",
                  "text": "(contextualMenu?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMenuDismissed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onMenuOpened:member",
              "docComment": "/**\n * Callback for when the menu has been opened.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMenuOpened?: "
                },
                {
                  "kind": "Content",
                  "text": "(contextualMenu?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMenuOpened",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onRenderMenuList:member",
              "docComment": "/**\n * Method to override the render of the list of menu items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderMenuList?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuListProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderMenuList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onRenderSubMenu:member",
              "docComment": "/**\n * Custom render function for a submenu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSubMenu?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#onRestoreFocus:member",
              "docComment": "/**\n * Called when the component is unmounting, and focus needs to be restored. If this is provided, focus will not be restored automatically, and you'll need to call `params.originalElement.focus()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRestoreFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(params: "
                },
                {
                  "kind": "Reference",
                  "text": "IPopupRestoreFocusParams",
                  "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRestoreFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#shouldFocusOnContainer:member",
              "docComment": "/**\n * Whether to focus on the contextual menu container (as opposed to the first menu item).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldFocusOnContainer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFocusOnContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#shouldFocusOnMount:member",
              "docComment": "/**\n * Whether to focus on the menu when mounted.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldFocusOnMount?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFocusOnMount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#shouldUpdateWhenHidden:member",
              "docComment": "/**\n * If true, the menu will be updated even when `hidden=true`. Note that this will consume resources to update even when nothing is being shown to the user. This might be helpful if your updates are small and you want the menu to display quickly when `hidden` is set to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldUpdateWhenHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldUpdateWhenHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuStyles",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#subMenuHoverDelay:member",
              "docComment": "/**\n * Delay (in milliseconds) to wait before expanding / dismissing a submenu on mouseEnter or mouseLeave\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuHoverDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuHoverDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#target:member",
              "docComment": "/**\n * The target that the ContextualMenu should try to position itself based on. It can be either an element, a query selector string resolving to a valid element, or a MouseEvent. If a MouseEvent is given, the origin point of the event will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@fluentui/react-hooks!Target:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#theme:member",
              "docComment": "/**\n * Theme provided by higher-order component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#title:member",
              "docComment": "/**\n * Title to be displayed at the top of the menu, above the items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#useTargetAsMinWidth:member",
              "docComment": "/**\n * If true the context menu will have a minimum width equal to the width of the target element\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useTargetAsMinWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useTargetAsMinWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuProps#useTargetWidth:member",
              "docComment": "/**\n * If true the context menu will render as the same width as the target element\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useTargetWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useTargetWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            },
            {
              "startIndex": 11,
              "endIndex": 13
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuRenderItem:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuRenderItem "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuRenderItem",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuRenderItem#dismissMenu:member",
              "docComment": "/**\n * Dismiss the menu this item belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissMenu: "
                },
                {
                  "kind": "Content",
                  "text": "(dismissAll?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuRenderItem#dismissSubMenu:member",
              "docComment": "/**\n * Function to close this item's subMenu, if present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissSubMenu: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuRenderItem#openSubMenu:member",
              "docComment": "/**\n * Function to open this item's subMenu, if present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openSubMenu: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openSubMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuSection:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuSection extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<any> "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuSection",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuSection#bottomDivider:member",
              "docComment": "/**\n * If set to true, the section will display a divider at the bottom of the section.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottomDivider?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bottomDivider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuSection#items:member",
              "docComment": "/**\n * The items to include inside the section.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuSection#title:member",
              "docComment": "/**\n * The optional section title.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuSection#topDivider:member",
              "docComment": "/**\n * If set to true, the section will display a divider at the top of the section.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topDivider?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topDivider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuState "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuState#contextualMenuItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contextualMenuItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contextualMenuItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuState#contextualMenuTarget:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contextualMenuTarget?: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contextualMenuTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuState#positions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positions?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuState#slideDirectionalClassName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slideDirectionalClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "slideDirectionalClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuState#submenuDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "submenuDirection?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "submenuDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuState#subMenuId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuStyleProps:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles#container:member",
              "docComment": "/**\n * Style for the container which parents all menu items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "container: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "container",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles#header:member",
              "docComment": "/**\n * Styles for the header item of a ContextualMenu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles#list:member",
              "docComment": "/**\n * Styles for the list that contains all menuItems.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "list: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "list",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles#root:member",
              "docComment": "/**\n * Base styles for the root element of all ContextualMenus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles#subComponentStyles:member",
              "docComment": "/**\n * SubComponent styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuStyles#title:member",
              "docComment": "/**\n * Style override for the contextual menu title.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IContextualMenuSubComponentStyles:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IContextualMenuSubComponentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IContextualMenuSubComponentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuSubComponentStyles#callout:member",
              "docComment": "/**\n * Styles for the callout that hosts the ContextualMenu options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callout: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutContentStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "callout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IContextualMenuSubComponentStyles#menuItem:member",
              "docComment": "/**\n * Styles for each menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItem: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItemStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItemStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "menuItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!IconType:enum",
          "docComment": "/**\n * @deprecated\n *\n * Icon type is inferred based on presence of `IIconProps.imageProps` {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum IconType "
            }
          ],
          "releaseTag": "Public",
          "name": "IconType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!IconType.default:member",
              "docComment": "/**\n * Render using the fabric icon font.\n *\n * @deprecated\n *\n * Icon type is inferred based on presence of `IIconProps.imageProps`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "default = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "default",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!IconType.Default:member",
              "docComment": "/**\n * Deprecated, use `default`.\n *\n * @deprecated\n *\n * Use `default`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Default = "
                },
                {
                  "kind": "Content",
                  "text": "100000"
                }
              ],
              "releaseTag": "Public",
              "name": "Default",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!IconType.image:member",
              "docComment": "/**\n * Render using an image, where imageProps would be used.\n *\n * @deprecated\n *\n * Icon type is inferred based on presence of `IIconProps.imageProps`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "image = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "image",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!IconType.Image:member",
              "docComment": "/**\n * Deprecated, use `image`.\n *\n * @deprecated\n *\n * Use `image`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Image = "
                },
                {
                  "kind": "Content",
                  "text": "100001"
                }
              ],
              "releaseTag": "Public",
              "name": "Image",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialog:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialog "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialog",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogContent:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogContent "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogContent",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogContentProps:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogContentProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DialogContentBase",
              "canonicalReference": "@fluentui/react-internal!DialogContentBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogContentProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#className:member",
              "docComment": "/**\n * Optional override class name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#closeButtonAriaLabel:member",
              "docComment": "/**\n * Label to be passed to to aria-label of close button\n *\n * @defaultvalue\n *\n * Close\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IDialogContent interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IDialogContent",
                  "canonicalReference": "@fluentui/react-internal!IDialogContent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#draggableHeaderClassName:member",
              "docComment": "/**\n * The classname for when the header is draggable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "draggableHeaderClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "draggableHeaderClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#isMultiline:member",
              "docComment": "/**\n * Is inside a multiline wrapper\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMultiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMultiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#onDismiss:member",
              "docComment": "/**\n * Callback for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#responsiveMode:member",
              "docComment": "/**\n * Responsive mode passed in from decorator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "responsiveMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ResponsiveMode",
                  "canonicalReference": "@fluentui/react-internal!ResponsiveMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "responsiveMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#showCloseButton:member",
              "docComment": "/**\n * Show an 'x' close button in the upper-right corner\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showCloseButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showCloseButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IDialogContentStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogContentStyles",
                  "canonicalReference": "@fluentui/react-internal!IDialogContentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#subText:member",
              "docComment": "/**\n * The subtext to display in the dialog\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#subTextId:member",
              "docComment": "/**\n * The Id for subText container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subTextId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subTextId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#title:member",
              "docComment": "/**\n * The title text to display at the top of the dialog.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#titleId:member",
              "docComment": "/**\n * The Id for title container\n *\n * @deprecated\n *\n * use the `id` attribute in `titleProps` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "titleId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "titleId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#titleProps:member",
              "docComment": "/**\n * The props for title container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "titleProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "titleProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#topButtonsProps:member",
              "docComment": "/**\n * Other top buttons that will show up next to the close button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topButtonsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topButtonsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentProps#type:member",
              "docComment": "/**\n * The type of Dialog to display.\n *\n * @defaultvalue\n *\n * DialogType.normal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "DialogType",
                  "canonicalReference": "@fluentui/react-internal!DialogType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogContentStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogContentStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#draggableHeaderClassName:member",
              "docComment": "/**\n * The classname for when the header is draggable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "draggableHeaderClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "draggableHeaderClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#hidden:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#isClose:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isClose?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isClose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#isLargeHeader:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLargeHeader?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLargeHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#isMultiline:member",
              "docComment": "/**\n * Is inside a multiline wrapper\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMultiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMultiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogContentStyles:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogContentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogContentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#button:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "button: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "button",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#content:member",
              "docComment": "/**\n * Style for the content element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#inner:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inner: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#innerContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "innerContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#subText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogContentStyles#topButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogFooter:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogFooter "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogFooter",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogFooterProps:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogFooterProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.Props",
              "canonicalReference": "@types/react!~React.Props:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DialogFooterBase",
              "canonicalReference": "@fluentui/react-internal!DialogFooterBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogFooterProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterProps#className:member",
              "docComment": "/**\n * Optional override class name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IDialogFooter",
                  "canonicalReference": "@fluentui/react-internal!IDialogFooter:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IDialogFooterStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogFooterStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogFooterStyles",
                  "canonicalReference": "@fluentui/react-internal!IDialogFooterStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogFooterStyleProps:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogFooterStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogFooterStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterStyleProps#className:member",
              "docComment": "/**\n * Optional override class name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogFooterStyles:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogFooterStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogFooterStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterStyles#action:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "action: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "action",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterStyles#actions:member",
              "docComment": "/**\n * Style for the actions element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actions: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "actions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogFooterStyles#actionsRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actionsRight: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "actionsRight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogProps:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DialogBase",
              "canonicalReference": "@fluentui/react-internal!DialogBase:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IWithResponsiveModeState",
              "canonicalReference": "@fluentui/react-internal!IWithResponsiveModeState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IAccessiblePopupProps",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#ariaDescribedById:member",
              "docComment": "/**\n * Optional id for aria-DescribedBy\n *\n * @deprecated\n *\n * Pass through via `modalProps.subtitleAriaId` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedById?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedById",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#ariaLabelledById:member",
              "docComment": "/**\n * Optional id for aria-LabelledBy\n *\n * @deprecated\n *\n * Pass through via `modalProps.titleAriaId` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledById?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledById",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#className:member",
              "docComment": "/**\n * Optional class name to be added to the root class\n *\n * @deprecated\n *\n * Pass through via `modalProps.className` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IDialog interface. Use this instead of ref for accessing the public methods and properties of the component.\n *\n * @deprecated\n *\n * Unused, returns no value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IDialog",
                  "canonicalReference": "@fluentui/react-internal!IDialog:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#containerClassName:member",
              "docComment": "/**\n * Optional override for container class\n *\n * @deprecated\n *\n * Pass through via `modalProps.className` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "containerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "containerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#contentClassName:member",
              "docComment": "/**\n * Optional override content class\n *\n * @deprecated\n *\n * Pass through via `dialogContentProps` instead as `className`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#dialogContentProps:member",
              "docComment": "/**\n * Props to be passed through to Dialog Content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dialogContentProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogContentProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogContentProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dialogContentProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#hidden:member",
              "docComment": "/**\n * Whether the dialog is hidden.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#isBlocking:member",
              "docComment": "/**\n * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\n *\n * @deprecated\n *\n * Pass through via `modalProps` instead\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBlocking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBlocking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#isDarkOverlay:member",
              "docComment": "/**\n * Whether the overlay is dark themed.\n *\n * @deprecated\n *\n * Pass through via `modalProps` instead\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDarkOverlay?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDarkOverlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#isOpen:member",
              "docComment": "/**\n * Whether the dialog is displayed. Deprecated, use `hidden` instead.\n *\n * @deprecated\n *\n * Use `hidden` instead\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#maxWidth:member",
              "docComment": "/**\n * Sets the maximum width for the dialog. It limits the width property to be larger than the value specified in max-width.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSRule:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSPixelUnitRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSPixelUnitRule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#minWidth:member",
              "docComment": "/**\n * Sets the minimum width of the dialog. It limits the width property to be not smaller than the value specified in min-width.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSRule:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSPixelUnitRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSPixelUnitRule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#modalProps:member",
              "docComment": "/**\n * Props to be passed through to Modal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modalProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IModalProps",
                  "canonicalReference": "@fluentui/react-internal!IModalProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "modalProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#onDismiss:member",
              "docComment": "/**\n * A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#onDismissed:member",
              "docComment": "/**\n * A callback function which is called after the Dialog is dismissed and the animation is complete.\n *\n * @deprecated\n *\n * Pass through via `modalProps` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismissed?: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismissed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#onLayerDidMount:member",
              "docComment": "/**\n * A callback function for when the Dialog content is mounted on the overlay layer\n *\n * @deprecated\n *\n * Pass through via `modalProps.layerProps` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerDidMount?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerDidMount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#onLayerMounted:member",
              "docComment": "/**\n * Deprecated at 0.81.2, use `onLayerDidMount` instead.\n *\n * @deprecated\n *\n * Use `onLayerDidMount` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerMounted?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerMounted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IDialogStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IDialogStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IDialogStyles",
                  "canonicalReference": "@fluentui/react-internal!IDialogStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#subText:member",
              "docComment": "/**\n * The subtext to display in the dialog.\n *\n * @deprecated\n *\n * Pass through via `dialogContentProps` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#title:member",
              "docComment": "/**\n * The title text to display at the top of the dialog.\n *\n * @deprecated\n *\n * Pass through via `dialogContentProps` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#topButtonsProps:member",
              "docComment": "/**\n * Other top buttons that will show up next to the close button\n *\n * @deprecated\n *\n * Pass through via `dialogContentProps` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topButtonsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topButtonsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogProps#type:member",
              "docComment": "/**\n * The type of Dialog to display.\n *\n * @deprecated\n *\n * Pass through via `dialogContentProps` instead.\n *\n * @defaultvalue\n *\n * DialogType.normal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "DialogType",
                  "canonicalReference": "@fluentui/react-internal!DialogType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogStyleProps:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#containerClassName:member",
              "docComment": "/**\n * Optional override for container class\n *\n * @deprecated\n *\n * Pass through via `modalProps.className` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "containerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "containerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#contentClassName:member",
              "docComment": "/**\n * Optional override content class\n *\n * @deprecated\n *\n * Pass through via `dialogContentProps` instead as `className`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#dialogDefaultMaxWidth:member",
              "docComment": "/**\n * Default max-width for the dialog box.\n *\n * @defaultvalue\n *\n * '340px'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dialogDefaultMaxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSRule:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSPixelUnitRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSPixelUnitRule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dialogDefaultMaxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#dialogDefaultMinWidth:member",
              "docComment": "/**\n * Default min-width for the dialog box.\n *\n * @defaultvalue\n *\n * '288px'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dialogDefaultMinWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSRule:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ICSSPixelUnitRule",
                  "canonicalReference": "@fluentui/merge-styles!ICSSPixelUnitRule:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dialogDefaultMinWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#hidden:member",
              "docComment": "/**\n * Whether the dialog is hidden.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDialogStyles:interface",
          "docComment": "/**\n * {@docCategory Dialog}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDialogStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IDialogStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyles#main:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "main: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "main",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDialogStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface",
          "docComment": "/**\n * Drag & drop event contextual information.\n *\n * {@docCategory IDragDropHelper}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropContext "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropContext",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropContext#data:member",
              "docComment": "/**\n * Data associated with drag & drop action.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropContext#index:member",
              "docComment": "/**\n * Index of drag & drop action.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropContext#isGroup:member",
              "docComment": "/**\n * Whether or not drag & drop region is indivual or group of content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isGroup?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropEvent:interface",
          "docComment": "/**\n * {@docCategory IDragDropHelper}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropEvent",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvent#isHandled:member",
              "docComment": "/**\n * Whether or not the drag & drop event was handled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isHandled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isHandled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropEvents:interface",
          "docComment": "/**\n * Drag & drop event callback interface.\n *\n * {@docCategory IDragDropHelper}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropEvents",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#canDrag:member",
              "docComment": "/**\n * Whether or not drag action is allowed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canDrag?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canDrag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#canDragGroups:member",
              "docComment": "/**\n * Whether the whole group is draggable. This applies after canDrag returns true for the group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canDragGroups?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canDragGroups",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#canDrop:member",
              "docComment": "/**\n * Whether or not drop action is allowed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canDrop?: "
                },
                {
                  "kind": "Content",
                  "text": "(dropContext?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropContext",
                  "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", dragContext?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropContext",
                  "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canDrop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#onDragEnd:member",
              "docComment": "/**\n * On drag end event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#onDragEnter:member",
              "docComment": "/**\n * On drag enter region event callback. Returned string is the css classes that will be added to the entering element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragEnter?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragEnter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#onDragLeave:member",
              "docComment": "/**\n * On drag leave region event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragLeave?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragLeave",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#onDragOver:member",
              "docComment": "/**\n * On drag over event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragOver?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragOver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#onDragStart:member",
              "docComment": "/**\n * On drag start event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragStart?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, itemIndex?: number, selectedItems?: any[], event?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropEvents#onDrop:member",
              "docComment": "/**\n * On drop event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDrop?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDrop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropHelper:interface",
          "docComment": "/**\n * Helper for subscribing and unsubscribing to drag and drop events on an HTMLElement.\n *\n * {@docCategory IDragDropHelper}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropHelper "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropHelper",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropHelper#dispose:member",
              "docComment": "/**\n * Dispose of listeners bound to instance of helper.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dispose",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropHelper#subscribe:member",
              "docComment": "/**\n * Subscribe to events on a DOM node with drag and drop configuration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe: "
                },
                {
                  "kind": "Content",
                  "text": "(root: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", events: "
                },
                {
                  "kind": "Reference",
                  "text": "EventGroup",
                  "canonicalReference": "@fluentui/utilities!EventGroup:class"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropOptions",
                  "canonicalReference": "@fluentui/react-internal!IDragDropOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => {\n        key: string;\n        dispose: () => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropHelper#unsubscribe:member",
              "docComment": "/**\n * Unsubscribe to events registered on a DOM node with key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsubscribe: "
                },
                {
                  "kind": "Content",
                  "text": "(root: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", key: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "unsubscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropHelperParams:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropHelperParams "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropHelperParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropHelperParams#minimumPixelsForDrag:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumPixelsForDrag?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minimumPixelsForDrag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropHelperParams#selection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selection: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelection",
                  "canonicalReference": "@fluentui/utilities!ISelection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropOptions:interface",
          "docComment": "/**\n * The drag and drop event listener configuration.\n *\n * {@docCategory IDragDropHelper}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#canDrag:member",
              "docComment": "/**\n * Whether or not drag action is allowed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canDrag?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canDrag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#canDrop:member",
              "docComment": "/**\n * Whether or not drop action is allowed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canDrop?: "
                },
                {
                  "kind": "Content",
                  "text": "(dropContext?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropContext",
                  "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", dragContext?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropContext",
                  "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canDrop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#context:member",
              "docComment": "/**\n * Context associated with drag and drop event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropContext",
                  "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#eventMap:member",
              "docComment": "/**\n * Map of event name to callback function to subscribe to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventMap?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        eventName: string;\n        callback: (context: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropContext",
                  "canonicalReference": "@fluentui/react-internal!IDragDropContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ", event?: any) => void;\n    }[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#key:member",
              "docComment": "/**\n * Unique key to associate with instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#onDragEnd:member",
              "docComment": "/**\n * On drag end event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#onDragOver:member",
              "docComment": "/**\n * On drag over element(s) event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragOver?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragOver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#onDragStart:member",
              "docComment": "/**\n * On drag start event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDragStart?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, itemIndex?: number, selectedItems?: any[], event?: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDragStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#onDrop:member",
              "docComment": "/**\n * On drop event callback.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDrop?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDrop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#selectionIndex:member",
              "docComment": "/**\n * Selection index on drag and drop event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropOptions#updateDropState:member",
              "docComment": "/**\n * Callback on drop state update.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateDropState: "
                },
                {
                  "kind": "Content",
                  "text": "(isDropping: boolean, event: "
                },
                {
                  "kind": "Reference",
                  "text": "DragEvent",
                  "canonicalReference": "!DragEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "updateDropState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragDropTarget:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragDropTarget "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragDropTarget",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropTarget#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropTarget#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragDropOptions",
                  "canonicalReference": "@fluentui/react-internal!IDragDropOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragDropTarget#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IDragOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IDragOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IDragOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragOptions#closeMenuItemText:member",
              "docComment": "/**\n * The text to use for the modal close menu item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeMenuItemText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeMenuItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragOptions#dragHandleSelector:member",
              "docComment": "/**\n * Optional selector for the element where the drag can be initiated. If not supplied when isDraggable is true dragging can be initiated by the whole contents of the modal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragHandleSelector?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragHandleSelector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragOptions#keepInBounds:member",
              "docComment": "/**\n * Whether the draggable content should be prevented from going off-screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keepInBounds?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keepInBounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragOptions#keyboardMoveIconProps:member",
              "docComment": "/**\n * IconProps for the icon used to indicate that the dialog is in keyboard move mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardMoveIconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keyboardMoveIconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragOptions#menu:member",
              "docComment": "/**\n * The Draggable Control Menu so that the draggable zone can be moved via the keyboard\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menu: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FunctionComponent",
                  "canonicalReference": "@types/react!~React.FunctionComponent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuProps",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "menu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IDragOptions#moveMenuItemText:member",
              "docComment": "/**\n * The text to use for the modal move menu item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moveMenuItemText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "moveMenuItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IEditingSelectedPeopleItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "ISelectedPeopleItemProps",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IEditingSelectedPeopleItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemProps#floatingPickerProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floatingPickerProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "floatingPickerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemProps#getEditingItemText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEditingItemText?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IExtendedPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getEditingItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemProps#onEditingComplete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEditingComplete: "
                },
                {
                  "kind": "Content",
                  "text": "(oldItem: any, newItem: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onEditingComplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemProps#onRenderFloatingPicker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderFloatingPicker?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!~React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderFloatingPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemStyles:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IEditingSelectedPeopleItemStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IEditingSelectedPeopleItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemStyles#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IEditingSelectedPeopleItemStylesProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IEditingSelectedPeopleItemStylesProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IEditingSelectedPeopleItemStylesProps",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IElementPosition:interface",
          "docComment": "/**\n * Do not call methods from this directly, use either positionCallout or positionElement or make another function that utilizes them. START Private functions and interfaces\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IElementPosition "
            }
          ],
          "releaseTag": "Public",
          "name": "IElementPosition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IElementPosition#alignmentEdge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignmentEdge: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignmentEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IElementPosition#elementRectangle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementRectangle: "
                },
                {
                  "kind": "Reference",
                  "text": "Rectangle",
                  "canonicalReference": "@fluentui/utilities!Rectangle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementRectangle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IElementPosition#targetEdge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetEdge: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IElementPositionInfo:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IElementPositionInfo extends "
            },
            {
              "kind": "Reference",
              "text": "IElementPosition",
              "canonicalReference": "@fluentui/react-internal!IElementPosition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IElementPositionInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IElementPositionInfo#targetRectangle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetRectangle: "
                },
                {
                  "kind": "Reference",
                  "text": "Rectangle",
                  "canonicalReference": "@fluentui/utilities!Rectangle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetRectangle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IEntityRect:interface",
          "docComment": "/**\n * An interface for the cached dimensions of entity inner host.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IEntityRect "
            }
          ],
          "releaseTag": "Public",
          "name": "IEntityRect",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEntityRect#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IEntityRect#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExpandingCard:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExpandingCard "
            }
          ],
          "releaseTag": "Public",
          "name": "IExpandingCard",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExpandingCardProps:interface",
          "docComment": "/**\n * ExpandingCard component props. {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExpandingCardProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseCardProps",
              "canonicalReference": "@fluentui/react-internal!IBaseCardProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExpandingCard",
              "canonicalReference": "@fluentui/react-internal!IExpandingCard:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IExpandingCardStyles",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyles:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IExpandingCardStyleProps",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyleProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IExpandingCardProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps#compactCardHeight:member",
              "docComment": "/**\n * Height of compact card\n *\n * @defaultvalue\n *\n * 156\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compactCardHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "compactCardHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps#expandedCardHeight:member",
              "docComment": "/**\n * Height of expanded card\n *\n * @defaultvalue\n *\n * 384\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandedCardHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandedCardHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps#mode:member",
              "docComment": "/**\n * Use to open the card in expanded format and not wait for the delay\n *\n * @defaultvalue\n *\n * ExpandingCardMode.compact\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExpandingCardMode",
                  "canonicalReference": "@fluentui/react-internal!ExpandingCardMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps#onRenderCompactCard:member",
              "docComment": "/**\n * Render function to populate compact content area\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderCompactCard?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderCompactCard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardProps#onRenderExpandedCard:member",
              "docComment": "/**\n * Render function to populate expanded content area\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderExpandedCard?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderExpandedCard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExpandingCardState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExpandingCardState "
            }
          ],
          "releaseTag": "Public",
          "name": "IExpandingCardState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardState#firstFrameRendered:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "firstFrameRendered: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "firstFrameRendered",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardState#needsScroll:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "needsScroll: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "needsScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExpandingCardStyleProps:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExpandingCardStyleProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseCardStyleProps",
              "canonicalReference": "@fluentui/react-internal!IBaseCardStyleProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IExpandingCardStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyleProps#compactCardHeight:member",
              "docComment": "/**\n * Height of the compact section of the card.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compactCardHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "compactCardHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyleProps#expandedCardFirstFrameRendered:member",
              "docComment": "/**\n * Boolean flag that expanded card is in Expanded.mode === expanded && first frame was rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandedCardFirstFrameRendered?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandedCardFirstFrameRendered",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyleProps#expandedCardHeight:member",
              "docComment": "/**\n * Height of the expanded section of the card.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandedCardHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandedCardHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyleProps#needsScroll:member",
              "docComment": "/**\n * Whether the content of the expanded card overflows vertically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "needsScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "needsScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExpandingCardStyles:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExpandingCardStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseCardStyles",
              "canonicalReference": "@fluentui/react-internal!IBaseCardStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IExpandingCardStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyles#compactCard:member",
              "docComment": "/**\n * Style for the main card element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compactCard?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "compactCard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyles#expandedCard:member",
              "docComment": "/**\n * Base Style for the expanded card content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandedCard?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandedCard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExpandingCardStyles#expandedCardScroll:member",
              "docComment": "/**\n * Style for the expanded card scroll content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandedCardScroll?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandedCardScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExtendedPeoplePickerProps:interface",
          "docComment": "/**\n * {@docCategory ExtendedPeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExtendedPeoplePickerProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseExtendedPickerProps",
              "canonicalReference": "@fluentui/react-internal!IBaseExtendedPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IExtendedPeoplePickerProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface",
          "docComment": "/**\n * {@docCategory SelectedPeopleList}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExtendedPersonaProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IExtendedPersonaProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps#blockRecipientRemoval:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blockRecipientRemoval?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "blockRecipientRemoval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps#canExpand:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canExpand?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canExpand",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps#isEditing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEditing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isEditing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps#isValid:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValid: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isValid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Key",
                  "canonicalReference": "@types/react!~React.Key:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps#shouldBlockSelection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldBlockSelection?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldBlockSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFabricProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFabricProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IFabricProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#applyTheme:member",
              "docComment": "/**\n * Applies the current body background specified in the theme to the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyTheme?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "applyTheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#applyThemeToBody:member",
              "docComment": "/**\n * Applies the current body background specified in the theme to the body element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyThemeToBody?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "applyThemeToBody",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#as:member",
              "docComment": "/**\n * Overrides the root element type, defaults to `div`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "as?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementType",
                  "canonicalReference": "@types/react!~React.ElementType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "as",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#componentRef:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#dir:member",
              "docComment": "/**\n * Specifies the direction of the content. Will inject a `dir` attribute, and also ensure that the `rtl` flag of the contextual theme object is set correctly so that css registered with merge-styles can be auto flipped correctly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dir?: "
                },
                {
                  "kind": "Content",
                  "text": "'rtl' | 'ltr' | 'auto'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dir",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#styles:member",
              "docComment": "/**\n * Overrides the styles for the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFabricStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IFabricStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IFabricStyles",
                  "canonicalReference": "@fluentui/react-internal!IFabricStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricProps#theme:member",
              "docComment": "/**\n * Injected by the `styled` HOC wrapper.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFabricStyleProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFabricStyleProps extends "
            },
            {
              "kind": "Reference",
              "text": "IFabricProps",
              "canonicalReference": "@fluentui/react-internal!IFabricProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IFabricStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFabricStyles:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFabricStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IFabricStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricStyles#bodyThemed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bodyThemed: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bodyThemed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFabricStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFacepile:interface",
          "docComment": "/**\n * {@docCategory Facepile}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFacepile "
            }
          ],
          "releaseTag": "Public",
          "name": "IFacepile",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface",
          "docComment": "/**\n * {@docCategory Facepile}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFacepilePersona extends "
            },
            {
              "kind": "Reference",
              "text": "React.ButtonHTMLAttributes",
              "canonicalReference": "@types/react!~React.ButtonHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IFacepilePersona",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#allowPhoneInitials:member",
              "docComment": "/**\n * Whether initials are calculated for phone numbers and number sequences. Example: Set property to true to get initials for project names consisting of numbers only.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowPhoneInitials?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowPhoneInitials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#data:member",
              "docComment": "/**\n * Extra data - not used directly but can be handy for passing additional data to custom event handlers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#imageInitials:member",
              "docComment": "/**\n * The user's initials to display in the image area when there is no image.\n *\n * @defaultvalue\n *\n * [Derived from personaName]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageInitials?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageInitials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#imageUrl:member",
              "docComment": "/**\n * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#initialsColor:member",
              "docComment": "/**\n * The background color when the user's initials are displayed.\n *\n * @defaultvalue\n *\n * [Derived from personaName]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialsColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaInitialsColor",
                  "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initialsColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#keytipProps:member",
              "docComment": "/**\n * Optional keytip for this button that is only added when 'onClick' is defined for the persona\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#onClick:member",
              "docComment": "/**\n * If provided, persona will be rendered with cursor:pointer and the handler will be called on click.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, persona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#onMouseMove:member",
              "docComment": "/**\n * If provided, the handler will be called on mouse move.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseMove?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, persona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseMove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#onMouseOut:member",
              "docComment": "/**\n * If provided, the handler will be called when mouse moves out of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onMouseOut?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, persona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onMouseOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepilePersona#personaName:member",
              "docComment": "/**\n * Name of the person.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personaName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFacepileProps:interface",
          "docComment": "/**\n * {@docCategory Facepile}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFacepileProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FacepileBase",
              "canonicalReference": "@fluentui/react-internal!FacepileBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IFacepileProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#addButtonProps:member",
              "docComment": "/**\n * Button properties for the add face button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#ariaDescription:member",
              "docComment": "/**\n * ARIA label for persona list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescription?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#ariaLabel:member",
              "docComment": "/**\n * Defines the aria label that the screen readers use when focus goes on a list of personas.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#chevronButtonProps:member",
              "docComment": "/**\n * Deprecated at v0.70, use `overflowButtonProps` instead.\n *\n * @deprecated\n *\n * Use `overflowButtonProps` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chevronButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "chevronButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Facepile\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IFacepile interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFacepile",
                  "canonicalReference": "@fluentui/react-internal!IFacepile:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#getPersonaProps:member",
              "docComment": "/**\n * Method to access properties on the underlying Persona control\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPersonaProps?: "
                },
                {
                  "kind": "Content",
                  "text": "(persona: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaSharedProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getPersonaProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#maxDisplayablePersonas:member",
              "docComment": "/**\n * Maximum number of personas to show\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDisplayablePersonas?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxDisplayablePersonas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#onRenderPersona:member",
              "docComment": "/**\n * Optional custom renderer for the persona, gets called when there is one persona in personas array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPersona?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPersona",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#onRenderPersonaCoin:member",
              "docComment": "/**\n * Optional custom renderer for the persona coins, gets called when there are multiple persona in personas array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPersonaCoin?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPersonaCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#overflowButtonProps:member",
              "docComment": "/**\n * Properties for the overflow icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#overflowButtonType:member",
              "docComment": "/**\n * Type of overflow icon to use\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButtonType?: "
                },
                {
                  "kind": "Reference",
                  "text": "OverflowButtonType",
                  "canonicalReference": "@fluentui/react-internal!OverflowButtonType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButtonType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#overflowPersonas:member",
              "docComment": "/**\n * Personas to place in the overflow\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowPersonas?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowPersonas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#personas:member",
              "docComment": "/**\n * Array of IPersonaProps that define each Persona.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personas: "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepilePersona",
                  "canonicalReference": "@fluentui/react-internal!IFacepilePersona:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#personaSize:member",
              "docComment": "/**\n * Size to display the personas\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaSize?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaSize",
                  "canonicalReference": "@fluentui/react-internal!PersonaSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personaSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#showAddButton:member",
              "docComment": "/**\n * Show add person button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showAddButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showAddButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFacepileStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IFacepileStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IFacepileStyles",
                  "canonicalReference": "@fluentui/react-internal!IFacepileStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFacepileStyleProps:interface",
          "docComment": "/**\n * {@docCategory Facepile}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFacepileStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IFacepileStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyleProps#spacingAroundItemButton:member",
              "docComment": "/**\n * Pixel value for spacing around button. Number value set in pixels\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spacingAroundItemButton?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "spacingAroundItemButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFacepileStyles:interface",
          "docComment": "/**\n * {@docCategory Facepile}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFacepileStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IFacepileStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#addButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#descriptiveOverflowButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descriptiveOverflowButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "descriptiveOverflowButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#itemButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#itemContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#member:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "member: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "member",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#members:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "members: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "members",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#overflowButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#overflowInitialsIcon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowInitialsIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowInitialsIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFacepileStyles#screenReaderOnly:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderOnly: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFocusTrapCalloutProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFocusTrapCalloutProps extends "
            },
            {
              "kind": "Reference",
              "text": "ICalloutProps",
              "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IFocusTrapCalloutProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapCalloutProps#focusTrapProps:member",
              "docComment": "/**\n * Optional props to be passed on to FocusTrapZone\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFocusTrapZoneProps",
                  "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusTrapProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFocusTrapZone:interface",
          "docComment": "/**\n * {@docCategory FocusTrapZone}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFocusTrapZone "
            }
          ],
          "releaseTag": "Public",
          "name": "IFocusTrapZone",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZone#focus:member",
              "docComment": "/**\n * Sets focus to a descendant in the Trap Zone. See firstFocusableSelector and focusPreviouslyFocusedInnerElement for details.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps:interface",
          "docComment": "/**\n * {@docCategory FocusTrapZone}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFocusTrapZoneProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IFocusTrapZoneProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#ariaLabelledBy:member",
              "docComment": "/**\n * Sets the aria-labelledby attribute.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IFocusTrapZone interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IFocusTrapZone",
                  "canonicalReference": "@fluentui/react-internal!IFocusTrapZone:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#disabled:member",
              "docComment": "/**\n * Whether to disable the FocusTrapZone's focus trapping behavior.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#disableFirstFocus:member",
              "docComment": "/**\n * Do not put focus onto the first element inside the focus trap zone.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableFirstFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disableFirstFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#elementToFocusOnDismiss:member",
              "docComment": "/**\n * Sets the element to focus on when exiting the FocusTrapZone.\n *\n * @defaultvalue\n *\n * The `element.target` that triggered the FTZ.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementToFocusOnDismiss?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementToFocusOnDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#enableAriaHiddenSiblings:member",
              "docComment": "/**\n * Puts aria-hidden=true on all non-ancestors of the current element, for screen readers. This is an experimental feature that will be graduated to default behavior after testing. This flag will be removed with the next major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableAriaHiddenSiblings?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableAriaHiddenSiblings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#firstFocusableSelector:member",
              "docComment": "/**\n * Class name (not actual selector) for first focusable item. Do not append a dot. Only applies if `focusPreviouslyFocusedInnerElement` is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "firstFocusableSelector?: "
                },
                {
                  "kind": "Content",
                  "text": "string | (() => string)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "firstFocusableSelector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#focusPreviouslyFocusedInnerElement:member",
              "docComment": "/**\n * Specifies which descendant element to focus when `focus()` is called. If false, use the first focusable descendant, filtered by the `firstFocusableSelector` property if present. If true, use the element that was focused when the trap zone last had a focused descendant (or fall back to the first focusable descendant if the trap zone has never been focused).\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusPreviouslyFocusedInnerElement?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusPreviouslyFocusedInnerElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#forceFocusInsideTrap:member",
              "docComment": "/**\n * Whether the focus trap zone should force focus to stay inside of it.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceFocusInsideTrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceFocusInsideTrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#ignoreExternalFocusing:member",
              "docComment": "/**\n * If false (the default), the trap zone will restore focus to the element which activated it once the trap zone is unmounted or disabled. Set to true to disable this behavior.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreExternalFocusing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreExternalFocusing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps#isClickableOutsideFocusTrap:member",
              "docComment": "/**\n * Whether clicks are allowed outside this FocusTrapZone.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isClickableOutsideFocusTrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isClickableOutsideFocusTrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IFontIconProps:interface",
          "docComment": "/**\n * Props for a basic icon component which only supports font glyphs and can't be targeted by customizations. {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFontIconProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IFontIconProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFontIconProps#className:member",
              "docComment": "/**\n * Custom class to style the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IFontIconProps#iconName:member",
              "docComment": "/**\n * The name of the icon to use from the icon font. If string is empty, a placeholder icon will be rendered the same width as an icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IGap:interface",
          "docComment": "/**\n * Gap element interface {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IGap extends "
            },
            {
              "kind": "Reference",
              "text": "IShimmerElement",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IGap",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IGap#height:member",
              "docComment": "/**\n * Sets the height of the shimmer gap in pixels.\n *\n * @defaultvalue\n *\n * 16px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IGap#width:member",
              "docComment": "/**\n * Gap width value.\n *\n * @defaultvalue\n *\n * 10px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IGenericItem:interface",
          "docComment": "/**\n * {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IGenericItem "
            }
          ],
          "releaseTag": "Public",
          "name": "IGenericItem",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IGenericItem#imageInitials:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageInitials: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageInitials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IGenericItem#primaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IGenericItem#ValidationState:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ValidationState: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidationState",
                  "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ValidationState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHoverCard:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHoverCard "
            }
          ],
          "releaseTag": "Public",
          "name": "IHoverCard",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCard#dismiss:member",
              "docComment": "/**\n * Public `dismiss` method to be used through `componentRef` of the HoverCard. Boolean argument controls if the dismiss happens with a timeout delay.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "(withTimeOut?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHoverCardProps:interface",
          "docComment": "/**\n * HoverCard component props. {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHoverCardProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IHoverCardProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#cardDismissDelay:member",
              "docComment": "/**\n * Length of card dismiss delay. A min number is necessary for pointer to hop between target and card\n *\n * @defaultvalue\n *\n * 100\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cardDismissDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cardDismissDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#cardOpenDelay:member",
              "docComment": "/**\n * Length of compact card delay\n *\n * @defaultvalue\n *\n * 500\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cardOpenDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cardOpenDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the HoverCard root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IHoverCard",
                  "canonicalReference": "@fluentui/react-internal!IHoverCard:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#eventListenerTarget:member",
              "docComment": "/**\n * This prop is to separate the target to anchor hover card from the target to attach event listener. If set, this prop separates the target to anchor the hover card from the target to attach the event listener. When no `eventListenerTarget` given, HoverCard will use `target` prop or its root to set event listener.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventListenerTarget?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventListenerTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#expandedCardOpenDelay:member",
              "docComment": "/**\n * Time in ms when expanded card should open after compact card\n *\n * @defaultvalue\n *\n * 1500\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandedCardOpenDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandedCardOpenDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#expandingCardProps:member",
              "docComment": "/**\n * Additional ExpandingCard props to pass through HoverCard like renderers, target. gapSpace etc. Used along with 'type' prop set to HoverCardType.expanding. Reference detail properties in ICardProps and IExpandingCardProps.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandingCardProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IExpandingCardProps",
                  "canonicalReference": "@fluentui/react-internal!IExpandingCardProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandingCardProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#instantOpenOnClick:member",
              "docComment": "/**\n * Enables instant open of the full card upon click\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "instantOpenOnClick?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "instantOpenOnClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#onCardExpand:member",
              "docComment": "/**\n * Callback when visible card is expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCardExpand?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCardExpand",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#onCardHide:member",
              "docComment": "/**\n * Callback when card hides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCardHide?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCardHide",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#onCardVisible:member",
              "docComment": "/**\n * Callback when card becomes visible\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCardVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCardVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#openHotKey:member",
              "docComment": "/**\n * HotKey used for opening the HoverCard when tabbed to target.\n *\n * @defaultvalue\n *\n * 'KeyCodes.c'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openHotKey?: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyCodes",
                  "canonicalReference": "@fluentui/utilities!KeyCodes:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openHotKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#plainCardProps:member",
              "docComment": "/**\n * Additional PlainCard props to pass through HoverCard like renderers, target, gapSpace etc. Used along with 'type' prop set to HoverCardType.plain. See for more details ICardProps and IPlainCardProps interfaces.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "plainCardProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPlainCardProps",
                  "canonicalReference": "@fluentui/react-internal!IPlainCardProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "plainCardProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#setAriaDescribedBy:member",
              "docComment": "/**\n * Whether or not to mark the container as described by the hover card. If not specified, the caller should mark as element as described by the hover card id.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAriaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setAriaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#setInitialFocus:member",
              "docComment": "/**\n * Set to true to set focus on the first focusable element in the card. Works in pair with the 'trapFocus' prop.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInitialFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setInitialFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#shouldBlockHoverCard:member",
              "docComment": "/**\n * Should block hover card or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldBlockHoverCard?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldBlockHoverCard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#sticky:member",
              "docComment": "/**\n * If true disables Card dismiss upon mouse leave, so that card sticks around.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sticky?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sticky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#styles:member",
              "docComment": "/**\n * Custom styles for this component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IHoverCardStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IHoverCardStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IHoverCardStyles",
                  "canonicalReference": "@fluentui/react-internal!IHoverCardStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#target:member",
              "docComment": "/**\n * Optional target element to tag hover card on. If not provided and using HoverCard as a wrapper, don't set the 'data-is-focusable=true' attribute to the root of the wrapped child. If no target is given, HoverCard will use its root as a target and become the focusable element with a focus listener attached to it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#theme:member",
              "docComment": "/**\n * Theme provided by higher order component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#trapFocus:member",
              "docComment": "/**\n * Set to true if you want to render the content of the HoverCard in a FocusTrapZone for accessibility reasons. Optionally 'setInitialFocus' prop can be set to true to move focus inside the FocusTrapZone.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trapFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "trapFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardProps#type:member",
              "docComment": "/**\n * Type of the hover card to render.\n *\n * @defaultvalue\n *\n * HoverCardType.expanding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "HoverCardType",
                  "canonicalReference": "@fluentui/react-internal!HoverCardType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHoverCardState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHoverCardState "
            }
          ],
          "releaseTag": "Public",
          "name": "IHoverCardState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardState#isHoverCardVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isHoverCardVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isHoverCardVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardState#mode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExpandingCardMode",
                  "canonicalReference": "@fluentui/react-internal!ExpandingCardMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardState#openMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "OpenCardMode",
                  "canonicalReference": "@fluentui/react-internal!OpenCardMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHoverCardStyleProps:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHoverCardStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IHoverCardStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardStyleProps#className:member",
              "docComment": "/**\n * Optional className(s) for the host div of HoverCard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHoverCardStyles:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHoverCardStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IHoverCardStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHoverCardStyles#host:member",
              "docComment": "/**\n * Style for the host element in the default enabled, non-toggled state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "host?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "host",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHSL:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHSL "
            }
          ],
          "releaseTag": "Public",
          "name": "IHSL",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHSL#h:member",
              "docComment": "/**\n * Hue, range 0-359.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "h: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "h",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHSL#l:member",
              "docComment": "/**\n * Lightness, range 0-100.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "l: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "l",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHSL#s:member",
              "docComment": "/**\n * Saturation, range 0-100.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "s: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "s",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IHSV:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IHSV "
            }
          ],
          "releaseTag": "Public",
          "name": "IHSV",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHSV#h:member",
              "docComment": "/**\n * Hue, range 0-359.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "h: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "h",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHSV#s:member",
              "docComment": "/**\n * Saturation, range 0-100.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "s: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "s",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IHSV#v:member",
              "docComment": "/**\n * Value, range 0-100.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "v: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "v",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IIconContent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IIconContent "
            }
          ],
          "releaseTag": "Public",
          "name": "IIconContent",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconContent#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconContent#fontFamily:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontFamily?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontFamily",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconContent#iconClassName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IIconProps:interface",
          "docComment": "/**\n * {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IIconProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseProps",
              "canonicalReference": "@fluentui/utilities!IBaseProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IIconProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#ariaLabel:member",
              "docComment": "/**\n * The aria label of the icon for the benefit of screen readers.\n *\n * @deprecated\n *\n * Use the native prop `aria-label`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#iconName:member",
              "docComment": "/**\n * The name of the icon to use from the icon font. If string is empty, a placeholder icon will be rendered the same width as an icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#iconType:member",
              "docComment": "/**\n * The type of icon to render (image or icon font).\n *\n * @deprecated\n *\n * Inferred based on the presence of `imageProps`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconType?: "
                },
                {
                  "kind": "Reference",
                  "text": "IconType",
                  "canonicalReference": "@fluentui/react-internal!IconType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#imageErrorAs:member",
              "docComment": "/**\n * If rendering an image icon, this component will be rendered in the event that loading the image fails.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageErrorAs?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!~React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IImageProps",
                  "canonicalReference": "@fluentui/react-internal!IImageProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageErrorAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#imageProps:member",
              "docComment": "/**\n * If rendering an image icon, these props will be passed to the Image component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IImageProps",
                  "canonicalReference": "@fluentui/react-internal!IImageProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#styles:member",
              "docComment": "/**\n * Gets the styles for an Icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IIconStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IIconStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IIconStyles",
                  "canonicalReference": "@fluentui/react-internal!IIconStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IIconState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IIconState "
            }
          ],
          "releaseTag": "Public",
          "name": "IIconState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconState#imageLoadError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageLoadError: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageLoadError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IIconStyleProps:interface",
          "docComment": "/**\n * {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IIconStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IIconStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyleProps#iconClassName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyleProps#isImage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isImage: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isImage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyleProps#isPlaceholder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPlaceholder: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isPlaceholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyleProps#styles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IIconStyles",
                  "canonicalReference": "@fluentui/react-internal!IIconStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IIconStyles:interface",
          "docComment": "/**\n * {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IIconStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IIconStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyles#imageContainer:member",
              "docComment": "/**\n * Deprecated. Use `root`.\n *\n * @deprecated\n *\n * Use `root`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IIconStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IImage:interface",
          "docComment": "/**\n * {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImage "
            }
          ],
          "releaseTag": "Public",
          "name": "IImage",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IImageIconProps:interface",
          "docComment": "/**\n * Props for a basic image icon component which doesn't directly provide image load error handling and can't be targeted by customizations. {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImageIconProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IImageIconProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageIconProps#className:member",
              "docComment": "/**\n * Custom class to style the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageIconProps#imageProps:member",
              "docComment": "/**\n * Props passed to the Image component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IImageProps",
                  "canonicalReference": "@fluentui/react-internal!IImageProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IImageProps:interface",
          "docComment": "/**\n * {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImageProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ImgHTMLAttributes",
              "canonicalReference": "@types/react!~React.ImgHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLImageElement",
              "canonicalReference": "!HTMLImageElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLImageElement",
              "canonicalReference": "!HTMLImageElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IImageProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Component\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#coverStyle:member",
              "docComment": "/**\n * Specifies the cover style to be used for this image. If not specified, this will be dynamically calculated based on the aspect ratio for the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coverStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageCoverStyle",
                  "canonicalReference": "@fluentui/react-internal!ImageCoverStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coverStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#errorSrc:member",
              "docComment": "/**\n * Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead and re-render the Image with a difference src.\n *\n * @deprecated\n *\n * Use `onLoadingStateChange` instead and re-render the Image with a difference src.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorSrc?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "errorSrc",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#imageFit:member",
              "docComment": "/**\n * Used to determine how the image is scaled and cropped to fit the frame.\n *\n * @defaultvalue\n *\n * If both dimensions are provided, then the image is fit using ImageFit.scale. Otherwise, the image won't be scaled or cropped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageFit?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageFit",
                  "canonicalReference": "@fluentui/react-internal!ImageFit:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#maximizeFrame:member",
              "docComment": "/**\n * If true, the image frame will expand to fill its parent container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximizeFrame?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maximizeFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#onLoadingStateChange:member",
              "docComment": "/**\n * Optional callback method for when the image load state has changed. The 'loadState' parameter indicates the current state of the Image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLoadingStateChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(loadState: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageLoadState",
                  "canonicalReference": "@fluentui/react-internal!ImageLoadState:enum"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLoadingStateChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#shouldFadeIn:member",
              "docComment": "/**\n * If true, fades the image in when loaded.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldFadeIn?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFadeIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#shouldStartVisible:member",
              "docComment": "/**\n * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables shouldFadeIn.\n *\n * @defaultvalue\n *\n * false;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldStartVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldStartVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IImageStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IImageStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IImageStyles",
                  "canonicalReference": "@fluentui/react-internal!IImageStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IImageState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImageState "
            }
          ],
          "releaseTag": "Public",
          "name": "IImageState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageState#loadState:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadState?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageLoadState",
                  "canonicalReference": "@fluentui/react-internal!ImageLoadState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IImageStyleProps:interface",
          "docComment": "/**\n * {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImageStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IImageStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#height:member",
              "docComment": "/**\n * Image height value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isCenter:member",
              "docComment": "/**\n * ImageFit booleans for center, cover, contain, centerContain, centerCover, none\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCenter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCenter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isCenterContain:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCenterContain?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCenterContain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isCenterCover:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCenterCover?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCenterCover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isContain:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isContain?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isContain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isCover:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCover?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isError:member",
              "docComment": "/**\n * if true image load is in error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isError?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isLandscape:member",
              "docComment": "/**\n * If true the image is coverStyle landscape instead of portrait\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLandscape?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLandscape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isLoaded:member",
              "docComment": "/**\n * If true, the image is loaded\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLoaded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isNone:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNone?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isNone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#isNotImageFit:member",
              "docComment": "/**\n * if true, imageFit is undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotImageFit?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isNotImageFit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#maximizeFrame:member",
              "docComment": "/**\n * If true, the image frame will expand to fill its parent container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximizeFrame?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maximizeFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#shouldFadeIn:member",
              "docComment": "/**\n * If true, fades the image in when loaded.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldFadeIn?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFadeIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#shouldStartVisible:member",
              "docComment": "/**\n * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables shouldFadeIn.\n *\n * @defaultvalue\n *\n * false;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldStartVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldStartVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyleProps#width:member",
              "docComment": "/**\n * Image width value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IImageStyles:interface",
          "docComment": "/**\n * {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImageStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IImageStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyles#image:member",
              "docComment": "/**\n * Style set for the img element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "image: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "image",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IImageStyles#root:member",
              "docComment": "/**\n * Style set for the root div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IInputProps:interface",
          "docComment": "/**\n * Pickers' input props interface {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IInputProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.InputHTMLAttributes",
              "canonicalReference": "@types/react!~React.InputHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IInputProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IInputProps#\"aria-label\":member",
              "docComment": "/**\n * Screen reader label to apply to an input element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "'aria-label'?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "\"aria-label\"",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IInputProps#defaultVisibleValue:member",
              "docComment": "/**\n * The default value to be visible when the autofill first created. This is different than placeholder text because the placeholder text will disappear and re-appear. This text persists until deleted or changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultVisibleValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultVisibleValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfig#keytips:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytips: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipConfigItem",
                  "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytips",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipConfigItem "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipConfigItem",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem#children:member",
              "docComment": "/**\n * Children keytips of this keytip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipConfigItem",
                  "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem#content:member",
              "docComment": "/**\n * Content for the keytip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem#id:member",
              "docComment": "/**\n * Identifier for the keytip, to be used to access in the configMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem#optionalProps:member",
              "docComment": "/**\n * Optional props in IKeytipProps\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionalProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "optionalProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigItem#sequence:member",
              "docComment": "/**\n * Key Sequence for this keytip only If sequence is not defined it will be derived from the content string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sequence?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipConfigMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipConfigMap "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipConfigMap",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipConfigMap:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipDataProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipDataProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipDataProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipDataProps#ariaDescribedBy:member",
              "docComment": "/**\n * String to add to the aria-describedby generated by this KeytipData It will prepend this string to the generated aria-describedby property\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipDataProps#disabled:member",
              "docComment": "/**\n * T/F if this keytip should be disabled upon creation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipDataProps#keytipProps:member",
              "docComment": "/**\n * IKeytipProps to create from this KeytipData If no keytipProps are defined, a keytip won't be registered\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipLayer:interface",
          "docComment": "/**\n * {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipLayer "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipLayer",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps:interface",
          "docComment": "/**\n * {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipLayerProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IKeytipLayer",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayer:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipLayerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the KeytipLayer component. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipLayer",
                  "canonicalReference": "@fluentui/react-internal!IKeytipLayer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#content:member",
              "docComment": "/**\n * String to put inside the layer to be used for the aria-describedby for the component with the keytip Should be one of the starting sequences\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#keytipExitSequences:member",
              "docComment": "/**\n * List of key sequences that will exit keytips mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipExitSequences?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipTransitionKey",
                  "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipExitSequences",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#keytipReturnSequences:member",
              "docComment": "/**\n * List of key sequences that execute the return functionality in keytips (going back to the previous level of keytips)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipReturnSequences?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipTransitionKey",
                  "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipReturnSequences",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#keytipStartSequences:member",
              "docComment": "/**\n * List of key sequences that will start keytips mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipStartSequences?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipTransitionKey",
                  "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipStartSequences",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#onEnterKeytipMode:member",
              "docComment": "/**\n * Callback function triggered when keytip mode is entered\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEnterKeytipMode?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onEnterKeytipMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#onExitKeytipMode:member",
              "docComment": "/**\n * Callback function triggered when keytip mode is exited. ev is the Mouse or Keyboard Event that triggered the exit, if any.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onExitKeytipMode?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExitKeytipMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps#styles:member",
              "docComment": "/**\n * (Optional) Call to provide customized styling.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipLayerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipLayerStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipLayerStyles",
                  "canonicalReference": "@fluentui/react-internal!IKeytipLayerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipLayerState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipLayerState "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipLayerState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerState#inKeytipMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inKeytipMode: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inKeytipMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerState#keytips:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytips: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytips",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerState#visibleKeytips:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visibleKeytips: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visibleKeytips",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipLayerStyleProps:interface",
          "docComment": "/**\n * {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipLayerStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipLayerStyleProps",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipLayerStyles:interface",
          "docComment": "/**\n * {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipLayerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipLayerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerStyles#innerContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "innerContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface",
          "docComment": "/**\n * {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#calloutProps:member",
              "docComment": "/**\n * ICalloutProps to pass to the callout element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#content:member",
              "docComment": "/**\n * Content to put inside the keytip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#disabled:member",
              "docComment": "/**\n * T/F if the corresponding control for this keytip is disabled\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#hasDynamicChildren:member",
              "docComment": "/**\n * Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on keytip activation). Common cases are a Pivot or Modal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasDynamicChildren?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasDynamicChildren",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#hasMenu:member",
              "docComment": "/**\n * Whether or not this keytip belongs to a component that has a menu Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#keySequences:member",
              "docComment": "/**\n * Array of KeySequences which is the full key sequence to trigger this keytip Should not include initial 'start' key sequence\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keySequences: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keySequences",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#offset:member",
              "docComment": "/**\n * Offset x and y for the keytip, added from the top-left corner By default the keytip will be anchored to the bottom-center of the element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offset?: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@fluentui/utilities!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#onExecute:member",
              "docComment": "/**\n * Function to call when this keytip is activated. 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'. 'target' is the DOM element marked with 'data-ktp-target'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onExecute?: "
                },
                {
                  "kind": "Content",
                  "text": "(executeTarget: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null, target: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExecute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#onReturn:member",
              "docComment": "/**\n * Function to call when the keytip is the currentKeytip and a return sequence is pressed. 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'. 'target' is the DOM element marked with 'data-ktp-target'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onReturn?: "
                },
                {
                  "kind": "Content",
                  "text": "(executeTarget: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null, target: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onReturn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#overflowSetSequence:member",
              "docComment": "/**\n * Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowSetSequence?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowSetSequence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#styles:member",
              "docComment": "/**\n * Optional styles for the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipStyles",
                  "canonicalReference": "@fluentui/react-internal!IKeytipStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#theme:member",
              "docComment": "/**\n * Theme for the component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps#visible:member",
              "docComment": "/**\n * T/F if the keytip is visible\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipStyleProps:interface",
          "docComment": "/**\n * Props to style Keytip component {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipStyleProps#disabled:member",
              "docComment": "/**\n * Whether the keytip is disabled or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipStyleProps#theme:member",
              "docComment": "/**\n * The theme for the keytip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipStyleProps#visible:member",
              "docComment": "/**\n * T/F if the keytip is visible\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipStyles:interface",
          "docComment": "/**\n * {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipStyles#container:member",
              "docComment": "/**\n * Style for the div container surrounding the keytip content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "container: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "container",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipStyles#root:member",
              "docComment": "/**\n * Style for the keytip content element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IKeytipTransitionKey "
            }
          ],
          "releaseTag": "Public",
          "name": "IKeytipTransitionKey",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey#modifierKeys:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modifierKeys?: "
                },
                {
                  "kind": "Reference",
                  "text": "KeytipTransitionModifier",
                  "canonicalReference": "@fluentui/react-internal!KeytipTransitionModifier:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "modifierKeys",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILabel:interface",
          "docComment": "/**\n * {@docCategory Label}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILabel "
            }
          ],
          "releaseTag": "Public",
          "name": "ILabel",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILabelProps:interface",
          "docComment": "/**\n * {@docCategory Label}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILabelProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.LabelHTMLAttributes",
              "canonicalReference": "@types/react!~React.LabelHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLLabelElement",
              "canonicalReference": "!HTMLLabelElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ILabelProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelProps#as:member",
              "docComment": "/**\n * Render the root element as another type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "as?: "
                },
                {
                  "kind": "Reference",
                  "text": "IComponentAs",
                  "canonicalReference": "@fluentui/utilities!IComponentAs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "React.AllHTMLAttributes",
                  "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "as",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ILabel interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ILabel",
                  "canonicalReference": "@fluentui/react-internal!ILabel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelProps#disabled:member",
              "docComment": "/**\n * Renders the label as disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelProps#required:member",
              "docComment": "/**\n * Whether the associated form field is required or not\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelProps#styles:member",
              "docComment": "/**\n * Styles for the label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ILabelStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ILabelStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ILabelStyles",
                  "canonicalReference": "@fluentui/react-internal!ILabelStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILabelStyleProps:interface",
          "docComment": "/**\n * {@docCategory Label}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILabelStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ILabelStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelStyleProps#disabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelStyleProps#required:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILabelStyles:interface",
          "docComment": "/**\n * {@docCategory Label}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILabelStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ILabelStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILabelStyles#root:member",
              "docComment": "/**\n * Styles for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILayer:interface",
          "docComment": "/**\n * {@docCategory Layer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILayer "
            }
          ],
          "releaseTag": "Public",
          "name": "ILayer",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILayerHost:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILayerHost "
            }
          ],
          "releaseTag": "Public",
          "name": "ILayerHost",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILayerHostProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILayerHostProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ILayerHostProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerHostProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ILayerHost interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ILayerHost",
                  "canonicalReference": "@fluentui/react-internal!ILayerHost:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerHostProps#id:member",
              "docComment": "/**\n * Defines the id for the layer host that Layers can target (using the hostId property.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILayerProps:interface",
          "docComment": "/**\n * {@docCategory Layer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILayerProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ILayerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Layer\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ILayer interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ILayer",
                  "canonicalReference": "@fluentui/react-internal!ILayer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#eventBubblingEnabled:member",
              "docComment": "/**\n * When enabled, Layer allows events to bubble up from Layer content. Traditionally Layer has not had this behavior. This prop preserves backwards compatibility by default while allowing users to opt in to the new event bubbling functionality.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventBubblingEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "eventBubblingEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#hostId:member",
              "docComment": "/**\n * The optional id property provided on a LayerHost that this Layer should render within. The LayerHost does not need to be immediately available but once has been rendered, and if missing, we'll avoid trying to render the Layer content until the host is available. If an id is not provided, we will render the Layer content in a fixed position element rendered at the end of the document.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hostId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hostId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#insertFirst:member",
              "docComment": "/**\n * Whether the layer should be added as the first child of the host. If true, the layer will be inserted as the first child of the host By default, the layer will be appended at the end to the host\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "insertFirst?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "insertFirst",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#onLayerDidMount:member",
              "docComment": "/**\n * Callback for when the layer is mounted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerDidMount?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerDidMount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#onLayerMounted:member",
              "docComment": "/**\n * Callback for when the layer is mounted.\n *\n * @deprecated\n *\n * Use onLayerDidMount.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerMounted?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerMounted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#onLayerWillUnmount:member",
              "docComment": "/**\n * Callback for when the layer is unmounted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerWillUnmount?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerWillUnmount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ILayerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ILayerStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ILayerStyles",
                  "canonicalReference": "@fluentui/react-internal!ILayerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILayerStyleProps:interface",
          "docComment": "/**\n * {@docCategory Layer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILayerStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ILayerStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerStyleProps#isNotHost:member",
              "docComment": "/**\n * Check if Host\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotHost?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isNotHost",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILayerStyles:interface",
          "docComment": "/**\n * {@docCategory Layer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILayerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ILayerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerStyles#content:member",
              "docComment": "/**\n * Style for the Fabric component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILayerStyles#root:member",
              "docComment": "/**\n * Style for the root element when fixed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ILine:interface",
          "docComment": "/**\n * Line element interface {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILine extends "
            },
            {
              "kind": "Reference",
              "text": "IShimmerElement",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ILine",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILine#height:member",
              "docComment": "/**\n * Sets the height of the shimmer line in pixels.\n *\n * @defaultvalue\n *\n * 16px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ILine#width:member",
              "docComment": "/**\n * Line width value.\n *\n * @defaultvalue\n *\n * 100%\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IList:interface",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IList "
            }
          ],
          "releaseTag": "Public",
          "name": "IList",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IList#forceUpdate:member",
              "docComment": "/**\n * Force the component to update.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceUpdate: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceUpdate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IList#getStartItemIndexInView:member",
              "docComment": "/**\n * Get the start index of the page that is currently in view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStartItemIndexInView: "
                },
                {
                  "kind": "Content",
                  "text": "() => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getStartItemIndexInView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IList#getTotalListHeight:member",
              "docComment": "/**\n * Get the current height the list and it's pages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTotalListHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "() => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getTotalListHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IList#scrollToIndex:member",
              "docComment": "/**\n * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n *\n * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n *\n * @param index - Index of item to scroll to\n *\n * @param measureItem - Optional callback to measure the height of an individual item\n *\n * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto. Note: The scrollToMode requires the measureItem callback is provided to function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToIndex: "
                },
                {
                  "kind": "Content",
                  "text": "(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollToMode",
                  "canonicalReference": "@fluentui/react-internal!ScrollToMode:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollToIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IListOnRenderRootProps:interface",
          "docComment": "/**\n * Props passed to the render override for the list root. {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IListOnRenderRootProps<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IListOnRenderRootProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderRootProps#divProps:member",
              "docComment": "/**\n * Props to apply to the list root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divProps: "
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderRootProps#pages:member",
              "docComment": "/**\n * The active pages to be rendered into the list. These will have been rendered using `onRenderPage`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderRootProps#rootRef:member",
              "docComment": "/**\n * The ref to be applied to the list root. The `List` uses this element to track scroll position and sizing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootRef: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Ref",
                  "canonicalReference": "@types/react!~React.Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rootRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderRootProps#surfaceElement:member",
              "docComment": "/**\n * The content to be rendered as the list surface element. This will have been rendered using `onRenderSurface`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "surfaceElement: "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "surfaceElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IListOnRenderSurfaceProps:interface",
          "docComment": "/**\n * Props passed to the render override for the list surface. {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IListOnRenderSurfaceProps<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IListOnRenderSurfaceProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderSurfaceProps#divProps:member",
              "docComment": "/**\n * Props to apply to the list surface element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divProps: "
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderSurfaceProps#pageElements:member",
              "docComment": "/**\n * The content to be rendered representing all active pages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageElements: "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pageElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderSurfaceProps#pages:member",
              "docComment": "/**\n * The active pages to be rendered into the list. These will have been rendered using `onRenderPage`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListOnRenderSurfaceProps#surfaceRef:member",
              "docComment": "/**\n * A ref to be applied to the surface element. The `List` uses this element to track content size and focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "surfaceRef: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Ref",
                  "canonicalReference": "@types/react!~React.Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "surfaceRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IListProps:interface",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IListProps<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "List",
              "canonicalReference": "@fluentui/react-internal!List:class"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "IListProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#className:member",
              "docComment": "/**\n * Optional classname to append to root list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IList interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IList",
                  "canonicalReference": "@fluentui/react-internal!IList:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#getItemCountForPage:member",
              "docComment": "/**\n * Method called by the list to get how many items to render per page from specified index. In general, use `getPageSpecification` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getItemCountForPage?: "
                },
                {
                  "kind": "Content",
                  "text": "(itemIndex?: number, visibleRect?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getItemCountForPage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#getKey:member",
              "docComment": "/**\n * Optional callback to get the item key, to be used on render.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getKey?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T, index?: number) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#getPageHeight:member",
              "docComment": "/**\n * Method called by the list to get the pixel height for a given page. By default, we measure the first page's height and default all other pages to that height when calculating the surface space. It is ideal to be able to adequately predict page heights in order to keep the surface space from jumping in pixels, which has been seen to cause browser performance issues. In general, use `getPageSpecification` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPageHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "(itemIndex?: number, visibleRect?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ", itemCount?: number) => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getPageHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#getPageSpecification:member",
              "docComment": "/**\n * Called by the list to get the specification for a page. Use this method to provide an allocation of items per page, as well as an estimated rendered height for the page. The list will use this to optimize virtualization.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPageSpecification?: "
                },
                {
                  "kind": "Content",
                  "text": "(itemIndex?: number, visibleRect?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "IPageSpecification",
                  "canonicalReference": "@fluentui/react-internal!IPageSpecification:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getPageSpecification",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#getPageStyle:member",
              "docComment": "/**\n * Method called by the list to derive the page style object. For spacer pages, the list will derive the height and passed in heights will be ignored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPageStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "(page: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getPageStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#ignoreScrollingState:member",
              "docComment": "/**\n * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined. This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreScrollingState?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreScrollingState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#items:member",
              "docComment": "/**\n * Items to render.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items?: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onPageAdded:member",
              "docComment": "/**\n * Optional callback for monitoring when a page is added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPageAdded?: "
                },
                {
                  "kind": "Content",
                  "text": "(page: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPageAdded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onPageRemoved:member",
              "docComment": "/**\n * Optional callback for monitoring when a page is removed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPageRemoved?: "
                },
                {
                  "kind": "Content",
                  "text": "(page: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPageRemoved",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onPagesUpdated:member",
              "docComment": "/**\n * Optional callback invoked when List rendering completed. This can be on initial mount or on re-render due to scrolling. This method will be called as a result of changes in List pages (added or removed), and after ALL the changes complete. To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n *\n * @param pages - The current array of pages in the List.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPagesUpdated?: "
                },
                {
                  "kind": "Content",
                  "text": "(pages: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPagesUpdated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onRenderCell:member",
              "docComment": "/**\n * Method to call when trying to render an item.\n *\n * @param item - The data associated with the cell that is being rendered.\n *\n * @param index - The index of the cell being rendered.\n *\n * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells are complex.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderCell?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: T, index?: number, isScrolling?: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onRenderPage:member",
              "docComment": "/**\n * Called when the List will render a page. Override this to control how cells are rendered within a page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPage?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPageProps",
                  "canonicalReference": "@fluentui/react-internal!IPageProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onRenderRoot:member",
              "docComment": "/**\n * Render override for the element at the root of the `List`. Use this to apply some final attributes or structure to the content each time the list is updated with new active pages or items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderRoot?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IListOnRenderRootProps",
                  "canonicalReference": "@fluentui/react-internal!IListOnRenderRootProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderRoot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onRenderSurface:member",
              "docComment": "/**\n * Render override for the element representing the surface of the `List`. Use this to alter the structure of the rendered content if necessary on each update.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSurface?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IListOnRenderSurfaceProps",
                  "canonicalReference": "@fluentui/react-internal!IListOnRenderSurfaceProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSurface",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#onShouldVirtualize:member",
              "docComment": "/**\n * Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default implementation will virtualize when this callback is not provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onShouldVirtualize?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IListProps",
                  "canonicalReference": "@fluentui/react-internal!IListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onShouldVirtualize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#renderCount:member",
              "docComment": "/**\n * Number of items to render. Defaults to items.length.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#renderedWindowsAhead:member",
              "docComment": "/**\n * In addition to the visible window, how many windowHeights should we render ahead.\n *\n * @defaultvalue\n *\n * 2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderedWindowsAhead?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderedWindowsAhead",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#renderedWindowsBehind:member",
              "docComment": "/**\n * In addition to the visible window, how many windowHeights should we render behind.\n *\n * @defaultvalue\n *\n * 2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderedWindowsBehind?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderedWindowsBehind",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#role:member",
              "docComment": "/**\n * The role to assign to the list root element. Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#startIndex:member",
              "docComment": "/**\n * Index in items array to start rendering from. Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "startIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#usePageCache:member",
              "docComment": "/**\n * Boolean value to enable render page caching. This is an experimental performance optimization that is off by default.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "usePageCache?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "usePageCache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListProps#version:member",
              "docComment": "/**\n * An object which can be passed in as a fresh instance to 'force update' the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version?: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IListState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IListState<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "IListState",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IListState#getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDerivedStateFromProps(nextProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IListProps",
                  "canonicalReference": "@fluentui/react-internal!IListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", previousState: "
                },
                {
                  "kind": "Reference",
                  "text": "IListState",
                  "canonicalReference": "@fluentui/react-internal!IListState:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IListState",
                  "canonicalReference": "@fluentui/react-internal!IListState:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "previousState",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListState#isScrolling:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isScrolling?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isScrolling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListState#measureVersion:member",
              "docComment": "/**\n * The last versionstamp for\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureVersion?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "measureVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IListState#pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pages?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Image:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Image: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IImageProps",
              "canonicalReference": "@fluentui/react-internal!IImageProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Image",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ImageBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ImageBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IImageProps",
              "canonicalReference": "@fluentui/react-internal!IImageProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ImageBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ImageCoverStyle:enum",
          "docComment": "/**\n * The cover style to be used on the image {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ImageCoverStyle "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageCoverStyle",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageCoverStyle.landscape:member",
              "docComment": "/**\n * The image will be shown at 100% height of container and the width will be scaled accordingly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "landscape = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "landscape",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageCoverStyle.portrait:member",
              "docComment": "/**\n * The image will be shown at 100% width of container and the height will be scaled accordingly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "portrait = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "portrait",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ImageFit:enum",
          "docComment": "/**\n * The possible methods that can be used to fit the image. {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ImageFit "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageFit",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageFit.center:member",
              "docComment": "/**\n * The image is not scaled. The image is centered and cropped within the content box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "center = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "center",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageFit.centerContain:member",
              "docComment": "/**\n * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width, but if either natural height or width are larger than the frame it will behave as ImageFit.contain.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "centerContain = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "centerContain",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageFit.centerCover:member",
              "docComment": "/**\n * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width, but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "centerCover = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "centerCover",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageFit.contain:member",
              "docComment": "/**\n * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contain = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "contain",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageFit.cover:member",
              "docComment": "/**\n * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cover = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "cover",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageFit.none:member",
              "docComment": "/**\n * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the frame will have empty space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "none = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "none",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ImageIcon:var",
          "docComment": "/**\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations. To style the icon, use `className` or reference `ms-Icon` in CSS. {@docCategory Icon}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ImageIcon: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IImageIconProps",
              "canonicalReference": "@fluentui/react-internal!IImageIconProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ImageIcon",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ImageLoadState:enum",
          "docComment": "/**\n * {@docCategory Image}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ImageLoadState "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageLoadState",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageLoadState.error:member",
              "docComment": "/**\n * An error has been encountered while loading the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "error",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageLoadState.errorLoaded:member",
              "docComment": "/**\n * Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead and re-render the Image with a difference src.\n *\n * @deprecated\n *\n * Use `onLoadingStateChange` instead and re-render the Image with a difference src.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorLoaded = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "errorLoaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageLoadState.loaded:member",
              "docComment": "/**\n * The image has been loaded successfully.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loaded = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "loaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ImageLoadState.notLoaded:member",
              "docComment": "/**\n * The image has not yet been loaded, and there is no error yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "notLoaded = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "notLoaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMarqueeSelection:interface",
          "docComment": "/**\n * {@docCategory MarqueeSelection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMarqueeSelection "
            }
          ],
          "releaseTag": "Public",
          "name": "IMarqueeSelection",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps:interface",
          "docComment": "/**\n * {@docCategory MarqueeSelection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMarqueeSelectionProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IMarqueeSelectionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the MarqueeSelection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IMarqueeSelection interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMarqueeSelection",
                  "canonicalReference": "@fluentui/react-internal!IMarqueeSelection:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#isDraggingConstrainedToRoot:member",
              "docComment": "/**\n * Optional flag to restrict the drag rect to the root element, instead of allowing the drag rect to start outside of the root element boundaries.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDraggingConstrainedToRoot?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDraggingConstrainedToRoot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#isEnabled:member",
              "docComment": "/**\n * Optional flag to control the enabled state of marquee selection. This allows you to render it and have events all ready to go, but conditionally disable it. That way transitioning between enabled/disabled generate no difference in the DOM.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#onShouldStartSelection:member",
              "docComment": "/**\n * Optional callback that is called, when the mouse down event occurs, in order to determine if we should start a marquee selection. If true is returned, we will cancel the mousedown event to prevent upstream mousedown handlers from executing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onShouldStartSelection?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onShouldStartSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#rootProps:member",
              "docComment": "/**\n * Optional props to mix into the root DIV element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rootProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#selection:member",
              "docComment": "/**\n * The selection object to interact with when updating selection changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selection: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelection",
                  "canonicalReference": "@fluentui/utilities!ISelection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunction",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunction:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMarqueeSelectionStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IMarqueeSelectionStyles",
                  "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyleProps:interface",
          "docComment": "/**\n * {@docCategory MarqueeSelection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMarqueeSelectionStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IMarqueeSelectionStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyles:interface",
          "docComment": "/**\n * {@docCategory MarqueeSelection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMarqueeSelectionStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IMarqueeSelectionStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyles#box:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "box?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "box",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyles#boxFill:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boxFill?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "boxFill",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyles#dragMask:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragMask?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragMask",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMaskedTextField:interface",
          "docComment": "/**\n * {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMaskedTextField extends "
            },
            {
              "kind": "Reference",
              "text": "ITextField",
              "canonicalReference": "@fluentui/react-internal!ITextField:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IMaskedTextField",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMaskedTextField#value:member",
              "docComment": "/**\n * The value of all filled format characters, or undefined if not all format characters are filled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMaskedTextFieldProps:interface",
          "docComment": "/**\n * MaskedTextField component props. {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMaskedTextFieldProps extends "
            },
            {
              "kind": "Reference",
              "text": "ITextFieldProps",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IMaskedTextFieldProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMaskedTextFieldProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IMaskedTextField interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMaskedTextField",
                  "canonicalReference": "@fluentui/react-internal!IMaskedTextField:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMaskedTextFieldProps#mask:member",
              "docComment": "/**\n * The masking string that defines the mask's behavior. A backslash will escape any character. Special format characters are: '9': [0-9] 'a': [a-zA-Z] '*': [a-zA-Z0-9]\n *\n * @example\n *\n * `Phone Number: (999) 999-9999`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mask?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mask",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMaskedTextFieldProps#maskChar:member",
              "docComment": "/**\n * The character to show in place of unfilled characters of the mask.\n *\n * @defaultvalue\n *\n * '_'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maskChar?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maskChar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMaskedTextFieldProps#maskFormat:member",
              "docComment": "/**\n * An object defining the format characters and corresponding regexp values. Default format characters: \\{ '9': /[0-9]/, 'a': /[a-zA-Z]/, '*': /[a-zA-Z0-9]/ \\}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maskFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maskFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames:interface",
          "docComment": "/**\n * @deprecated\n *\n * in favor of mergeStyles API.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMenuItemClassNames "
            }
          ],
          "releaseTag": "Public",
          "name": "IMenuItemClassNames",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#checkmarkIcon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkmarkIcon: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checkmarkIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#divider:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divider: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#icon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#item:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#label:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#linkContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkContent: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#linkContentMenu:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkContentMenu: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkContentMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#screenReaderText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#secondaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#splitContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splitContainer: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "splitContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#splitMenu:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splitMenu: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "splitMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#splitPrimary:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "splitPrimary: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "splitPrimary",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemClassNames#subMenuIcon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuIcon: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMenuItemStyles:interface",
          "docComment": "/**\n * {@docCategory ContextualMenu}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMenuItemStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IButtonStyles",
              "canonicalReference": "@fluentui/react-internal!IButtonStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IMenuItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#anchorLink:member",
              "docComment": "/**\n * Styles for a menu item that is an anchor link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anchorLink: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "anchorLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#checkmarkIcon:member",
              "docComment": "/**\n * Default style for checkmark icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkmarkIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "checkmarkIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#divider:member",
              "docComment": "/**\n * Styles for a divider item of a ContextualMenu.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divider: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#iconColor:member",
              "docComment": "/**\n * Default icon color style for known icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconColor: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#item:member",
              "docComment": "/**\n * Styles for a menu item that is an anchor link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#linkContent:member",
              "docComment": "/**\n * Styles for the content inside the button/link of the menuItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMenuItemStyles#subMenuIcon:member",
              "docComment": "/**\n * Styles for the submenu icon of a menu item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subMenuIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subMenuIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMessageBar:interface",
          "docComment": "/**\n * {@docCategory MessageBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMessageBar "
            }
          ],
          "releaseTag": "Public",
          "name": "IMessageBar",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMessageBarProps:interface",
          "docComment": "/**\n * {@docCategory MessageBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMessageBarProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IMessageBarProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#actions:member",
              "docComment": "/**\n * The actions you want to show on the other side.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actions?: "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "actions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#ariaLabel:member",
              "docComment": "/**\n * A description of the message bar for the benefit of screen readers.\n *\n * @deprecated\n *\n * Use native prop `aria-label` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the MessageBar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMessageBar",
                  "canonicalReference": "@fluentui/react-internal!IMessageBar:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#dismissButtonAriaLabel:member",
              "docComment": "/**\n * Aria label on dismiss button if onDismiss is defined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#dismissIconProps:member",
              "docComment": "/**\n * Custom icon prop to replace the dismiss icon. If unset, default will be the Fabric Clear icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissIconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissIconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#isMultiline:member",
              "docComment": "/**\n * Determines if the message bar is multi lined. If false, and the text overflows over buttons or to another line, it is clipped.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMultiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMultiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#messageBarIconProps:member",
              "docComment": "/**\n * Custom icon prop to replace the message bar icon. If unset, default will be the icon set by messageBarType.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageBarIconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messageBarIconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#messageBarType:member",
              "docComment": "/**\n * The type of MessageBar to render.\n *\n * @defaultvalue\n *\n * MessageBarType.info\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageBarType?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageBarType",
                  "canonicalReference": "@fluentui/react-internal!MessageBarType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messageBarType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#onDismiss:member",
              "docComment": "/**\n * Whether the message bar has a dismiss button and its callback. If null, we don't show a dismiss button.\n *\n * @defaultvalue\n *\n * null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "BaseButton",
                  "canonicalReference": "@fluentui/react-internal!BaseButton:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Button",
                  "canonicalReference": "@fluentui/react-internal!Button:class"
                },
                {
                  "kind": "Content",
                  "text": ">) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#overflowButtonAriaLabel:member",
              "docComment": "/**\n * Aria label on overflow button if truncated is defined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IMessageBarStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IMessageBarStyles",
                  "canonicalReference": "@fluentui/react-internal!IMessageBarStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps#truncated:member",
              "docComment": "/**\n * Determines if the message bar text is truncated. If true, a button will render to toggle between a single line view and multiline view. This prop is for single line message bars with no buttons only in a limited space scenario.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "truncated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "truncated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps:interface",
          "docComment": "/**\n * {@docCategory MessageBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMessageBarStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IMessageBarStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#actions:member",
              "docComment": "/**\n * Whether the MessageBar contains any action elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actions?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "actions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#className:member",
              "docComment": "/**\n * Additional CSS class(es).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#expandSingleLine:member",
              "docComment": "/**\n * Whether the single line MessageBar is being expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandSingleLine?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandSingleLine",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#isMultiline:member",
              "docComment": "/**\n * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMultiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMultiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#messageBarType:member",
              "docComment": "/**\n * Type of the MessageBar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messageBarType?: "
                },
                {
                  "kind": "Reference",
                  "text": "MessageBarType",
                  "canonicalReference": "@fluentui/react-internal!MessageBarType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messageBarType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#onDismiss:member",
              "docComment": "/**\n * Whether the MessageBar contains a dismiss button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyleProps#truncated:member",
              "docComment": "/**\n * Whether the text is truncated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "truncated?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "truncated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IMessageBarStyles:interface",
          "docComment": "/**\n * {@docCategory MessageBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMessageBarStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IMessageBarStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#actions:member",
              "docComment": "/**\n * Style set for the optional element containing the action elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actions?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "actions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#content:member",
              "docComment": "/**\n * Style set for the element containing the icon, text, and optional dismiss button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#dismissal:member",
              "docComment": "/**\n * Style set for the optional dismiss button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissal?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#dismissSingleLine:member",
              "docComment": "/**\n * Style set for the element containing the dismiss button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismissSingleLine?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismissSingleLine",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#expand:member",
              "docComment": "/**\n * Style set for the icon used to expand and collapse the MessageBar.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expand?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expand",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#expandSingleLine:member",
              "docComment": "/**\n * Style set for the element containing the expand icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandSingleLine?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandSingleLine",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#icon:member",
              "docComment": "/**\n * Style set for the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#iconContainer:member",
              "docComment": "/**\n * Style set for the element containing the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#innerText:member",
              "docComment": "/**\n * Style set for the text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "innerText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "innerText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#root:member",
              "docComment": "/**\n * Style set for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IMessageBarStyles#text:member",
              "docComment": "/**\n * Style set for the element containing the text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IModal:interface",
          "docComment": "/**\n * {@docCategory Modal}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IModal "
            }
          ],
          "releaseTag": "Public",
          "name": "IModal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModal#focus:member",
              "docComment": "/**\n * Sets focus on the first focusable, or configured, child in focus trap zone\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IModalProps:interface",
          "docComment": "/**\n * {@docCategory Modal}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IModalProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IAccessiblePopupProps",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IModalProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#allowTouchBodyScroll:member",
              "docComment": "/**\n * Allow body scroll on content and overlay on touch devices. Changing after mounting has no effect.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowTouchBodyScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowTouchBodyScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#children:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#className:member",
              "docComment": "/**\n * Optional class name to be added to the root class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#componentRef:member",
              "docComment": "/**\n * Optional ref to access the `IModal` interface. Use this instead of `ref` for accessing public API of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IModal",
                  "canonicalReference": "@fluentui/react-internal!IModal:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#containerClassName:member",
              "docComment": "/**\n * Optional override for container class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "containerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "containerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#dragOptions:member",
              "docComment": "/**\n * The options to make the modal draggable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dragOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "IDragOptions",
                  "canonicalReference": "@fluentui/react-internal!IDragOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dragOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#enableAriaHiddenSiblings:member",
              "docComment": "/**\n * Puts aria-hidden=true on all non-ancestors of the current modal, for screen readers. This is an experimental feature that will be graduated to default behavior after testing. This flag will be removed with the next major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableAriaHiddenSiblings?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableAriaHiddenSiblings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#isBlocking:member",
              "docComment": "/**\n * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBlocking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBlocking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#isDarkOverlay:member",
              "docComment": "/**\n * Whether the overlay is dark themed.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDarkOverlay?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDarkOverlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#isModeless:member",
              "docComment": "/**\n * Whether the dialog should be modeless (e.g. not dismiss when focusing/clicking outside of the dialog). if true: isBlocking is ignored, there will be no overlay (isDarkOverlay is ignored), isClickableOutsideFocusTrap is true, and forceFocusInsideTrap is false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isModeless?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isModeless",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#isOpen:member",
              "docComment": "/**\n * Whether the dialog is displayed.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#layerProps:member",
              "docComment": "/**\n * Defines an optional set of props to be passed through to Layer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layerProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ILayerProps",
                  "canonicalReference": "@fluentui/react-internal!ILayerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#onDismiss:member",
              "docComment": "/**\n * A callback function for when the Modal is dismissed light dismiss, before the animation completes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#onDismissed:member",
              "docComment": "/**\n * A callback function which is called after the Modal is dismissed and the animation is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismissed?: "
                },
                {
                  "kind": "Content",
                  "text": "() => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismissed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#onLayerDidMount:member",
              "docComment": "/**\n * A callback function for when the Modal content is mounted on the overlay layer\n *\n * @deprecated\n *\n * Use layerProps.onLayerDidMount instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerDidMount?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerDidMount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#overlay:member",
              "docComment": "/**\n * Defines an optional set of props to be passed through to Overlay\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlay?: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverlayProps",
                  "canonicalReference": "@fluentui/react-internal!IOverlayProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#responsiveMode:member",
              "docComment": "/**\n * The specified responsiveMode value for Modal to use.\n *\n * @defaultvalue\n *\n * ResponsiveMode.small\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "responsiveMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ResponsiveMode",
                  "canonicalReference": "@fluentui/react-internal!ResponsiveMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "responsiveMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#scrollableContentClassName:member",
              "docComment": "/**\n * Optional override for scrollable content class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollableContentClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollableContentClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IModalStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IModalStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IModalStyles",
                  "canonicalReference": "@fluentui/react-internal!IModalStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#subtitleAriaId:member",
              "docComment": "/**\n * ARIA id for the subtitle of the Modal, if any\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtitleAriaId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subtitleAriaId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#theme:member",
              "docComment": "/**\n * Theme provided by higher-order component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#titleAriaId:member",
              "docComment": "/**\n * ARIA id for the title of the Modal, if any\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "titleAriaId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "titleAriaId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalProps#topOffsetFixed:member",
              "docComment": "/**\n * Whether the modal should have top offset fixed once opened and expand from the bottom only when the content changes dynamically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topOffsetFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topOffsetFixed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IModalStyleProps:type",
          "docComment": "/**\n * {@docCategory Modal}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IModalStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IModalProps",
              "canonicalReference": "@fluentui/react-internal!IModalProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IModalProps",
              "canonicalReference": "@fluentui/react-internal!IModalProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'containerClassName' | 'scrollableContentClassName' | 'topOffsetFixed' | 'isModeless'> & {\n    isOpen?: boolean;\n    isVisible?: boolean;\n    hasBeenOpened?: boolean;\n    modalRectangleTop?: number;\n    layerClassName?: string;\n    isDefaultDragHandle?: boolean;\n    windowInnerHeight?: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IModalStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IModalStyles:interface",
          "docComment": "/**\n * {@docCategory Modal}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IModalStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IModalStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalStyles#keyboardMoveIcon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardMoveIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keyboardMoveIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalStyles#keyboardMoveIconContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardMoveIconContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keyboardMoveIconContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalStyles#layer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalStyles#main:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "main: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "main",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IModalStyles#scrollableContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollableContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollableContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INav:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INav "
            }
          ],
          "releaseTag": "Public",
          "name": "INav",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!INav#focus:member(1)",
              "docComment": "/**\n * Sets focus to the first tabbable item in the zone.\n *\n * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if focus is already in the focus zone.\n *\n * @returns True if focus could be set to an active element, false if no operation was taken.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(forceIntoFirstElement?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forceIntoFirstElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "focus"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INav#selectedKey:member",
              "docComment": "/**\n * The meta 'key' property of the currently selected NavItem of the Nav. Can return undefined if the currently selected nav item has no populated key property. Be aware that in order for Nav to properly understand which key is selected all NavItems in all groups of the Nav must have populated key properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedKey: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavButtonProps:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "IButtonProps",
              "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "INavButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavButtonProps#link:member",
              "docComment": "/**\n * (Optional) Link to be rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "link?: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "link",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavLink:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavLink "
            }
          ],
          "releaseTag": "Public",
          "name": "INavLink",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluentui/react-internal!INavLink:index(1)",
              "docComment": "/**\n * (Optional) Any additional properties to apply to the rendered links.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[propertyName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "propertyName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#ariaCurrent:member",
              "docComment": "/**\n * Aria-current token for active nav links. Must be a valid token value, and defaults to 'page'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaCurrent?: "
                },
                {
                  "kind": "Content",
                  "text": "'page' | 'step' | 'location' | 'date' | 'time' | 'true'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaCurrent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#ariaLabel:member",
              "docComment": "/**\n * Aria label for nav link. Ignored if `collapseAriaLabel` or `expandAriaLabel` is provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#automationId:member",
              "docComment": "/**\n * The name to use for functional automation tests\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "automationId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "automationId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#collapseAriaLabel:member",
              "docComment": "/**\n * ARIA label when group is collapsed and can be expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapseAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collapseAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#disabled:member",
              "docComment": "/**\n * Whether or not the link is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#expandAriaLabel:member",
              "docComment": "/**\n * ARIA label when group is collapsed and can be expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#forceAnchor:member",
              "docComment": "/**\n * (Optional) By default, any link with onClick defined will render as a button. Set this property to true to override that behavior. (Links without onClick defined will render as anchors by default.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceAnchor?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceAnchor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#icon:member",
              "docComment": "/**\n * Name of an icon to render next to the link button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#iconClassName:member",
              "docComment": "/**\n * Deprecated. Use `iconProps.className` instead.\n *\n * @deprecated\n *\n * Use `iconProps.className` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#iconProps:member",
              "docComment": "/**\n * Props for an icon to render next to the link button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#isExpanded:member",
              "docComment": "/**\n * Whether or not the link is in an expanded state\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isExpanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isExpanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#key:member",
              "docComment": "/**\n * Unique, stable key for the link, used when rendering the list of links and for tracking the currently selected link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#links:member",
              "docComment": "/**\n * Child links to this link, if any\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "links?: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "links",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#name:member",
              "docComment": "/**\n * Text to render for this link\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#onClick:member",
              "docComment": "/**\n * Callback invoked when this link is clicked. Providing this callback will cause the link to render as a button (rather than an anchor) unless forceAnchor is set to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#target:member",
              "docComment": "/**\n * Link <a> target.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#title:member",
              "docComment": "/**\n * Text for title tooltip and ARIA description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLink#url:member",
              "docComment": "/**\n * URL to navigate to for this link\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavLinkGroup:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavLinkGroup "
            }
          ],
          "releaseTag": "Public",
          "name": "INavLinkGroup",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#automationId:member",
              "docComment": "/**\n * The name to use for functional automation tests\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "automationId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "automationId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#collapseAriaLabel:member",
              "docComment": "/**\n * ARIA label when group is collapsed and can be expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapseAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collapseAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#collapseByDefault:member",
              "docComment": "/**\n * If true, the group should render collapsed by default\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collapseByDefault?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collapseByDefault",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#expandAriaLabel:member",
              "docComment": "/**\n * ARIA label when group is collapsed and can be expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#groupData:member",
              "docComment": "/**\n * (Optional) Any additional properties to apply to a group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groupData?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groupData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#links:member",
              "docComment": "/**\n * Links to render within this group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "links: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "links",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#name:member",
              "docComment": "/**\n * Text to render as the header of a group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup#onHeaderClick:member",
              "docComment": "/**\n * Callback invoked when a group header is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onHeaderClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, isCollapsing?: boolean) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onHeaderClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavProps:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavProps "
            }
          ],
          "releaseTag": "Public",
          "name": "INavProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#ariaLabel:member",
              "docComment": "/**\n * (Optional) The nav container aria label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Nav\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the INav interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "INav",
                  "canonicalReference": "@fluentui/react-internal!INav:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#expandButtonAriaLabel:member",
              "docComment": "/**\n * (Optional) The nav container aria label. The link name is prepended to this label. If not provided, the aria label will default to the link name.\n *\n * @deprecated\n *\n * - Use expandAriaLabel and collapseAriaLabel on groups instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expandButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "expandButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#groups:member",
              "docComment": "/**\n * A collection of link groups to display in the navigation bar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groups: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLinkGroup",
                  "canonicalReference": "@fluentui/react-internal!INavLinkGroup:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groups",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#initialSelectedKey:member",
              "docComment": "/**\n * (Optional) The key of the nav item initially selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialSelectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initialSelectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#isOnTop:member",
              "docComment": "/**\n * Indicates whether the navigation component renders on top of other content in the UI\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOnTop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOnTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#linkAs:member",
              "docComment": "/**\n * Render a custom link in place of the normal one. This replaces the entire button rather than simply button content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkAs?: "
                },
                {
                  "kind": "Reference",
                  "text": "IComponentAs",
                  "canonicalReference": "@fluentui/utilities!IComponentAs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "INavButtonProps",
                  "canonicalReference": "@fluentui/react-internal!INavButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#onLinkClick:member",
              "docComment": "/**\n * Function callback invoked when a link in the navigation is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLinkClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLinkClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#onLinkExpandClick:member",
              "docComment": "/**\n * Function callback invoked when the chevron on a link is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLinkExpandClick?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLinkExpandClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#onRenderGroupHeader:member",
              "docComment": "/**\n * Used to customize how content inside the group header is rendered\n *\n * @defaultvalue\n *\n * Default group header rendering\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderGroupHeader?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IRenderGroupHeaderProps",
                  "canonicalReference": "@fluentui/react-internal!IRenderGroupHeaderProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderGroupHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#onRenderLink:member",
              "docComment": "/**\n * Used to customize how content inside the link tag is rendered\n *\n * @defaultvalue\n *\n * Default link rendering\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderLink?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "INavLink",
                  "canonicalReference": "@fluentui/react-internal!INavLink:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#selectedAriaLabel:member",
              "docComment": "/**\n * (Deprecated) Use ariaCurrent on links instead\n *\n * @deprecated\n *\n * Use ariaCurrent on links instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#selectedKey:member",
              "docComment": "/**\n * (Optional) The key of the nav item selected by caller.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "INavStyleProps",
                  "canonicalReference": "@fluentui/react-internal!INavStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "INavStyles",
                  "canonicalReference": "@fluentui/react-internal!INavStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavState "
            }
          ],
          "releaseTag": "Public",
          "name": "INavState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavState#isGroupCollapsed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isGroupCollapsed: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isGroupCollapsed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavState#isLinkExpandStateChanged:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLinkExpandStateChanged?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLinkExpandStateChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavState#selectedKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavStyleProps:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "INavStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#groups:member",
              "docComment": "/**\n * Inherited from INavProps A collection of link groups to display in the navigation bar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groups: "
                },
                {
                  "kind": "Reference",
                  "text": "INavLinkGroup",
                  "canonicalReference": "@fluentui/react-internal!INavLinkGroup:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groups",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isButtonEntry:member",
              "docComment": "/**\n * is button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isButtonEntry?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isButtonEntry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isDisabled:member",
              "docComment": "/**\n * is element disabled\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDisabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDisabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isExpanded:member",
              "docComment": "/**\n * is element expanded boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isExpanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isExpanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isGroup:member",
              "docComment": "/**\n * is element a group boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isGroup?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isLink:member",
              "docComment": "/**\n * is element a link boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLink?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isOnTop:member",
              "docComment": "/**\n * is element on top boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOnTop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOnTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#isSelected:member",
              "docComment": "/**\n * is element selected boolean\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSelected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#leftPadding:member",
              "docComment": "/**\n * left padding value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leftPadding?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "leftPadding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#leftPaddingExpanded:member",
              "docComment": "/**\n * left padding when expanded value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leftPaddingExpanded?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "leftPaddingExpanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#navHeight:member",
              "docComment": "/**\n * Nav height value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "navHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "navHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#position:member",
              "docComment": "/**\n * position value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "position?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#rightPadding:member",
              "docComment": "/**\n * right padding value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rightPadding?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rightPadding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!INavStyles:interface",
          "docComment": "/**\n * {@docCategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INavStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "INavStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#chevronButton:member",
              "docComment": "/**\n * Style set for the chevron button inside the composite link and group elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chevronButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "chevronButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#chevronIcon:member",
              "docComment": "/**\n * Style set for the chevron icon inside the composite link and group elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chevronIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "chevronIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#compositeLink:member",
              "docComment": "/**\n * Style set for the composite link container div element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compositeLink: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "compositeLink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#group:member",
              "docComment": "/**\n * Style set for the group root div.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "group: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "group",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#groupContent:member",
              "docComment": "/**\n * Style set for the group content div inside group.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groupContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groupContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#link:member",
              "docComment": "/**\n * Style set for the link element extending the root style set for ActionButton component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "link: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "link",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#linkText:member",
              "docComment": "/**\n * Style set for the link text container div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "linkText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#navItem:member",
              "docComment": "/**\n * Style set for the nav links li element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "navItem: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "navItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#navItems:member",
              "docComment": "/**\n * Style set for the nav links ul element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "navItems: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "navItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!INavStyles#root:member",
              "docComment": "/**\n * Style set for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverflowSet:interface",
          "docComment": "/**\n * {@docCategory OverflowSet}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverflowSet "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverflowSet",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSet#focus:member(1)",
              "docComment": "/**\n * Sets focus to the first tabbable item in the zone.\n *\n * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if focus is already in the focus zone.\n *\n * @returns True if focus could be set to an active element, false if no operation was taken.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(forceIntoFirstElement?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forceIntoFirstElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "focus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSet#focusElement:member(1)",
              "docComment": "/**\n * Sets focus to a specific child element within the zone. This can be used in conjunction with shouldReceiveFocus to created delayed focus scenarios (like animate the scroll position to the correct location and then focus.)\n *\n * @param childElement - The child element within the zone to focus.\n *\n * @returns True if focus could be set to an active element, false if no operation was taken.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusElement(childElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "childElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "focusElement"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps:interface",
          "docComment": "/**\n * {@docCategory OverflowSet}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverflowSetItemProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverflowSetItemProps",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps:index(1)",
              "docComment": "/**\n * Any additional properties to use when custom rendering menu items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[propertyName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "propertyName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps#key:member",
              "docComment": "/**\n * Unique id to identify the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps#keytipProps:member",
              "docComment": "/**\n * Optional keytip for the overflowSetItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverflowSetProps:interface",
          "docComment": "/**\n * {@docCategory OverflowSet}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverflowSetProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverflowSetProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#className:member",
              "docComment": "/**\n * Class name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSet",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSet:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#items:member",
              "docComment": "/**\n * An array of items to be rendered by your onRenderItem function in the primary content area\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items?: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSetItemProps",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#itemSubMenuProvider:member",
              "docComment": "/**\n * Function that will take in an IOverflowSetItemProps and return the subMenu for that item. If not provided, will use 'item.subMenuProps.items' by default. This is only used if your overflow set has keytips.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemSubMenuProvider?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSetItemProps",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => any[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemSubMenuProvider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#keytipSequences:member",
              "docComment": "/**\n * Optional full keytip sequence for the overflow button, if it will have a keytip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipSequences?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipSequences",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#onRenderItem:member",
              "docComment": "/**\n * Method to call when trying to render an item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSetItemProps",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#onRenderOverflowButton:member",
              "docComment": "/**\n * Rendering method for overflow button and contextual menu. The argument to the function is the overflowItems passed in as props to this function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderOverflowButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderOverflowButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#overflowItems:member",
              "docComment": "/**\n * An array of items to be passed to overflow contextual menu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSetItemProps",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSetItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#overflowSide:member",
              "docComment": "/**\n * Controls wether or not the overflow button is placed at the start or end of the items. This gives a reversed visual behavior but maintains correct keyboard navigation.\n *\n * @defaultValue\n *\n * 'end'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowSide?: "
                },
                {
                  "kind": "Content",
                  "text": "'start' | 'end'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowSide",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#role:member",
              "docComment": "/**\n * The role for the OverflowSet.\n *\n * @defaultvalue\n *\n * 'group'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSetProps",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSetProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IOverflowSetStyles",
                  "canonicalReference": "@fluentui/react-internal!IOverflowSetStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps#vertical:member",
              "docComment": "/**\n * Change item layout direction to vertical/stacked. If role is set to `menubar`, `vertical={true}` will also add proper `aria-orientation`.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vertical?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IOverflowSetStyleProps:type",
          "docComment": "/**\n * The props needed to construct styles. This represents the simplified set of immutable things which control the class names. {@docCategory OverflowSet}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IOverflowSetStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IOverflowSetProps",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'vertical' | 'className'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IOverflowSetStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverflowSetStyles:interface",
          "docComment": "/**\n * {@docCategory OverflowSet}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverflowSetStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverflowSetStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetStyles#item:member",
              "docComment": "/**\n * The style that is layered onto each individual item in the overflow set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetStyles#overflowButton:member",
              "docComment": "/**\n * The style that is layered onto the overflow button for the overflow set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowButton?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetStyles#root:member",
              "docComment": "/**\n * The style that is layered onto the root element of OverflowSet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverlay:interface",
          "docComment": "/**\n * {@docCategory Overlay}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverlay "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverlay",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverlayProps:interface",
          "docComment": "/**\n * {@docCategory Overlay}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverlayProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverlayProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#allowTouchBodyScroll:member",
              "docComment": "/**\n * Allow body scroll on touch devices. Changing after mounting has no effect.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowTouchBodyScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowTouchBodyScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Overlay\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IOverlay",
                  "canonicalReference": "@fluentui/react-internal!IOverlay:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#isDarkThemed:member",
              "docComment": "/**\n * Whether to use the dark-themed overlay.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDarkThemed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDarkThemed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#onClick:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IOverlayStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IOverlayStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IOverlayStyles",
                  "canonicalReference": "@fluentui/react-internal!IOverlayStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverlayStyleProps:interface",
          "docComment": "/**\n * {@docCategory Overlay}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverlayStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverlayStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayStyleProps#isDark:member",
              "docComment": "/**\n * Is overlay dark themed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDark?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDark",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayStyleProps#isNone:member",
              "docComment": "/**\n * Is overlay visible\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNone?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isNone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IOverlayStyles:interface",
          "docComment": "/**\n * {@docCategory Overlay}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOverlayStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IOverlayStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IOverlayStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPage:interface",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPage<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "IPage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#isSpacer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSpacer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSpacer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#isVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#itemCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#items:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "items: "
                },
                {
                  "kind": "Content",
                  "text": "T[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "items",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#startIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "startIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style: "
                },
                {
                  "kind": "Reference",
                  "text": "React.CSSProperties",
                  "canonicalReference": "@types/react!~React.CSSProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPage#top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPageProps:interface",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPageProps<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "IPageProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPageProps#page:member",
              "docComment": "/**\n * The allocation data for the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "page: "
                },
                {
                  "kind": "Reference",
                  "text": "IPage",
                  "canonicalReference": "@fluentui/react-internal!IPage:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "page",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPageProps#role:member",
              "docComment": "/**\n * The role being assigned to the rendered page element by the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPageSpecification:interface",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPageSpecification "
            }
          ],
          "releaseTag": "Public",
          "name": "IPageSpecification",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPageSpecification#data:member",
              "docComment": "/**\n * Data to pass through to the page when rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPageSpecification#height:member",
              "docComment": "/**\n * The estimated pixel height of the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPageSpecification#itemCount:member",
              "docComment": "/**\n * The number of items to allocate to the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPageSpecification#key:member",
              "docComment": "/**\n * The key to use when creating the page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPanel:interface",
          "docComment": "/**\n * {@docCategory Panel}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPanel "
            }
          ],
          "releaseTag": "Public",
          "name": "IPanel",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanel#dismiss:member",
              "docComment": "/**\n * Forces the panel to dismiss.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEvent",
                  "canonicalReference": "!KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanel#open:member",
              "docComment": "/**\n * Forces the panel to open.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "open: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "open",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPanelHeaderRenderer:interface",
          "docComment": "/**\n * Renderer function which takes an additional parameter, the ID to use for the element containing the panel's title. This allows the `aria-labelledby` for the panel popup to work correctly. Note that if `headerTextId` is provided, it **must** be used on an element, or screen readers will be confused by the reference to a nonexistent ID. {@docCategory Panel}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPanelHeaderRenderer extends "
            },
            {
              "kind": "Reference",
              "text": "IRenderFunction",
              "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPanelProps",
              "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPanelHeaderRenderer",
          "members": [
            {
              "kind": "CallSignature",
              "canonicalReference": "@fluentui/react-internal!IPanelHeaderRenderer:call(1)",
              "docComment": "/**\n * @param props - Props given to the panel\n *\n * @param defaultRender - Default header renderer. If using this renderer in code that does not assign `headerTextId` to an element elsewhere, it **must** be passed to this function.\n *\n * @param headerTextId - If provided, this **must** be used as the ID of an element containing the panel's title, because the panel popup uses this ID as its aria-labelledby.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(props?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", defaultRender?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelHeaderRenderer",
                  "canonicalReference": "@fluentui/react-internal!IPanelHeaderRenderer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", headerTextId?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "defaultRender",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "headerTextId",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPanelProps:interface",
          "docComment": "/**\n * {@docCategory Panel}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPanelProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PanelBase",
              "canonicalReference": "@fluentui/react-internal!PanelBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPanelProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#allowTouchBodyScroll:member",
              "docComment": "/**\n * Allow body scroll on content and overlay on touch devices. Changing after mounting has no effect.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowTouchBodyScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowTouchBodyScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Panel\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#closeButtonAriaLabel:member",
              "docComment": "/**\n * Aria label on close button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#componentId:member",
              "docComment": "/**\n * Deprecated property. Serves no function.\n *\n * @deprecated\n *\n * Serves no function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IPanel interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanel",
                  "canonicalReference": "@fluentui/react-internal!IPanel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#customWidth:member",
              "docComment": "/**\n * Custom panel width, used only when `type` is set to `PanelType.custom`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "customWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#elementToFocusOnDismiss:member",
              "docComment": "/**\n * Sets the HTMLElement to focus on when exiting the FocusTrapZone.\n *\n * @defaultvalue\n *\n * The element.target that triggered the Panel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementToFocusOnDismiss?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementToFocusOnDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#firstFocusableSelector:member",
              "docComment": "/**\n * Indicates the selector for first focusable item. Deprecated, use `focusTrapZoneProps`.\n *\n * @deprecated\n *\n * Use `focusTrapZoneProps`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "firstFocusableSelector?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "firstFocusableSelector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#focusTrapZoneProps:member",
              "docComment": "/**\n * Optional props to pass to the FocusTrapZone component to manage focus in the panel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapZoneProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFocusTrapZoneProps",
                  "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusTrapZoneProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#forceFocusInsideTrap:member",
              "docComment": "/**\n * Indicates whether Panel should force focus inside the focus trap zone. If not explicitly specified, behavior aligns with FocusTrapZone's default behavior. Deprecated, use `focusTrapZoneProps`.\n *\n * @deprecated\n *\n * Use `focusTrapZoneProps`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceFocusInsideTrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceFocusInsideTrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#hasCloseButton:member",
              "docComment": "/**\n * Has the close button visible.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCloseButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCloseButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#headerClassName:member",
              "docComment": "/**\n * Optional parameter to provider the class name for header text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#headerText:member",
              "docComment": "/**\n * Header text for the Panel.\n *\n * @defaultvalue\n *\n * \"\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#headerTextProps:member",
              "docComment": "/**\n * The props for header text container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerTextProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerTextProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#ignoreExternalFocusing:member",
              "docComment": "/**\n * Indicates if this Panel will ignore keeping track of HTMLElement that activated the Zone. Deprecated, use `focusTrapZoneProps`.\n *\n * @deprecated\n *\n * Use `focusTrapZoneProps`.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreExternalFocusing?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreExternalFocusing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#isBlocking:member",
              "docComment": "/**\n * Whether the panel uses a modal overlay or not\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBlocking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBlocking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#isFooterAtBottom:member",
              "docComment": "/**\n * Determines if content should stretch to fill available space putting footer at the bottom of the page\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFooterAtBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFooterAtBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#isHiddenOnDismiss:member",
              "docComment": "/**\n * Whether the panel is hidden on dismiss, instead of destroyed in the DOM. Protects the contents from being destroyed when the panel is dismissed.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isHiddenOnDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isHiddenOnDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#isLightDismiss:member",
              "docComment": "/**\n * Whether the panel can be light dismissed.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLightDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLightDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#isOpen:member",
              "docComment": "/**\n * Whether the panel is displayed. If true, will cause panel to stay open even if dismissed. If false, will cause panel to stay hidden. If undefined, will allow the panel to control its own visility through open/dismiss methods.\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#layerProps:member",
              "docComment": "/**\n * Optional props to pass to the Layer component hosting the panel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layerProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ILayerProps",
                  "canonicalReference": "@fluentui/react-internal!ILayerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onDismiss:member",
              "docComment": "/**\n * A callback function for when the panel is closed, before the animation completes. If the panel should NOT be dismissed based on some keyboard event, then simply call ev.preventDefault() on it\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.SyntheticEvent",
                  "canonicalReference": "@types/react!~React.SyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEvent",
                  "canonicalReference": "!KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onDismissed:member",
              "docComment": "/**\n * A callback function which is called **after** the Panel is dismissed and the animation is complete. (If you need to update the Panel's `isOpen` prop in response to a dismiss event, use `onDismiss` instead.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismissed?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismissed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onLightDismissClick:member",
              "docComment": "/**\n * Optional custom function to handle clicks outside the panel in lightdismiss mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLightDismissClick?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLightDismissClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onOpen:member",
              "docComment": "/**\n * A callback function for when the Panel is opened, before the animation completes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onOpened:member",
              "docComment": "/**\n * A callback function for when the Panel is opened, after the animation completes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onOpened?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onOpened",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onOuterClick:member",
              "docComment": "/**\n * Optional custom function to handle clicks outside this component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onOuterClick?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onOuterClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onRenderBody:member",
              "docComment": "/**\n * Optional custom renderer for body region. Replaces any children passed into the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderBody?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderBody",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onRenderFooter:member",
              "docComment": "/**\n * Optional custom renderer for footer region. Replaces sticky footer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderFooter?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderFooter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onRenderFooterContent:member",
              "docComment": "/**\n * Custom renderer for content in the sticky footer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderFooterContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderFooterContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onRenderHeader:member",
              "docComment": "/**\n * Optional custom renderer for header region. Replaces current title\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderHeader?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelHeaderRenderer",
                  "canonicalReference": "@fluentui/react-internal!IPanelHeaderRenderer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onRenderNavigation:member",
              "docComment": "/**\n * Optional custom renderer navigation region. Replaces the region that contains the close button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderNavigation?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderNavigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#onRenderNavigationContent:member",
              "docComment": "/**\n * Optional custom renderer for content in the navigation region. Replaces current close button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderNavigationContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderNavigationContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#overlayProps:member",
              "docComment": "/**\n * Optional props to pass to the Overlay component that the panel uses.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlayProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverlayProps",
                  "canonicalReference": "@fluentui/react-internal!IOverlayProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overlayProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#popupProps:member",
              "docComment": "/**\n * Optional props to pass the Popup component that the panel uses.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "popupProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPopupProps",
                  "canonicalReference": "@fluentui/react-internal!IPopupProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "popupProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelStyles",
                  "canonicalReference": "@fluentui/react-internal!IPanelStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelProps#type:member",
              "docComment": "/**\n * Type of the panel.\n *\n * @defaultvalue\n *\n * PanelType.smallFixedFar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "PanelType",
                  "canonicalReference": "@fluentui/react-internal!PanelType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPanelStyleProps:interface",
          "docComment": "/**\n * {@docCategory Panel}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPanelStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IPanelStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#focusTrapZoneClassName:member",
              "docComment": "/**\n * Classname for FocusTrapZone element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapZoneClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusTrapZoneClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#hasCloseButton:member",
              "docComment": "/**\n * Panel has close button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCloseButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCloseButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#hasCustomNavigation:member",
              "docComment": "/**\n * Determines where the header is rendered based on whether the user has passed in a custom onRenderNavigation or onRenderNavigationContent render callback\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCustomNavigation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCustomNavigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#headerClassName:member",
              "docComment": "/**\n * Optional parameter to provider the class name for header text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#isAnimating:member",
              "docComment": "/**\n * Is animation currently running\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAnimating?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAnimating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#isFooterAtBottom:member",
              "docComment": "/**\n * Determines if content should stretch to fill available space putting footer at the bottom of the page\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFooterAtBottom?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFooterAtBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#isFooterSticky:member",
              "docComment": "/**\n * Based on state value setting footer to sticky or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFooterSticky?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFooterSticky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#isHiddenOnDismiss:member",
              "docComment": "/**\n * Is panel hidden on dismiss\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isHiddenOnDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isHiddenOnDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#isOnRightSide:member",
              "docComment": "/**\n * Is panel on right side\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOnRightSide?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOnRightSide",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#isOpen:member",
              "docComment": "/**\n * Is Panel open\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOpen?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyleProps#type:member",
              "docComment": "/**\n * Type of the panel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "PanelType",
                  "canonicalReference": "@fluentui/react-internal!PanelType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPanelStyles:interface",
          "docComment": "/**\n * {@docCategory Panel}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPanelStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPanelStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#closeButton:member",
              "docComment": "/**\n * Style for the close button IconButton element.\n *\n * @deprecated\n *\n * Use `subComponentStyles.closeButton` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButton?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#commands:member",
              "docComment": "/**\n * Style for the navigation container element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commands: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "commands",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#content:member",
              "docComment": "/**\n * Style for the body div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#contentInner:member",
              "docComment": "/**\n * Style for the Body and Footer container element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentInner: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentInner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#footer:member",
              "docComment": "/**\n * Style for the footer div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "footer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#footerInner:member",
              "docComment": "/**\n * Style for the inner footer div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footerInner: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "footerInner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#header:member",
              "docComment": "/**\n * Style for the header container div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#headerText:member",
              "docComment": "/**\n * Style for the header text div element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#hiddenPanel:member",
              "docComment": "/**\n * Style for the hidden element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hiddenPanel: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hiddenPanel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#main:member",
              "docComment": "/**\n * Style for the main section element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "main: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "main",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#navigation:member",
              "docComment": "/**\n * Style for the close button container element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "navigation: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "navigation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#overlay:member",
              "docComment": "/**\n * Style for the overlay element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overlay: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overlay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#scrollableContent:member",
              "docComment": "/**\n * Style for the scrollable content area container element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollableContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollableContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelStyles#subComponentStyles:member",
              "docComment": "/**\n * Styling for subcomponents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!IPanelSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPanelSubComponentStyles:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPanelSubComponentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPanelSubComponentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPanelSubComponentStyles#closeButton:member",
              "docComment": "/**\n * Styling for close button child component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButton: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonStyles",
                  "canonicalReference": "@fluentui/react-internal!IButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeopleFloatingPickerProps:interface",
          "docComment": "/**\n * {@docCategory FloatingPeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeopleFloatingPickerProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseFloatingPickerProps",
              "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeopleFloatingPickerProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemProps:interface",
          "docComment": "/**\n * {@docCategory ExtendedPeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPickerItemProps",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExtendedPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface",
          "docComment": "/**\n * PeoplePickerItemSelected props interface. Refers to the PeoplePicker items that have been picked already. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemSelectedProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPickerItemProps",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    ValidationState: "
            },
            {
              "kind": "Reference",
              "text": "ValidationState",
              "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
            },
            {
              "kind": "Content",
              "text": ";\n}>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSelectedProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedStyles",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps#ValidationState:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ValidationState: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidationState",
                  "canonicalReference": "@fluentui/react-internal!ValidationState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ValidationState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            },
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyleProps:type",
          "docComment": "/**\n * Props needed to construct PeoplePickerItemSelected styles. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IPeoplePickerItemSelectedStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSelectedProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSelectedProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'selected' | 'disabled'> & {\n    invalid?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSelectedStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the PeoplePickerItemSelected. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemSelectedStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSelectedStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyles#itemContent:member",
              "docComment": "/**\n * Refers to the element holding the content (Persona) of the PeoplePicker item already picked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyles#removeButton:member",
              "docComment": "/**\n * Refers to the remove action button on a picked PeoplePicker item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyles#root:member",
              "docComment": "/**\n * Root element of picked PeoplePicker item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedStyles#subComponentStyles:member",
              "docComment": "/**\n * SubComponent (Persona, PersonaCoin) styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles:interface",
          "docComment": "/**\n * Styles interface of the SubComponents rendered within PeoplePickerItemSelected. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemSelectedSubComponentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSelectedSubComponentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles#persona:member",
              "docComment": "/**\n * Refers to the Persona rendered within the PeoplePickerItemSelected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "persona: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "persona",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles#personaCoin:member",
              "docComment": "/**\n * Refers to the PersonaCoin in the Persona rendered within the PeoplePickerItemSelected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaCoin?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaCoinStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personaCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSharedProps:interface",
          "docComment": "/**\n * Common props in between IPeoplePickerItemSelectedProps, IPeoplePickerItemWithMenuProps and IPeoplePickerItemSuggestionProps. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemSharedProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSharedProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSharedProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the PeoplePickerItem root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSharedProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemState "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemState#contextualMenuVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contextualMenuVisible: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contextualMenuVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface",
          "docComment": "/**\n * PeoplePickerItemSuggestion props interface. Refers to the PeoplePicker items that are suggested for picking. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemSuggestionProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSuggestionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps#compact:member",
              "docComment": "/**\n * Flag that controls whether each suggested PeoplePicker item (Persona) is rendered with or without secondary text for compact look.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "compact?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "compact",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps#personaProps:member",
              "docComment": "/**\n * Persona props for each suggested for picking PeoplePicker item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personaProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSuggestionStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSuggestionStyles",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps#suggestionsProps:member",
              "docComment": "/**\n * General common props for all PeoplePicker items suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerSuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerSuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyleProps:type",
          "docComment": "/**\n * Props needed to construct PeoplePickerItemSuggestion styles. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IPeoplePickerItemSuggestionStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className'> & {}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSuggestionStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the PeoplePickerItemSuggestion. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemSuggestionStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemSuggestionStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyles#personaWrapper:member",
              "docComment": "/**\n * Refers to the element wrapping the Persona of the suggested PeoplePicker item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "personaWrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "personaWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyles#root:member",
              "docComment": "/**\n * Root container element of a suggested PeoplePicker item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionStyles#subComponentStyles:member",
              "docComment": "/**\n * SubComponent (Persona, PersonaCoin) styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemWithMenuProps:interface",
          "docComment": "/**\n * PeoplePickerItemWithMenu props interface.\n *\n * @deprecated\n *\n * Do not use. Will be removed in Fabric 7.0\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerItemWithMenuProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPickerItemProps",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaWithMenu",
              "canonicalReference": "@fluentui/react-internal!IPersonaWithMenu:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerItemWithMenuProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPeoplePickerProps:interface",
          "docComment": "/**\n * PeoplePicker props interface which renders Personas as items. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPeoplePickerProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBasePickerProps",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPeoplePickerProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersona:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersona "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersona",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaCoinProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPersonaSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaCoinProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the PersonaCoin\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaCoinStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaCoinStyles",
                  "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaCoinStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaCoinStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps#className:member",
              "docComment": "/**\n * Custom class name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps#coinSize:member",
              "docComment": "/**\n * Optional custom persona coin size in pixel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coinSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coinSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps#showUnknownPersonaCoin:member",
              "docComment": "/**\n * Decides whether to display coin for unknown persona\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showUnknownPersonaCoin?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showUnknownPersonaCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps#size:member",
              "docComment": "/**\n * Decides the size of the control.\n *\n * @defaultvalue\n *\n * PersonaSize.size48\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaSize",
                  "canonicalReference": "@fluentui/react-internal!PersonaSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaCoinStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaCoinStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles#coin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coin: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles#image:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "image: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "image",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles#imageArea:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageArea: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageArea",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles#initials:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initials: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinStyles#size10WithoutPresenceIcon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size10WithoutPresenceIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size10WithoutPresenceIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaPresenceProps:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaPresenceProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPersonaSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaPresenceProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaPresenceProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaPresenceProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaPresenceStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaPresenceStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaPresenceStyles",
                  "canonicalReference": "@fluentui/react-internal!IPersonaPresenceStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IPersonaPresenceStyleProps:type",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IPersonaPresenceStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'presence' | 'isOutOfOffice' | 'size' | 'presenceColors'> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaPresenceStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 15
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaPresenceStyles:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaPresenceStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaPresenceStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaPresenceStyles#presence:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presence: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "presence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaPresenceStyles#presenceIcon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presenceIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "presenceIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPersonaSharedProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the Persona\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IPersona interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersona",
                  "canonicalReference": "@fluentui/react-internal!IPersona:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#onRenderOptionalText:member",
              "docComment": "/**\n * Optional custom renderer for the optional text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderOptionalText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderOptionalText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#onRenderPrimaryText:member",
              "docComment": "/**\n * Optional custom renderer for the primary text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPrimaryText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPrimaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#onRenderSecondaryText:member",
              "docComment": "/**\n * Optional custom renderer for the secondary text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSecondaryText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSecondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#onRenderTertiaryText:member",
              "docComment": "/**\n * Optional custom renderer for the tertiary text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderTertiaryText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderTertiaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaStyles",
                  "canonicalReference": "@fluentui/react-internal!IPersonaStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaSharedProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaSharedProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#allowPhoneInitials:member",
              "docComment": "/**\n * Whether initials are calculated for phone numbers and number sequences. Example: Set property to true to get initials for project names consisting of numbers only.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowPhoneInitials?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowPhoneInitials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#coinProps:member",
              "docComment": "/**\n * Optional HTML element props for Persona coin.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coinProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaCoinProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coinProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#coinSize:member",
              "docComment": "/**\n * Optional custom persona coin size in pixel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coinSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coinSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#hidePersonaDetails:member",
              "docComment": "/**\n * Whether to not render persona details, and just render the persona image/initials.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidePersonaDetails?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidePersonaDetails",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#imageAlt:member",
              "docComment": "/**\n * Alt text for the image to use. Defaults to an empty string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageAlt?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageAlt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#imageInitials:member",
              "docComment": "/**\n * The user's initials to display in the image area when there is no image.\n *\n * @defaultvalue\n *\n * [Derived from text]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageInitials?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageInitials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#imageShouldFadeIn:member",
              "docComment": "/**\n * If true, adds the css class 'is-fadeIn' to the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageShouldFadeIn?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageShouldFadeIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#imageShouldStartVisible:member",
              "docComment": "/**\n * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables imageShouldFadeIn.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageShouldStartVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageShouldStartVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#imageUrl:member",
              "docComment": "/**\n * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#initialsColor:member",
              "docComment": "/**\n * The background color when the user's initials are displayed.\n *\n * @defaultvalue\n *\n * [Derived from text]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialsColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaInitialsColor",
                  "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor:enum"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initialsColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#isOutOfOffice:member",
              "docComment": "/**\n * This flag can be used to signal the persona is out of office. This will change the way the presence icon looks for statuses that support dual-presence.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOutOfOffice?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isOutOfOffice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#onPhotoLoadingStateChange:member",
              "docComment": "/**\n * Optional callback for when loading state of the photo changes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPhotoLoadingStateChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(newImageLoadState: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageLoadState",
                  "canonicalReference": "@fluentui/react-internal!ImageLoadState:enum"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPhotoLoadingStateChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#onRenderCoin:member",
              "docComment": "/**\n * Optional custom renderer for the coin\n *\n * @deprecated\n *\n * Use `onRenderPersonaCoin` for custom rendering instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderCoin?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaSharedProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#onRenderInitials:member",
              "docComment": "/**\n * Optional custom renderer for the initials\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderInitials?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaSharedProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderInitials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#onRenderPersonaCoin:member",
              "docComment": "/**\n * Optional custom renderer for the coin\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPersonaCoin?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaSharedProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPersonaCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#optionalText:member",
              "docComment": "/**\n * Optional text to display, usually a custom message set. The optional text will only be shown when using size100.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionalText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "optionalText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#presence:member",
              "docComment": "/**\n * Presence of the person to display - will not display presence if undefined.\n *\n * @defaultvalue\n *\n * PersonaPresence.none\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presence?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaPresence",
                  "canonicalReference": "@fluentui/react-internal!PersonaPresence:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "presence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#presenceColors:member",
              "docComment": "/**\n * The colors to be used for the presence-icon and it's background\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presenceColors?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        available: string;\n        away: string;\n        busy: string;\n        dnd: string;\n        offline: string;\n        oof: string;\n        background: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "presenceColors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#presenceTitle:member",
              "docComment": "/**\n * Presence title to be shown as a tooltip on hover over the presence icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presenceTitle?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "presenceTitle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#primaryText:member",
              "docComment": "/**\n * Primary text to display, usually the name of the person.\n *\n * @deprecated\n *\n * Use `text` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#secondaryText:member",
              "docComment": "/**\n * Secondary text to display, usually the role of the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#showInitialsUntilImageLoads:member",
              "docComment": "/**\n * If true renders the initials while the image is loading. This only applies when an imageUrl is provided.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showInitialsUntilImageLoads?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showInitialsUntilImageLoads",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#showSecondaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showSecondaryText?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showSecondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#showUnknownPersonaCoin:member",
              "docComment": "/**\n * If true, show the special coin for unknown persona. It has '?' in place of initials, with static font and background colors\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showUnknownPersonaCoin?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showUnknownPersonaCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#size:member",
              "docComment": "/**\n * Decides the size of the control.\n *\n * @defaultvalue\n *\n * PersonaSize.size48\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaSize",
                  "canonicalReference": "@fluentui/react-internal!PersonaSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#tertiaryText:member",
              "docComment": "/**\n * Tertiary text to display, usually the status of the user. The tertiary text will only be shown when using size72 or size100.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tertiaryText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tertiaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#text:member",
              "docComment": "/**\n * Primary text to display, usually the name of the person.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaSharedProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps#className:member",
              "docComment": "/**\n * Custom class name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps#coinSize:member",
              "docComment": "/**\n * Optional custom persona coin size in pixel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coinSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coinSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps#presence:member",
              "docComment": "/**\n * Presence of the person to display - will not display presence if undefined.\n *\n * @defaultvalue\n *\n * PersonaPresence.none\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "presence?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaPresence",
                  "canonicalReference": "@fluentui/react-internal!PersonaPresence:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "presence",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps#showSecondaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showSecondaryText?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showSecondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps#size:member",
              "docComment": "/**\n * Decides the size of the control.\n *\n * @defaultvalue\n *\n * PersonaSize.size48\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "PersonaSize",
                  "canonicalReference": "@fluentui/react-internal!PersonaSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaStyles:interface",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#details:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "details: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "details",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#optionalText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionalText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "optionalText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#primaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#secondaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#tertiaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tertiaryText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tertiaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaStyles#textContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPersonaWithMenu:interface",
          "docComment": "/**\n * Extended interface from IPersonaProps to add `menuItems` property PeoplePickerItemWithMenu items.\n *\n * @deprecated\n *\n * Do not use. Will be removed in Fabric 7.0\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPersonaWithMenu extends "
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPersonaWithMenu",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPersonaWithMenu#menuItems:member",
              "docComment": "/**\n * Additional menuItems to be rendered in a contextualMenu for each Persona.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuItems?: "
                },
                {
                  "kind": "Reference",
                  "text": "IContextualMenuItem",
                  "canonicalReference": "@fluentui/react-internal!IContextualMenuItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "menuItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IPickerAriaIds:type",
          "docComment": "/**\n * Aria id's for internal picker components {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IPickerAriaIds = "
            },
            {
              "kind": "Content",
              "text": "{\n    selectedSuggestionAlert: string;\n    selectedItems: string;\n    suggestionList: string;\n    combobox: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IPickerAriaIds",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPickerItem:interface",
          "docComment": "/**\n * PickerItem component. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPickerItem "
            }
          ],
          "releaseTag": "Public",
          "name": "IPickerItem",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface",
          "docComment": "/**\n * PickerItem props common for any type of items. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPickerItemProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IPickerItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IPickerItem interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPickerItem",
                  "canonicalReference": "@fluentui/react-internal!IPickerItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#index:member",
              "docComment": "/**\n * Index number of the item in the array of picked items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#item:member",
              "docComment": "/**\n * The item of Type T (Persona, Tag, or any other custom item provided).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#key:member",
              "docComment": "/**\n * Unique key for each picked item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#onItemChange:member",
              "docComment": "/**\n * Internal Use only, gives a callback to the renderer to call when an item has changed. This allows the base picker to keep track of changes in the items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T, index: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#onRemoveItem:member",
              "docComment": "/**\n * Callback issued when the item is removed from the array of picked items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRemoveItem?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRemoveItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#removeButtonAriaLabel:member",
              "docComment": "/**\n * Aria-label for the picked item remove button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps#selected:member",
              "docComment": "/**\n * Whether the picked item is selected or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPlainCard:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPlainCard "
            }
          ],
          "releaseTag": "Public",
          "name": "IPlainCard",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPlainCardProps:interface",
          "docComment": "/**\n * PlainCard component props. {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPlainCardProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseCardProps",
              "canonicalReference": "@fluentui/react-internal!IBaseCardProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPlainCard",
              "canonicalReference": "@fluentui/react-internal!IPlainCard:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPlainCardStyles",
              "canonicalReference": "@fluentui/react-internal!IPlainCardStyles:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPlainCardStyleProps",
              "canonicalReference": "@fluentui/react-internal!IPlainCardStyleProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPlainCardProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPlainCardProps#onRenderPlainCard:member",
              "docComment": "/**\n * Render function to populate compact content area\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPlainCard?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPlainCard",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPlainCardStyleProps:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPlainCardStyleProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseCardStyleProps",
              "canonicalReference": "@fluentui/react-internal!IBaseCardStyleProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPlainCardStyleProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPlainCardStyles:interface",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPlainCardStyles extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseCardStyles",
              "canonicalReference": "@fluentui/react-internal!IBaseCardStyles:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPlainCardStyles",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPopupProps:interface",
          "docComment": "/**\n * {@docCategory Popup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPopupProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPopupProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#ariaDescribedBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing the description for the popup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#ariaLabel:member",
              "docComment": "/**\n * Accessible label text for the popup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#ariaLabelledBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing label text for popup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#className:member",
              "docComment": "/**\n * Optional class name for the root popup div.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#onDismiss:member",
              "docComment": "/**\n * A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will handle escape key press and call this. The event will be stopped/canceled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEvent",
                  "canonicalReference": "!KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#onRestoreFocus:member",
              "docComment": "/**\n * Called when the component is unmounting, and focus needs to be restored. If this is provided, focus will not be restored automatically, and you'll need to call `params.originalElement.focus()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRestoreFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "(params: "
                },
                {
                  "kind": "Reference",
                  "text": "IPopupRestoreFocusParams",
                  "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRestoreFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#role:member",
              "docComment": "/**\n * Aria role for popup\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupProps#shouldRestoreFocus:member",
              "docComment": "/**\n * If true, when this component is unmounted, focus will be restored to the element that had focus when the component first mounted.\n *\n * @deprecated\n *\n * use restoreFocus callback instead\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldRestoreFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldRestoreFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams:interface",
          "docComment": "/**\n * Parameters passed to `onRestoreFocus` callback of `Popup` and related components. {@docCategory Popup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPopupRestoreFocusParams "
            }
          ],
          "releaseTag": "Public",
          "name": "IPopupRestoreFocusParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams#containsFocus:member",
              "docComment": "/**\n * Whether the popup currently contains focus\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "containsFocus: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "containsFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams#documentContainsFocus:member",
              "docComment": "/**\n * Whether the document the popup belongs to contains focus (or false if unknown)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "documentContainsFocus: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "documentContainsFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPopupRestoreFocusParams#originalElement:member",
              "docComment": "/**\n * Element the underlying Popup believes focus should go to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "originalElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Window",
                  "canonicalReference": "!Window:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "originalElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPosition:interface",
          "docComment": "/**\n * Gives the position of some element on the page. Only a pair of vertical and horizontal edges need to be given. So top/left or bottom/left is sufficient. The number given is the distance in pixels from whatever host was given.. So bottom: 100 would be 100px up from the bottom of the host while top: 100px from the top.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPosition "
            }
          ],
          "releaseTag": "Public",
          "name": "IPosition",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluentui/react-internal!IPosition:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPosition#bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPosition#left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "left?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "left",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPosition#right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "right?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "right",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPosition#top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPositionDirectionalHintData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPositionDirectionalHintData "
            }
          ],
          "releaseTag": "Public",
          "name": "IPositionDirectionalHintData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionDirectionalHintData#alignmentEdge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignmentEdge?: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignmentEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionDirectionalHintData#alignTargetEdge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignTargetEdge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignTargetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionDirectionalHintData#isAuto:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAuto?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAuto",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionDirectionalHintData#targetEdge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetEdge: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPositionedData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPositionedData "
            }
          ],
          "releaseTag": "Public",
          "name": "IPositionedData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionedData#alignmentEdge:member",
              "docComment": "/**\n * The finalized alignment edge that the element is aligning too. For instance, RectangleEdge.left means that the left edge of the target should be in line with the left edge of the element being positioned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignmentEdge?: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignmentEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionedData#elementPosition:member",
              "docComment": "/**\n * The new position of the element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementPosition: "
                },
                {
                  "kind": "Reference",
                  "text": "IPosition",
                  "canonicalReference": "@fluentui/react-internal!IPosition:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionedData#targetEdge:member",
              "docComment": "/**\n * The finalized target edge that element is aligning to. For instance RectangleEdge.bottom would mean that the bottom edge of the target is being aligned to by the RectangleEdge.top of the element that is being positioned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetEdge: "
                },
                {
                  "kind": "Reference",
                  "text": "RectangleEdge",
                  "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPositioningContainer:interface",
          "docComment": "/**\n * {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPositioningContainer "
            }
          ],
          "releaseTag": "Public",
          "name": "IPositioningContainer",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps:interface",
          "docComment": "/**\n * {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPositioningContainerProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseProps",
              "canonicalReference": "@fluentui/utilities!IBaseProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPositioningContainer",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainer:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IPositioningContainerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#ariaDescribedBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing the description for the positioningContainer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#ariaLabel:member",
              "docComment": "/**\n * Accessible label text for positioningContainer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#ariaLabelledBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing label text for positioningContainer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#backgroundColor:member",
              "docComment": "/**\n * The background color of the positioningContainer in hex format ie. #ffffff.\n *\n * @defaultvalue\n *\n * $ms-color-white\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#bounds:member",
              "docComment": "/**\n * The bounding rectangle for which the contextual menu can appear in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounds?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#children:member",
              "docComment": "/**\n * Child nodes to render\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "children?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#className:member",
              "docComment": "/**\n * CSS class to apply to the positioningContainer.\n *\n * @defaultvalue\n *\n * null\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#componentRef:member",
              "docComment": "/**\n * All props for your component are to be defined here.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPositioningContainer",
                  "canonicalReference": "@fluentui/react-internal!IPositioningContainer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#coverTarget:member",
              "docComment": "/**\n * If true the position returned will have the menu element cover the target. If false then it will position next to the target;\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coverTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coverTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#directionalHint:member",
              "docComment": "/**\n * How the element should be positioned\n *\n * @defaultvalue\n *\n * DirectionalHint.BottomAutoEdge\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#directionalHintFixed:member",
              "docComment": "/**\n * If true the position will not change sides in an attempt to fit the positioningContainer within bounds. It will still attempt to align it to whatever bounds are given.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintFixed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#directionalHintForRTL:member",
              "docComment": "/**\n * How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintForRTL?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintForRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#doNotLayer:member",
              "docComment": "/**\n * If true do not render on a new layer. If false render on a new layer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doNotLayer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "doNotLayer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#finalHeight:member",
              "docComment": "/**\n * Specify the final height of the content. To be used when expanding the content dynamically so that positioningContainer can adjust its position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "finalHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "finalHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#minPagePadding:member",
              "docComment": "/**\n * The minimum distance the positioningContainer will be away from the edge of the screen.\n *\n * @defaultvalue\n *\n * 8\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minPagePadding?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minPagePadding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#offsetFromTarget:member",
              "docComment": "/**\n * The gap between the positioningContainer and the target\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetFromTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offsetFromTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#onDismiss:member",
              "docComment": "/**\n * Callback when the positioningContainer tries to close.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#onLayerMounted:member",
              "docComment": "/**\n * Optional callback when the layer content has mounted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLayerMounted?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onLayerMounted",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#onPositioned:member",
              "docComment": "/**\n * Optional callback that is called once the positioningContainer has been correctly positioned.\n *\n * @param positions - gives the user information about how the container is positioned such as the element position, the target edge, and the alignment edge of the container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onPositioned?: "
                },
                {
                  "kind": "Content",
                  "text": "(positions?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPositionedData",
                  "canonicalReference": "@fluentui/react-internal!IPositionedData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onPositioned",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#positioningContainerMaxHeight:member",
              "docComment": "/**\n * Set max height of positioningContainer When not set the positioningContainer will expand with contents up to the bottom of the screen\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positioningContainerMaxHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positioningContainerMaxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#positioningContainerWidth:member",
              "docComment": "/**\n * Custom width for positioningContainer including borders. If value is 0, no width is applied.\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positioningContainerWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positioningContainerWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#preventDismissOnScroll:member",
              "docComment": "/**\n * If true then the onClose will not not dismiss on scroll\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preventDismissOnScroll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preventDismissOnScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#role:member",
              "docComment": "/**\n * Aria role assigned to the positioningContainer (Eg. dialog, alertdialog).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#setInitialFocus:member",
              "docComment": "/**\n * If true then the positioningContainer will attempt to focus the first focusable element that it contains. If it doesn't find an element, no focus will be set and the method will return false. This means that it's the contents responsibility to either set focus or have focusable items.\n *\n * @returns True if focus was set, false if it was not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInitialFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setInitialFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#target:member",
              "docComment": "/**\n * The target that the positioningContainer should try to position itself based on. It can be either an HTMLElement a querySelector string of a valid HTMLElement or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string | "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@fluentui/utilities!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#targetPoint:member",
              "docComment": "/**\n * Point used to position the positioningContainer. Deprecated, use `target` instead.\n *\n * @deprecated\n *\n * Use `target` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetPoint?: "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@fluentui/utilities!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetPoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps#useTargetPoint:member",
              "docComment": "/**\n * If true use a point rather than rectangle to position the positioningContainer. For example it can be used to position based on a click.\n *\n * @deprecated\n *\n * Do not use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useTargetPoint?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useTargetPoint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IPositioningContainerTypes:type",
          "docComment": "/**\n * @deprecated\n *\n * Use `IPositioningContainerProps` {@docCategory Coachmark}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IPositioningContainerTypes = "
            },
            {
              "kind": "Reference",
              "text": "IPositioningContainerProps",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IPositioningContainerTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IPositionProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPositionProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IPositionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#alignTargetEdge:member",
              "docComment": "/**\n * If true the positioning logic will prefer flipping edges over nudging the rectangle to fit within bounds, thus making sure the element align perfectly with target.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignTargetEdge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignTargetEdge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#bounds:member",
              "docComment": "/**\n * The bounding rectangle for which the contextual menu can appear in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounds?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRectangle",
                  "canonicalReference": "@fluentui/utilities!IRectangle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#coverTarget:member",
              "docComment": "/**\n * If true the position returned will have the menu element cover the target. If false then it will position next to the target;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coverTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coverTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#directionalHint:member",
              "docComment": "/**\n * how the element should be positioned\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#directionalHintFixed:member",
              "docComment": "/**\n * If true the position will not change edges in an attempt to fit the rectangle within bounds. It will still attempt to align it to whatever bounds are given.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintFixed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintFixed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#directionalHintForRTL:member",
              "docComment": "/**\n * How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintForRTL?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintForRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#gapSpace:member",
              "docComment": "/**\n * The gap between the callout and the target\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gapSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gapSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IPositionProps#target:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Element",
                  "canonicalReference": "!Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MouseEvent",
                  "canonicalReference": "!MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Point",
                  "canonicalReference": "@fluentui/utilities!Point:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps:interface",
          "docComment": "/**\n * {@docCategory ProgressIndicator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IProgressIndicatorProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProgressIndicatorBase",
              "canonicalReference": "@fluentui/react-internal!ProgressIndicatorBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IProgressIndicatorProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#ariaValueText:member",
              "docComment": "/**\n * Text alternative of the progress status, used by screen readers for reading the value of the progress.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaValueText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaValueText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#barHeight:member",
              "docComment": "/**\n * Height of the ProgressIndicator\n *\n * @defaultvalue\n *\n * 2\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "barHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "barHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the ProgressIndicator\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#description:member",
              "docComment": "/**\n * Text describing or supplementing the operation. May be a string or React virtual elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#label:member",
              "docComment": "/**\n * Label to display above the control. May be a string or React virtual elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#onRenderProgress:member",
              "docComment": "/**\n * A render override for the progress track.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderProgress?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IProgressIndicatorProps",
                  "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderProgress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#percentComplete:member",
              "docComment": "/**\n * Percentage of the operation's completeness, numerically between 0 and 1. If this is not set, the indeterminate progress animation will be shown instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "percentComplete?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "percentComplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#progressHidden:member",
              "docComment": "/**\n * Whether or not to hide the progress state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressHidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progressHidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IProgressIndicatorStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IProgressIndicatorStyles",
                  "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps#title:member",
              "docComment": "/**\n * Deprecated at v0.43.0, to be removed at \\>= v0.53.0. Use `label` instead.\n *\n * @deprecated\n *\n * Use `label` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyleProps:interface",
          "docComment": "/**\n * {@docCategory ProgressIndicator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IProgressIndicatorStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IProgressIndicatorStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyleProps#barHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "barHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "barHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyleProps#indeterminate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indeterminate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "indeterminate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles:interface",
          "docComment": "/**\n * {@docCategory ProgressIndicator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IProgressIndicatorStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IProgressIndicatorStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles#itemDescription:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemDescription: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles#itemName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemName: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles#itemProgress:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemProgress: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemProgress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles#progressBar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressBar: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progressBar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles#progressTrack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressTrack: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progressTrack",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRating:interface",
          "docComment": "/**\n * {@docCategory Rating}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRating "
            }
          ],
          "releaseTag": "Public",
          "name": "IRating",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRating#rating:member",
              "docComment": "/**\n * Current displayed rating value. Will be `min` if the user has not yet set a rating.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rating: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRatingProps:interface",
          "docComment": "/**\n * Rating component props. {@docCategory Rating}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRatingProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IRatingProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#allowZeroStars:member",
              "docComment": "/**\n * Allow the initial rating value (or updated values passed in through `rating`) to be 0. Note that a value of 0 still won't be selectable by mouse or keyboard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowZeroStars?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowZeroStars",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#ariaLabelFormat:member",
              "docComment": "/**\n * Optional label format for each individual rating star (not the rating control as a whole) that will be read by screen readers. Placeholder `{0}` is the current rating and placeholder `{1}` is the max: for example, `\"Select {0} of {1} stars\"`.\n *\n * (To set the label for the control as a whole, use `getAriaLabel` or `aria-label`.)\n *\n * @defaultvalue\n *\n * ''\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelFormat?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelFormat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IRating interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IRating",
                  "canonicalReference": "@fluentui/react-internal!IRating:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#defaultRating:member",
              "docComment": "/**\n * Default rating. Must be a number between `min` and `max`. Only provide this if the Rating is an uncontrolled component; otherwise, use the `rating` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultRating?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultRating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#disabled:member",
              "docComment": "/**\n * Whether the control should be disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#getAriaLabel:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "(rating: number, max: number) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#icon:member",
              "docComment": "/**\n * Custom icon name for selected rating elements.\n *\n * @defaultvalue\n *\n * FavoriteStarFill\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#max:member",
              "docComment": "/**\n * Maximum rating. Must be \\>= `min`.\n *\n * @defaultvalue\n *\n * 5\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#min:member",
              "docComment": "/**\n * Minimum rating. Must be \\>= 0.\n *\n * @deprecated\n *\n * Use `allowZeroStars` instead.\n *\n * @defaultvalue\n *\n * 0 if `allowZeroStars` is true, 1 otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#onChange:member",
              "docComment": "/**\n * Callback for when the rating changes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FormEvent",
                  "canonicalReference": "@types/react!~React.FormEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, rating?: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#onRenderStar:member",
              "docComment": "/**\n * Optional custom renderer for the star component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderStar?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IRatingStarProps",
                  "canonicalReference": "@fluentui/react-internal!IRatingStarProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderStar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#rating:member",
              "docComment": "/**\n * Current rating. Must be a number between `min` and `max`. Only provide this if the Rating is a controlled component where you are maintaining its current state; otherwise, use the `defaultRating` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rating?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#readOnly:member",
              "docComment": "/**\n * Optional flag to mark rating control as readOnly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "readOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#size:member",
              "docComment": "/**\n * Size of rating\n *\n * @defaultvalue\n *\n * Small\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "RatingSize",
                  "canonicalReference": "@fluentui/react-internal!RatingSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IRatingStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IRatingStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IRatingStyles",
                  "canonicalReference": "@fluentui/react-internal!IRatingStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingProps#unselectedIcon:member",
              "docComment": "/**\n * Custom icon name for unselected rating elements.\n *\n * @defaultvalue\n *\n * FavoriteStar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unselectedIcon?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "unselectedIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRatingStarProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRatingStarProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IRatingStarProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStarProps#classNames:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "classNames: "
                },
                {
                  "kind": "Reference",
                  "text": "IProcessedStyleSet",
                  "canonicalReference": "@fluentui/merge-styles!IProcessedStyleSet:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IRatingStyles",
                  "canonicalReference": "@fluentui/react-internal!IRatingStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "classNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStarProps#disabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStarProps#fillPercentage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fillPercentage: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fillPercentage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStarProps#icon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStarProps#starNum:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "starNum?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "starNum",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRatingStyleProps:interface",
          "docComment": "/**\n * {@docCategory Rating}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRatingStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IRatingStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyleProps#disabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyleProps#readOnly:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "readOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRatingStyles:interface",
          "docComment": "/**\n * {@docCategory Rating}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRatingStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IRatingStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#labelText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingFocusZone:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingFocusZone: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingFocusZone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingStar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingStar: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingStar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingStarBack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingStarBack: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingStarBack",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingStarFront:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingStarFront: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingStarFront",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingStarIsLarge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingStarIsLarge: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingStarIsLarge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#ratingStarIsSmall:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ratingStarIsSmall: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ratingStarIsSmall",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#rootIsLarge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootIsLarge: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rootIsLarge",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRatingStyles#rootIsSmall:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootIsSmall: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rootIsSmall",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRelativePositions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRelativePositions "
            }
          ],
          "releaseTag": "Public",
          "name": "IRelativePositions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRelativePositions#beakPosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakPosition: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        position: "
                },
                {
                  "kind": "Reference",
                  "text": "IPosition",
                  "canonicalReference": "@fluentui/react-internal!IPosition:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined;\n        display: 'block';\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRelativePositions#calloutPosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutPosition: "
                },
                {
                  "kind": "Reference",
                  "text": "IPosition",
                  "canonicalReference": "@fluentui/react-internal!IPosition:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRelativePositions#directionalClassName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalClassName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRelativePositions#submenuDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "submenuDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "submenuDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRenderGroupHeaderProps:interface",
          "docComment": "/**\n * {@doccategory Nav}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRenderGroupHeaderProps extends "
            },
            {
              "kind": "Reference",
              "text": "INavLinkGroup",
              "canonicalReference": "@fluentui/react-internal!INavLinkGroup:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IRenderGroupHeaderProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRenderGroupHeaderProps#isExpanded:member",
              "docComment": "/**\n * Whether or not the group is presently expanded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isExpanded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isExpanded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IResizeGroup:interface",
          "docComment": "/**\n * {@docCategory ResizeGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResizeGroup "
            }
          ],
          "releaseTag": "Public",
          "name": "IResizeGroup",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroup#remeasure:member(1)",
              "docComment": "/**\n * Remeasures the available space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remeasure(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "remeasure"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IResizeGroupProps:interface",
          "docComment": "/**\n * {@docCategory ResizeGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResizeGroupProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IResizeGroupProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the Component\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IResizeGroup",
                  "canonicalReference": "@fluentui/react-internal!IResizeGroup:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#data:member",
              "docComment": "/**\n * Initial data to be passed to the `onRenderData` function. When there is no `onGrowData` provided, this data should represent what should be passed to the render function when the parent container of the ResizeGroup is at its maximum supported width. A `cacheKey` property may optionally be included as part of the data. Two data objects with the same `cacheKey` will be assumed to take up the same width and will prevent measurements. The type of `cacheKey` is a string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#dataDidRender:member",
              "docComment": "/**\n * Function to be called every time data is rendered. It provides the data that was actually rendered. A use case would be adding telemetry when a particular control is shown in an overflow well or dropped as a result of onReduceData or to count the number of renders that an implementation of onReduceData triggers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataDidRender?: "
                },
                {
                  "kind": "Content",
                  "text": "(renderedData: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataDidRender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#direction:member",
              "docComment": "/**\n * Direction of this resize group, vertical or horizontal\n *\n * @defaultvalue\n *\n * ResizeGroupDirection.horizontal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction?: "
                },
                {
                  "kind": "Reference",
                  "text": "ResizeGroupDirection",
                  "canonicalReference": "@fluentui/react-internal!ResizeGroupDirection:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#onGrowData:member",
              "docComment": "/**\n * Function to be performed on the data in order to increase its width. It is called in scenarios where the container has more room than the previous render and we may be able to fit more content. If there are no more scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onGrowData?: "
                },
                {
                  "kind": "Content",
                  "text": "(prevData: any) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGrowData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#onReduceData:member",
              "docComment": "/**\n * Function to be performed on the data in order to reduce its width and make it fit into the given space. If there are no more scaling steps to apply, it should return undefined to prevent an infinite render loop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onReduceData: "
                },
                {
                  "kind": "Content",
                  "text": "(prevData: any) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onReduceData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#onRenderData:member",
              "docComment": "/**\n * Function to render the data. Called when rendering the contents to the screen and when rendering in a hidden div to measure the size of the contents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderData: "
                },
                {
                  "kind": "Content",
                  "text": "(data: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n *\n * @deprecated\n *\n * Removed to reduce bundle size. Please use `className` and add css rules to `className` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IResizeGroupStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IResizeGroupStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IResizeGroupStyles",
                  "canonicalReference": "@fluentui/react-internal!IResizeGroupStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IResizeGroupState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResizeGroupState "
            }
          ],
          "releaseTag": "Public",
          "name": "IResizeGroupState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState#dataToMeasure:member",
              "docComment": "/**\n * Data to render in a hidden div for measurement\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataToMeasure?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataToMeasure",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState#measureContainer:member",
              "docComment": "/**\n * Set to true when the content container might have new dimensions and should be remeasured.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureContainer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "measureContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState#renderedData:member",
              "docComment": "/**\n * Final data used to render proper sized component\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderedData?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderedData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupState#resizeDirection:member",
              "docComment": "/**\n * Are we resizing to accommodate having more or less available space? The 'grow' direction is when the container may have more room than the last render, such as when a window resize occurs. This means we will try to fit more content in the window. The 'shrink' direction is when the contents don't fit in the container and we need to find a transformation of the data that makes everything fit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resizeDirection?: "
                },
                {
                  "kind": "Content",
                  "text": "'grow' | 'shrink'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resizeDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IResizeGroupStyleProps:interface",
          "docComment": "/**\n * {@docCategory ResizeGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResizeGroupStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IResizeGroupStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IResizeGroupStyles:interface",
          "docComment": "/**\n * {@docCategory ResizeGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IResizeGroupStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IResizeGroupStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IRGB:interface",
          "docComment": "/**\n * RGB color with optional alpha value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IRGB "
            }
          ],
          "releaseTag": "Public",
          "name": "IRGB",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRGB#a:member",
              "docComment": "/**\n * Alpha, range 0 (transparent)-100. Usually assumed to be 100 if not specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "a?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "a",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRGB#b:member",
              "docComment": "/**\n * Blue, range 0-255.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "b",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRGB#g:member",
              "docComment": "/**\n * Green, range 0-255.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "g",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IRGB#r:member",
              "docComment": "/**\n * Red, range 0-255.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "r",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IScrollablePane:interface",
          "docComment": "/**\n * {@docCategory ScrollablePane}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrollablePane "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrollablePane",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePane#forceLayoutUpdate:member(1)",
              "docComment": "/**\n * Triggers a layout update for the pane.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceLayoutUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "forceLayoutUpdate"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePane#getScrollPosition:member(1)",
              "docComment": "/**\n * Gets the current scroll position of the scrollable pane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollPosition(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getScrollPosition"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IScrollablePaneContext:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrollablePaneContext "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrollablePaneContext",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneContext#scrollablePane:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollablePane?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        subscribe: (handler: (container: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", stickyContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) => void;\n        unsubscribe: (handler: (container: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", stickyContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void) => void;\n        addSticky: (sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void;\n        removeSticky: (sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void;\n        updateStickyRefHeights: () => void;\n        sortSticky: (sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ", sortAgain?: boolean) => void;\n        notifySubscribers: (sort?: boolean) => void;\n        syncScrollSticky: (sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollablePane",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 18
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface",
          "docComment": "/**\n * {@docCategory ScrollablePane}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrollablePaneProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ScrollablePaneBase",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrollablePaneProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps#className:member",
              "docComment": "/**\n * Additional css class to apply to the ScrollablePane\n *\n * @defaultvalue\n *\n * undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IScrollablePane interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePane",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePane:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps#initialScrollPosition:member",
              "docComment": "/**\n * Sets the initial scroll position of the ScrollablePane\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialScrollPosition?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initialScrollPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps#scrollbarVisibility:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollbarVisibility?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollbarVisibility",
                  "canonicalReference": "@fluentui/react-internal!ScrollbarVisibility:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollbarVisibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneStyles",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IScrollablePaneState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrollablePaneState "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrollablePaneState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneState#scrollbarHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollbarHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollbarHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneState#scrollbarWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollbarWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollbarWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneState#stickyBottomHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyBottomHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyBottomHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneState#stickyTopHeight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyTopHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyTopHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyleProps:interface",
          "docComment": "/**\n * {@docCategory ScrollablePane}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrollablePaneStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrollablePaneStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyleProps#className:member",
              "docComment": "/**\n * Accept custom classNames\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyleProps#scrollbarVisibility:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollbarVisibility?: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneProps",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "['scrollbarVisibility']"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scrollbarVisibility",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyleProps#theme:member",
              "docComment": "/**\n * Accept theme prop.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles:interface",
          "docComment": "/**\n * {@docCategory ScrollablePane}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IScrollablePaneStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IScrollablePaneStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles#contentContainer:member",
              "docComment": "/**\n * Style set for the contentContainer element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contentContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles#root:member",
              "docComment": "/**\n * Style set for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles#stickyAbove:member",
              "docComment": "/**\n * Style set for the stickyAbove element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyAbove: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyAbove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles#stickyBelow:member",
              "docComment": "/**\n * Style set for the stickyBelow element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyBelow: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyBelow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneStyles#stickyBelowItems:member",
              "docComment": "/**\n * Style set for the stickyBelowItems element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyBelowItems: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyBelowItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!isDark:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDark(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDark"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISearchBox:interface",
          "docComment": "/**\n * {@docCategory SearchBox}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISearchBox "
            }
          ],
          "releaseTag": "Public",
          "name": "ISearchBox",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBox#focus:member(1)",
              "docComment": "/**\n * Sets focus inside the search input box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBox#hasFocus:member(1)",
              "docComment": "/**\n * Returns whether or not the SearchBox has focus\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasFocus(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasFocus"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISearchBoxProps:interface",
          "docComment": "/**\n * {@docCategory SearchBox}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISearchBoxProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.InputHTMLAttributes",
              "canonicalReference": "@types/react!~React.InputHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISearchBoxProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#ariaLabel:member",
              "docComment": "/**\n * The aria label of the SearchBox for the benefit of screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#className:member",
              "docComment": "/**\n * CSS class to apply to the SearchBox.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#clearButtonProps:member",
              "docComment": "/**\n * The props for the clear button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clearButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ISearchBox interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Ref",
                  "canonicalReference": "@types/react!~React.Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISearchBox",
                  "canonicalReference": "@fluentui/react-internal!ISearchBox:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#defaultValue:member",
              "docComment": "/**\n * The default value of the text in the SearchBox, in the case of an uncontrolled component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#disableAnimation:member",
              "docComment": "/**\n * Whether or not to animate the SearchBox icon on focus.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableAnimation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disableAnimation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#iconProps:member",
              "docComment": "/**\n * The props for the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "Pick",
                  "canonicalReference": "!Pick:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<keyof "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", 'className'>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#labelText:member",
              "docComment": "/**\n * Deprecated. Use `placeholder` instead.\n *\n * @deprecated\n *\n * Use `placeholder` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#onChange:member",
              "docComment": "/**\n * Callback function for when the typed input for the SearchBox has changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(event?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ChangeEvent",
                  "canonicalReference": "@types/react!~React.ChangeEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, newValue?: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#onChanged:member",
              "docComment": "/**\n * Deprecated at v0.52.2, use `onChange` instead.\n *\n * @deprecated\n *\n * Use `onChange` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChanged?: "
                },
                {
                  "kind": "Content",
                  "text": "(newValue: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#onClear:member",
              "docComment": "/**\n * Callback executed when the user clears the search box by either clicking 'X' or hitting escape.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClear?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#onEscape:member",
              "docComment": "/**\n * Callback executed when the user presses escape in the search box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onEscape?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onEscape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#onSearch:member",
              "docComment": "/**\n * Callback executed when the user presses enter in the search box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSearch?: "
                },
                {
                  "kind": "Content",
                  "text": "(newValue: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSearch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#placeholder:member",
              "docComment": "/**\n * Placeholder for the search box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholder?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "placeholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#role:member",
              "docComment": "/**\n * The role assigned to the root DIV element of the SearchBox, useful for defining a landmark role, such as \"search\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "role?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "role",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISearchBoxStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ISearchBoxStyles",
                  "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#underlined:member",
              "docComment": "/**\n * Whether or not the SearchBox is underlined.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "underlined?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "underlined",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps#value:member",
              "docComment": "/**\n * The value of the text in the SearchBox.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps:interface",
          "docComment": "/**\n * {@docCategory SearchBox}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISearchBoxStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ISearchBoxStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#disableAnimation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableAnimation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disableAnimation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#disabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#hasFocus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#hasInput:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasInput?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasInput",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyleProps#underlined:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "underlined?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "underlined",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles:interface",
          "docComment": "/**\n * {@docCategory SearchBox}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISearchBoxStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISearchBoxStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles#clearButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearButton?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clearButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles#field:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "field?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "field",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles#icon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles#iconContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps:interface",
          "docComment": "/**\n * - `TComponent` - Component used for reference properties, such as `componentRef`. - `TListenerElement` - Listener element associated with HTML event callbacks. Optional. If not provided, `TComponent` is assumed. {@docCategory ISelectableDroppableTextProps}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectableDroppableTextProps<TComponent, TListenerElement> extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<TListenerElement> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TComponent",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TListenerElement",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISelectableDroppableTextProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#ariaLabel:member",
              "docComment": "/**\n * Aria Label for the ISelectableDroppableText for screen reader users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#calloutProps:member",
              "docComment": "/**\n * Custom properties for ISelectableDroppableText's Callout used to render options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#className:member",
              "docComment": "/**\n * If provided, additional class name to provide on the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ISelectableDroppableText interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<TComponent>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#defaultSelectedKey:member",
              "docComment": "/**\n * The key(s) that will be initially used to set a selected item.\n *\n * Mutually exclusive with `selectedKey`. For Dropdown in multi-select mode, use `defaultSelectedKeys` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSelectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number | string[] | number[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultSelectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#disabled:member",
              "docComment": "/**\n * Whether or not the ISelectableDroppableText is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#errorMessage:member",
              "docComment": "/**\n * Descriptive label for the ISelectableDroppableText Error Message\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "errorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#id:member",
              "docComment": "/**\n * Id of the ISelectableDroppableText\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#label:member",
              "docComment": "/**\n * Descriptive label for the ISelectableDroppableText\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#multiSelect:member",
              "docComment": "/**\n * Optional prop that indicates if multi-choice selections are allowed or not.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiSelect?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "multiSelect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#onDismiss:member",
              "docComment": "/**\n * Callback that is issued when the options callout is dismissed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#onRenderContainer:member",
              "docComment": "/**\n * Optional custom renderer for the ISelectableDroppableText container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISelectableDroppableTextProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TComponent, TListenerElement>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#onRenderItem:member",
              "docComment": "/**\n * Optional custom renderer for the ISelectableDroppableText options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderItem?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISelectableOption",
                  "canonicalReference": "@fluentui/react-internal!ISelectableOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#onRenderList:member",
              "docComment": "/**\n * Optional custom renderer for the ISelectableDroppableText list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderList?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISelectableDroppableTextProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TComponent, TListenerElement>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#onRenderOption:member",
              "docComment": "/**\n * Optional custom renderer for the ISelectableDroppableText option content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderOption?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISelectableOption",
                  "canonicalReference": "@fluentui/react-internal!ISelectableOption:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderOption",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#openOnKeyboardFocus:member",
              "docComment": "/**\n * Whether or not the ComboBox/Dropdown should expand on keyboard focus.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openOnKeyboardFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "openOnKeyboardFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#options:member",
              "docComment": "/**\n * Collection of options for this ISelectableDroppableText\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#panelProps:member",
              "docComment": "/**\n * Custom properties for ISelectableDroppableText's Panel used to render options on small devices.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "panelProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "panelProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#placeholder:member",
              "docComment": "/**\n * Input placeholder text. Displayed until option is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeholder?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "placeholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#required:member",
              "docComment": "/**\n * Whether or not the ISelectableDroppableText is required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "required?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "required",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableDroppableTextProps#selectedKey:member",
              "docComment": "/**\n * The key(s) of the selected item. If you provide this, you must maintain selection state by observing onChange events and passing a new value in when changed. Note that passing in `null` will cause selection to be reset.\n *\n * Mutually exclusive with `defaultSelectedKey`. For Dropdown in multi-select mode, use `selectedKeys` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedKey?: "
                },
                {
                  "kind": "Content",
                  "text": "string | number | string[] | number[] | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectableOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectableOption<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "ISelectableOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#ariaLabel:member",
              "docComment": "/**\n * The aria label for the dropdown option. If not present, the `text` will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#data:member",
              "docComment": "/**\n * Data available to custom onRender functions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data?: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#disabled:member",
              "docComment": "/**\n * Whether the option is disabled\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#hidden:member",
              "docComment": "/**\n * Defines whether the option is hidden or not.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hidden?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hidden",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#id:member",
              "docComment": "/**\n * ID attribute associated with this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#index:member",
              "docComment": "/**\n * Index for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#itemType:member",
              "docComment": "/**\n * Text to render for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemType?: "
                },
                {
                  "kind": "Reference",
                  "text": "SelectableOptionMenuItemType",
                  "canonicalReference": "@fluentui/react-internal!SelectableOptionMenuItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#key:member",
              "docComment": "/**\n * Arbitrary string associated with this option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#selected:member",
              "docComment": "/**\n * If option is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#text:member",
              "docComment": "/**\n * Text to render for this option\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectableOption#title:member",
              "docComment": "/**\n * Title attribute (built in tooltip) for a given option.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectedItemProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectedItemProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "IPickerItemProps",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISelectedItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedItemProps#onCopyItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCopyItem: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCopyItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps:interface",
          "docComment": "/**\n * {@docCategory SelectedPeopleList}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectedPeopleItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "ISelectedItemProps",
              "canonicalReference": "@fluentui/react-internal!ISelectedItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExtendedPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISelectedPeopleItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps#onExpandItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onExpandItem?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExpandItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps#renderPersonaCoin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderPersonaCoin?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderPersonaCoin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleItemProps#renderPrimaryText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderPrimaryText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderPrimaryText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps:interface",
          "docComment": "/**\n * {@docCategory SelectedPeopleList}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectedPeopleProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBaseSelectedItemsListProps",
              "canonicalReference": "@fluentui/react-internal!IBaseSelectedItemsListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IExtendedPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISelectedPeopleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#copyMenuItemText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyMenuItemText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "copyMenuItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#editMenuItemText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editMenuItemText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "editMenuItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#floatingPickerProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floatingPickerProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "floatingPickerProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#getEditingItemText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEditingItemText?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IExtendedPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getEditingItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#onExpandGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onExpandGroup?: "
                },
                {
                  "kind": "Content",
                  "text": "(item: "
                },
                {
                  "kind": "Reference",
                  "text": "IExtendedPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IExtendedPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExpandGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#onRenderFloatingPicker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderFloatingPicker?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ComponentType",
                  "canonicalReference": "@types/react!~React.ComponentType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IBaseFloatingPickerProps",
                  "canonicalReference": "@fluentui/react-internal!IBaseFloatingPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderFloatingPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectedPeopleProps#removeMenuItemText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeMenuItemText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeMenuItemText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectionZone:interface",
          "docComment": "/**\n * {@docCategory Selection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectionZone "
            }
          ],
          "releaseTag": "Public",
          "name": "ISelectionZone",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZone#ignoreNextFocus:member",
              "docComment": "/**\n * Method to ignore subsequent focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreNextFocus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreNextFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps:interface",
          "docComment": "/**\n * {@docCategory Selection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectionZoneProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SelectionZone",
              "canonicalReference": "@fluentui/react-internal!SelectionZone:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISelectionZoneProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the SelectionZone.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#componentRef:member",
              "docComment": "/**\n * Reference to the component interface.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#disableAutoSelectOnInputElements:member",
              "docComment": "/**\n * If true, disables automatic selection on input elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableAutoSelectOnInputElements?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disableAutoSelectOnInputElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#enableTouchInvocationTarget:member",
              "docComment": "/**\n * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets for an item if the user is using touch.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableTouchInvocationTarget?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableTouchInvocationTarget",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#enterModalOnTouch:member",
              "docComment": "/**\n * If true, modal selection is enabled on touch event.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enterModalOnTouch?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enterModalOnTouch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#isSelectedOnFocus:member",
              "docComment": "/**\n * Determines if an item is selected on focus.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSelectedOnFocus?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSelectedOnFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#layout:member",
              "docComment": "/**\n * @deprecated\n *\n * No longer in use, focus is now managed by {@link FocusZone}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layout?: "
                },
                {
                  "kind": "Content",
                  "text": "{}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#onItemContextMenu:member",
              "docComment": "/**\n * Optional callback for when an item's contextual menu action occurs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemContextMenu?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: any, index?: number, ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemContextMenu",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#onItemInvoked:member",
              "docComment": "/**\n * Optional callback for when an item is invoked via ENTER or double-click.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onItemInvoked?: "
                },
                {
                  "kind": "Content",
                  "text": "(item?: "
                },
                {
                  "kind": "Reference",
                  "text": "IObjectWithKey",
                  "canonicalReference": "@fluentui/utilities!IObjectWithKey:interface"
                },
                {
                  "kind": "Content",
                  "text": ", index?: number, ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onItemInvoked",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#selection:member",
              "docComment": "/**\n * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selection: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelection",
                  "canonicalReference": "@fluentui/utilities!ISelection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#selectionMode:member",
              "docComment": "/**\n * The mode of Selection, where the value is one of 'none', 'single', or 'multiple'.\n *\n * @defaultvalue\n *\n * {@link SelectionMode.multiple}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "SelectionMode",
                  "canonicalReference": "@fluentui/utilities!SelectionMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps#selectionPreservedOnEmptyClick:member",
              "docComment": "/**\n * If true, selection is preserved on outer click.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionPreservedOnEmptyClick?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionPreservedOnEmptyClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISelectionZoneState:interface",
          "docComment": "/**\n * {@docCategory Selection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISelectionZoneState "
            }
          ],
          "releaseTag": "Public",
          "name": "ISelectionZoneState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneState#isModal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isModal: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isModal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISeparator:interface",
          "docComment": "/**\n * {@docCategory Separator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISeparator "
            }
          ],
          "releaseTag": "Public",
          "name": "ISeparator",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISeparatorProps:interface",
          "docComment": "/**\n * {@docCategory Separator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISeparatorProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISeparatorProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps#alignContent:member",
              "docComment": "/**\n * Where the content should be aligned in the separator.\n *\n * @defaultValue\n *\n * 'center'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alignContent?: "
                },
                {
                  "kind": "Content",
                  "text": "'start' | 'center' | 'end'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alignContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISeparatorStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISeparatorStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ISeparatorStyles",
                  "canonicalReference": "@fluentui/react-internal!ISeparatorStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps#vertical:member",
              "docComment": "/**\n * Whether the element is a vertical separator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vertical?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vertical",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ISeparatorStyleProps:type",
          "docComment": "/**\n * {@docCategory Separator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ISeparatorStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISeparatorProps",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISeparatorProps",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'alignContent' | 'vertical'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ISeparatorStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISeparatorStyles:interface",
          "docComment": "/**\n * {@docCategory Separator}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISeparatorStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISeparatorStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISeparatorStyles#content:member",
              "docComment": "/**\n * Style for the content\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISeparatorStyles#root:member",
              "docComment": "/**\n * Style for the root element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerCircle:interface",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerCircle "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerCircle",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps:interface",
          "docComment": "/**\n * ShimmerCircle component props. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerCircleProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerCircleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps#borderStyle:member",
              "docComment": "/**\n * Use to set custom styling of the shimmerCircle borders.\n *\n * @deprecated\n *\n * Use `styles` prop to leverage mergeStyle API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRawStyle",
                  "canonicalReference": "@fluentui/merge-styles!IRawStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "borderStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IShimmerCircle interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerCircle",
                  "canonicalReference": "@fluentui/react-internal!IShimmerCircle:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps#height:member",
              "docComment": "/**\n * Sets the height of the circle.\n *\n * @defaultvalue\n *\n * 24px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerCircleStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IShimmerCircleStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerCircleStyles",
                  "canonicalReference": "@fluentui/react-internal!IShimmerCircleStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IShimmerCircleStyleProps:type",
          "docComment": "/**\n * Props needed to construct styles. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IShimmerCircleStyleProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    theme: "
            },
            {
              "kind": "Reference",
              "text": "ITheme",
              "canonicalReference": "@fluentui/theme!ITheme:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    height?: number;\n    borderStyle?: "
            },
            {
              "kind": "Reference",
              "text": "IRawStyle",
              "canonicalReference": "@fluentui/merge-styles!IRawStyle:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerCircleStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerCircleStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerCircleStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerCircleStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleStyles#root:member",
              "docComment": "/**\n * Root of the ShimmerCircle component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleStyles#svg:member",
              "docComment": "/**\n * Style for the circle SVG of the ShimmerCircle component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "svg?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "svg",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerColors:interface",
          "docComment": "/**\n * Interface describing the possible color customizations of Shimmer. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerColors "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerColors",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerColors#background:member",
              "docComment": "/**\n * Defines the background color of the space in between and around shimmer elements (borders, gaps and rounded corners).\n *\n * @defaultvalue\n *\n * theme.palette.white\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "background?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "background",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerColors#shimmer:member",
              "docComment": "/**\n * Defines the main background color which is the color you see when the wave is not animating.\n *\n * @defaultvalue\n *\n * theme.palette.neutralLight\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmer?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerColors#shimmerWave:member",
              "docComment": "/**\n * Defines the tip color of the shimmer wave which gradually gets from and to `shimmer` color.\n *\n * @defaultvalue\n *\n * theme.palette.neutralLighter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerWave?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerWave",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerElement:interface",
          "docComment": "/**\n * Shimmer Elements Interface representing all common properties between Gap, Circle and Line. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerElement "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerElement",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement#height:member",
              "docComment": "/**\n * Sets the height of the element (ICircle, ILine, IGap) in pixels. Read more details for each specific element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement#type:member",
              "docComment": "/**\n * Represents the possible type of the shimmer elements: Gap, Circle, Line. Required for every element you intend to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "ShimmerElementType",
                  "canonicalReference": "@fluentui/react-internal!ShimmerElementType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement#verticalAlign:member",
              "docComment": "/**\n * Sets vertical alignment of the element (ICircle, ILine).\n *\n * @defaultvalue\n *\n * center\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verticalAlign?: "
                },
                {
                  "kind": "Content",
                  "text": "'top' | 'center' | 'bottom'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "verticalAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElement#width:member",
              "docComment": "/**\n * Sets the width value of the element (ILine, IGap) in pixels. Read more details for each specific element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroup:interface",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerElementsGroup "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerElementsGroup",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps:interface",
          "docComment": "/**\n * ShimmerElementsGroup component props. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerElementsGroupProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerElementsGroupProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#backgroundColor:member",
              "docComment": "/**\n * Defines the background color of the space in between and around shimmer elements.\n *\n * @defaultvalue\n *\n * theme.palette.white\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IShimmerElementsGroup interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerElementsGroup",
                  "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroup:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#flexWrap:member",
              "docComment": "/**\n * Optional boolean for enabling flexWrap of the container containing the shimmerElements.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexWrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flexWrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#rowHeight:member",
              "docComment": "/**\n * Optional maximum row height of the shimmerElements container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rowHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rowHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#shimmerElements:member",
              "docComment": "/**\n * Elements to render in one group of the Shimmer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerElements?: "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerElement",
                  "canonicalReference": "@fluentui/react-internal!IShimmerElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerElementsGroupStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerElementsGroupStyles",
                  "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps#width:member",
              "docComment": "/**\n * Optional width for ShimmerElements container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyleProps:interface",
          "docComment": "/**\n * Props needed to construct styles. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerElementsGroupStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerElementsGroupStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyleProps#flexWrap:member",
              "docComment": "/**\n * Boolean flag to notify whether the root element needs to flex wrap.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flexWrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flexWrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerElementsGroupStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerElementsGroupStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupStyles#root:member",
              "docComment": "/**\n * Represents the wrapper root element holding all elements inside.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerGap:interface",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerGap "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerGap",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerGapProps:interface",
          "docComment": "/**\n * ShimmerGap component props. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerGapProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerGapProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps#borderStyle:member",
              "docComment": "/**\n * Use to set custom styling of the shimmerGap borders.\n *\n * @deprecated\n *\n * Use `styles` prop to leverage mergeStyle API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRawStyle",
                  "canonicalReference": "@fluentui/merge-styles!IRawStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "borderStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IShimmerGap interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerGap",
                  "canonicalReference": "@fluentui/react-internal!IShimmerGap:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps#height:member",
              "docComment": "/**\n * Sets the height of the gap.\n *\n * @defaultvalue\n *\n * 16px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerGapStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IShimmerGapStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerGapStyles",
                  "canonicalReference": "@fluentui/react-internal!IShimmerGapStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps#width:member",
              "docComment": "/**\n * Sets width value of the gap.\n *\n * @defaultvalue\n *\n * 10px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IShimmerGapStyleProps:type",
          "docComment": "/**\n * Props needed to construct styles. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IShimmerGapStyleProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    theme: "
            },
            {
              "kind": "Reference",
              "text": "ITheme",
              "canonicalReference": "@fluentui/theme!ITheme:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    height?: number;\n    borderStyle?: "
            },
            {
              "kind": "Reference",
              "text": "IRawStyle",
              "canonicalReference": "@fluentui/merge-styles!IRawStyle:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerGapStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerGapStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerGapStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerGapStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapStyles#root:member",
              "docComment": "/**\n * Root of the ShimmerGap component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerLine:interface",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerLine "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerLine",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerLineProps:interface",
          "docComment": "/**\n * ShimmerLine component props. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerLineProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerLineProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps#borderStyle:member",
              "docComment": "/**\n * Use to set custom styling of the shimmerLine borders.\n *\n * @deprecated\n *\n * Use `styles` prop to leverage mergeStyle API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRawStyle",
                  "canonicalReference": "@fluentui/merge-styles!IRawStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "borderStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the IShimmerLine interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerLine",
                  "canonicalReference": "@fluentui/react-internal!IShimmerLine:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps#height:member",
              "docComment": "/**\n * Sets the height of the rectangle.\n *\n * @defaultvalue\n *\n * 16px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerLineStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IShimmerLineStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerLineStyles",
                  "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps#width:member",
              "docComment": "/**\n * Sets width value of the line.\n *\n * @defaultvalue\n *\n * 100%\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IShimmerLineStyleProps:type",
          "docComment": "/**\n * Props needed to construct styles. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IShimmerLineStyleProps = "
            },
            {
              "kind": "Content",
              "text": "{\n    theme: "
            },
            {
              "kind": "Reference",
              "text": "ITheme",
              "canonicalReference": "@fluentui/theme!ITheme:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    height?: number;\n    borderStyle?: "
            },
            {
              "kind": "Reference",
              "text": "IRawStyle",
              "canonicalReference": "@fluentui/merge-styles!IRawStyle:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerLineStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerLineStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerLineStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles#bottomLeftCorner:member",
              "docComment": "/**\n * Bottom-left corner SVG of the ShimmerLine component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottomLeftCorner?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bottomLeftCorner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles#bottomRightCorner:member",
              "docComment": "/**\n * Bottom-right corner SVG of the ShimmerLine component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottomRightCorner?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bottomRightCorner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles#root:member",
              "docComment": "/**\n * Root of the ShimmerLine component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles#topLeftCorner:member",
              "docComment": "/**\n * Top-left corner SVG of the ShimmerLine component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topLeftCorner?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topLeftCorner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineStyles#topRightCorner:member",
              "docComment": "/**\n * Top-right corner SVG of the ShimmerLine component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topRightCorner?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topRightCorner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerProps:interface",
          "docComment": "/**\n * Shimmer component props. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#ariaLabel:member",
              "docComment": "/**\n * Localized string of the status label for screen reader\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the Shimmer container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#customElementsGroup:member",
              "docComment": "/**\n * Custom elements when necessary to build complex placeholder skeletons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customElementsGroup?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ReactNode",
                  "canonicalReference": "@types/react!~React.ReactNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "customElementsGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#isDataLoaded:member",
              "docComment": "/**\n * Controls when the shimmer is swapped with actual data through an animated transition.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDataLoaded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDataLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#shimmerColors:member",
              "docComment": "/**\n * Defines an object with possible colors to pass for Shimmer customization used on different backgrounds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerColors?: "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerColors",
                  "canonicalReference": "@fluentui/react-internal!IShimmerColors:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerColors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#shimmerElements:member",
              "docComment": "/**\n * Elements to render in one line of the Shimmer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerElements?: "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerElement",
                  "canonicalReference": "@fluentui/react-internal!IShimmerElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IShimmerStyles",
                  "canonicalReference": "@fluentui/react-internal!IShimmerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps#width:member",
              "docComment": "/**\n * Sets the width value of the shimmer wave wrapper.\n *\n * @defaultvalue\n *\n * 100%\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps:interface",
          "docComment": "/**\n * Defines props needed to construct styles. This represents the simplified set of immutable things which control the class names. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps#className:member",
              "docComment": "/**\n * Optional CSS class name for the component attached to the root stylable area.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps#isDataLoaded:member",
              "docComment": "/**\n * Boolean flag to trigger fadeIn/fadeOut transition animation when content is loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDataLoaded?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDataLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps#shimmerColor:member",
              "docComment": "/**\n * Color to be used as the main background color of Shimmer when not animating.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps#shimmerWaveColor:member",
              "docComment": "/**\n * Tip color of the shimmer wave which gradually gets from and to `shimmerColor`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerWaveColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerWaveColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyleProps#transitionAnimationInterval:member",
              "docComment": "/**\n * Interval in milliseconds for the adeIn/fadeOut transition animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transitionAnimationInterval?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transitionAnimationInterval",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IShimmerStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IShimmerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IShimmerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyles#dataWrapper:member",
              "docComment": "/**\n * Refers to wrapper element of the children only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyles#root:member",
              "docComment": "/**\n * Refers to the root wrapper element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyles#screenReaderText:member",
              "docComment": "/**\n * Styles for the hidden helper element to aid with screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyles#shimmerGradient:member",
              "docComment": "/**\n * Refers to gradient element of the shimmer animation only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerGradient?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerGradient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IShimmerStyles#shimmerWrapper:member",
              "docComment": "/**\n * Refers to wrapper element of the shimmer only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shimmerWrapper?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shimmerWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinButton:interface",
          "docComment": "/**\n * {@docCategory SpinButton}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinButton "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinButton",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButton#focus:member",
              "docComment": "/**\n * Sets focus to the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButton#value:member",
              "docComment": "/**\n * Current committed/validated value of the control. Note that this does *not* update on every keystroke while the user is editing text in the input field. \"committed\" the edit yet by focusing away (blurring) or pressing enter,\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinButtonProps:interface",
          "docComment": "/**\n * {@docCategory SpinButton}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinButtonProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinButtonProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#ariaDescribedBy:member",
              "docComment": "/**\n * ID of a label which describes the control, if not using the default label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#ariaLabel:member",
              "docComment": "/**\n * A description of the control for the benefit of screen reader users.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#ariaPositionInSet:member",
              "docComment": "/**\n * The position in the parent set (if in a set).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaPositionInSet?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaPositionInSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#ariaSetSize:member",
              "docComment": "/**\n * The total size of the parent set (if in a set).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaSetSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaSetSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#ariaValueNow:member",
              "docComment": "/**\n * Sets the control's aria-valuenow. This is the numeric form of `value`. Providing this only makes sense when using as a controlled component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaValueNow?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaValueNow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#ariaValueText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaValueText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaValueText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#className:member",
              "docComment": "/**\n * Custom className for the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISpinButton",
                  "canonicalReference": "@fluentui/react-internal!ISpinButton:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#decrementButtonAriaLabel:member",
              "docComment": "/**\n * Accessible label text for the decrement button (for screen reader users).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decrementButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decrementButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#decrementButtonIcon:member",
              "docComment": "/**\n * Custom props for the decrement button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decrementButtonIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decrementButtonIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#defaultValue:member",
              "docComment": "/**\n * Initial value of the control (assumed to be valid). Updates to this prop will not be respected.\n *\n * Use this if you intend for the SpinButton to be an uncontrolled component which maintains its own value. For a controlled component, use `value` instead. (Mutually exclusive with `value`.)\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#disabled:member",
              "docComment": "/**\n * Whether or not the control is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#downArrowButtonStyles:member",
              "docComment": "/**\n * Custom styles for the down arrow button.\n *\n * Note: The buttons are in a checked state when arrow keys are used to increment/decrement the SpinButton. Use `rootChecked` instead of `rootPressed` for styling when that is the case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "downArrowButtonStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonStyles",
                  "canonicalReference": "@fluentui/react-internal!IButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "downArrowButtonStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#iconButtonProps:member",
              "docComment": "/**\n * Additional props for the up and down arrow buttons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#iconProps:member",
              "docComment": "/**\n * Props for an icon to display alongside the control's label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#incrementButtonAriaLabel:member",
              "docComment": "/**\n * Accessible label text for the increment button (for screen reader users).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "incrementButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "incrementButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#incrementButtonIcon:member",
              "docComment": "/**\n * Custom props for the increment button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "incrementButtonIcon?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "incrementButtonIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#inputProps:member",
              "docComment": "/**\n * Additional props for the input field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.InputHTMLAttributes",
                  "canonicalReference": "@types/react!~React.InputHTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#keytipProps:member",
              "docComment": "/**\n * Keytip for the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytipProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytipProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#label:member",
              "docComment": "/**\n * Descriptive label for the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#labelPosition:member",
              "docComment": "/**\n * Where to position the control's label.\n *\n * @defaultvalue\n *\n * Left\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelPosition?: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@fluentui/react-internal!Position:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#max:member",
              "docComment": "/**\n * Max value of the control. If not provided, the control has no maximum value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#min:member",
              "docComment": "/**\n * Min value of the control. If not provided, the control has no minimum value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#onBlur:member",
              "docComment": "/**\n * Callback for when the control loses focus.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onBlur?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEventHandler",
                  "canonicalReference": "@types/react!~React.FocusEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onBlur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#onChange:member",
              "docComment": "/**\n * Callback for when the committed/validated value changes. This is called *after* `onIncrement`, `onDecrement`, or `onValidate`, on the following events: - User presses the up/down buttons (on single press or every spin) - User presses the up/down arrow keys (on single press or every spin) - User *commits* edits to the input text by focusing away (blurring) or pressing enter. Note that this is NOT called for every key press while the user is editing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "React.SyntheticEvent",
                  "canonicalReference": "@types/react!~React.SyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, newValue?: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#onDecrement:member",
              "docComment": "/**\n * Callback for when the decrement button or down arrow key is pressed.\n *\n * @param value - The current value to be decremented\n *\n * @param event - The event that triggered this decrement\n *\n * @returns If a string is returned, it will be used as the new value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDecrement?: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => string | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDecrement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#onFocus:member",
              "docComment": "/**\n * Callback for when the user focuses the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onFocus?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FocusEventHandler",
                  "canonicalReference": "@types/react!~React.FocusEventHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#onIncrement:member",
              "docComment": "/**\n * Callback for when the increment button or up arrow key is pressed.\n *\n * @param value - The current value to be incremented\n *\n * @param event - The event that triggered this increment\n *\n * @returns If a string is returned, it will be used as the new value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onIncrement?: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => string | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onIncrement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#onValidate:member",
              "docComment": "/**\n * Callback for when the entered value should be validated.\n *\n * @param value - The entered value to validate\n *\n * @param event - The event that triggered this validate, if any (for accessibility)\n *\n * @returns If a string is returned, it will be used as the new value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onValidate?: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string, event?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.SyntheticEvent",
                  "canonicalReference": "@types/react!~React.SyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => string | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onValidate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#precision:member",
              "docComment": "/**\n * How many decimal places the value should be rounded to.\n *\n * The default is calculated based on the precision of `step`: i.e. if step = 1, precision = 0. step = 0.0089, precision = 4. step = 300, precision = 2. step = 23.00, precision = 2.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "precision?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "precision",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#step:member",
              "docComment": "/**\n * Difference between two adjacent values of the control. This value is used to calculate the precision of the input if no `precision` is given. The precision calculated this way will always be \\>= 0.\n *\n * @defaultvalue\n *\n * 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "step?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "step",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#styles:member",
              "docComment": "/**\n * Custom styling for individual elements within the control.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISpinButtonStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ISpinButtonStyles",
                  "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#theme:member",
              "docComment": "/**\n * Theme provided by HOC.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#title:member",
              "docComment": "/**\n * A more descriptive title for the control, visible on its tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#upArrowButtonStyles:member",
              "docComment": "/**\n * Custom styles for the up arrow button.\n *\n * Note: The buttons are in a checked state when arrow keys are used to increment/decrement the SpinButton. Use `rootChecked` instead of `rootPressed` for styling when that is the case.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "upArrowButtonStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButtonStyles",
                  "canonicalReference": "@fluentui/react-internal!IButtonStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "upArrowButtonStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps#value:member",
              "docComment": "/**\n * Current value of the control (assumed to be valid).\n *\n * Only provide this if the SpinButton is a controlled component where you are maintaining its current state and passing updates based on change events; otherwise, use the `defaultValue` property. (Mutually exclusive with `defaultValue`.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps:interface",
          "docComment": "/**\n * {@docCategory SpinButton}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinButtonStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinButtonStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps#disabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps#isFocused:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFocused: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFocused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps#keyboardSpinDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyboardSpinDirection: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardSpinDirection",
                  "canonicalReference": "@fluentui/react-internal!KeyboardSpinDirection:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keyboardSpinDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps#labelPosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelPosition: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@fluentui/react-internal!Position:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles:interface",
          "docComment": "/**\n * {@docCategory SpinButton}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinButtonStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinButtonStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#arrowButtonsContainer:member",
              "docComment": "/**\n * Styles for the arrowButtonsContainer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "arrowButtonsContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "arrowButtonsContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#icon:member",
              "docComment": "/**\n * Style for the icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#input:member",
              "docComment": "/**\n * Styles for the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#label:member",
              "docComment": "/**\n * Style for the label text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#labelWrapper:member",
              "docComment": "/**\n * Style for the label wrapper element, which contains the icon and label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelWrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#root:member",
              "docComment": "/**\n * Styles for the root of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonStyles#spinButtonWrapper:member",
              "docComment": "/**\n * Style for the wrapper element of the input field and arrow buttons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spinButtonWrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "spinButtonWrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinner:interface",
          "docComment": "/**\n * {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinner "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinner",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinnerProps:interface",
          "docComment": "/**\n * Spinner component props. {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinnerProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinnerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#ariaLabel:member",
              "docComment": "/**\n * Alternative status label for screen reader\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#ariaLive:member",
              "docComment": "/**\n * Politeness setting for label update announcement.\n *\n * @defaultvalue\n *\n * polite\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLive?: "
                },
                {
                  "kind": "Content",
                  "text": "'assertive' | 'polite' | 'off'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the Spinner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ISpinner interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISpinner",
                  "canonicalReference": "@fluentui/react-internal!ISpinner:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#label:member",
              "docComment": "/**\n * The label to show next to the Spinner. Label updates will be announced to the screen readers. Use ariaLive to control politeness level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#labelPosition:member",
              "docComment": "/**\n * The position of the label in regards of the spinner animation.\n *\n * @defaultvalue\n *\n * SpinnerLabelPosition.bottom\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelPosition?: "
                },
                {
                  "kind": "Reference",
                  "text": "SpinnerLabelPosition",
                  "canonicalReference": "@fluentui/react-internal!SpinnerLabelPosition:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#size:member",
              "docComment": "/**\n * The size of Spinner to render. \\{ extraSmall, small, medium, large \\}\n *\n * @defaultvalue\n *\n * SpinnerType.medium\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "SpinnerSize",
                  "canonicalReference": "@fluentui/react-internal!SpinnerSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISpinnerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ISpinnerStyles",
                  "canonicalReference": "@fluentui/react-internal!ISpinnerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps#type:member",
              "docComment": "/**\n * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize` instead.\n *\n * @deprecated\n *\n * Use `SpinnerSize` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "SpinnerType",
                  "canonicalReference": "@fluentui/react-internal!SpinnerType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps:interface",
          "docComment": "/**\n * The props needed to construct styles. This represents the simplified set of immutable things which control the class names. {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinnerStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinnerStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps#className:member",
              "docComment": "/**\n * CSS class name for the component attached to the root stylable area.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps#labelPosition:member",
              "docComment": "/**\n * Position of the label in regards to the spinner animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelPosition?: "
                },
                {
                  "kind": "Reference",
                  "text": "SpinnerLabelPosition",
                  "canonicalReference": "@fluentui/react-internal!SpinnerLabelPosition:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps#size:member",
              "docComment": "/**\n * Size of the spinner animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "SpinnerSize",
                  "canonicalReference": "@fluentui/react-internal!SpinnerSize:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISpinnerStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the control. {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISpinnerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISpinnerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyles#circle:member",
              "docComment": "/**\n * Styles for the spinner circle animation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "circle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyles#label:member",
              "docComment": "/**\n * Styles for the label accompanying the circle.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyles#root:member",
              "docComment": "/**\n * Styles for the root element. Refers to the wrapper containing both the circle and the label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISpinnerStyles#screenReaderText:member",
              "docComment": "/**\n * Styles for the hidden helper element to aid with screen readers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenReaderText?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenReaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!isRelativeUrl:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRelativeUrl(url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isRelativeUrl"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackComponent:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackComponent = "
            },
            {
              "kind": "Reference",
              "text": "IComponent",
              "canonicalReference": "@fluentui/foundation-legacy!IComponent:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackProps",
              "canonicalReference": "@fluentui/react-internal!IStackProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackTokens",
              "canonicalReference": "@fluentui/react-internal!IStackTokens:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackStyles",
              "canonicalReference": "@fluentui/react-internal!IStackStyles:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackComponent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackItemComponent:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackItemComponent = "
            },
            {
              "kind": "Reference",
              "text": "IComponent",
              "canonicalReference": "@fluentui/foundation-legacy!IComponent:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemProps",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackItemTokens",
              "canonicalReference": "@fluentui/react-internal!IStackItemTokens:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackItemStyles",
              "canonicalReference": "@fluentui/react-internal!IStackItemStyles:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemComponent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStackItemProps:interface",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStackItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "IStackItemSlots",
              "canonicalReference": "@fluentui/react-internal!IStackItemSlots:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStyleableComponentProps",
              "canonicalReference": "@fluentui/foundation-legacy!IStyleableComponentProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemProps",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackItemTokens",
              "canonicalReference": "@fluentui/react-internal!IStackItemTokens:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackItemStyles",
              "canonicalReference": "@fluentui/react-internal!IStackItemStyles:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#align:member",
              "docComment": "/**\n * Defines how to align the StackItem along the x-axis (for vertical Stacks) or the y-axis (for horizontal Stacks).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "align?: "
                },
                {
                  "kind": "Content",
                  "text": "'auto' | 'stretch' | 'baseline' | 'start' | 'center' | 'end'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "align",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#className:member",
              "docComment": "/**\n * Defines a CSS class name used to style the StackItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#disableShrink:member",
              "docComment": "/**\n * Defines whether the StackItem should be prevented from shrinking. This can be used to prevent a StackItem from shrinking when it is inside of a Stack that has shrinking items.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableShrink?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disableShrink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#grow:member",
              "docComment": "/**\n * Defines how much to grow the StackItem in proportion to its siblings.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "grow?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | number | 'inherit' | 'initial' | 'unset'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "grow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#order:member",
              "docComment": "/**\n * Defines order of the StackItem.\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "order?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "order",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#shrink:member",
              "docComment": "/**\n * Defines at what ratio should the StackItem shrink to fit the available space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shrink?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | number | 'inherit' | 'initial' | 'unset'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shrink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps#verticalFill:member",
              "docComment": "/**\n * Defines whether the StackItem should take up 100% of the height of its parent.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verticalFill?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "verticalFill",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackItemSlot:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackItemSlot = "
            },
            {
              "kind": "Reference",
              "text": "ISlotProp",
              "canonicalReference": "@fluentui/foundation-legacy!ISlotProp:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemProps",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemSlot",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStackItemSlots:interface",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStackItemSlots "
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemSlots",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemSlots#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IHTMLSlot",
                  "canonicalReference": "@fluentui/foundation-legacy!IHTMLSlot:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackItemStyles:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackItemStyles = "
            },
            {
              "kind": "Reference",
              "text": "IComponentStyles",
              "canonicalReference": "@fluentui/foundation-legacy!IComponentStyles:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemSlots",
              "canonicalReference": "@fluentui/react-internal!IStackItemSlots:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemStyles",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackItemStylesReturnType:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackItemStylesReturnType = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemComponent",
              "canonicalReference": "@fluentui/react-internal!IStackItemComponent:type"
            },
            {
              "kind": "Content",
              "text": "['styles'], "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemStylesReturnType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackItemTokenReturnType:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackItemTokenReturnType = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemComponent",
              "canonicalReference": "@fluentui/react-internal!IStackItemComponent:type"
            },
            {
              "kind": "Content",
              "text": "['tokens'], "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemTokenReturnType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStackItemTokens:interface",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStackItemTokens "
            }
          ],
          "releaseTag": "Public",
          "name": "IStackItemTokens",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemTokens#margin:member",
              "docComment": "/**\n * Defines the margin to be applied to the StackItem relative to its container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "margin?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "margin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackItemTokens#padding:member",
              "docComment": "/**\n * Defines the padding to be applied to the StackItem contents relative to its border.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "padding?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "padding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStackProps:interface",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStackProps extends "
            },
            {
              "kind": "Reference",
              "text": "ISlottableProps",
              "canonicalReference": "@fluentui/foundation-legacy!ISlottableProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackSlots",
              "canonicalReference": "@fluentui/react-internal!IStackSlots:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStyleableComponentProps",
              "canonicalReference": "@fluentui/foundation-legacy!IStyleableComponentProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackProps",
              "canonicalReference": "@fluentui/react-internal!IStackProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackTokens",
              "canonicalReference": "@fluentui/react-internal!IStackTokens:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStackStyles",
              "canonicalReference": "@fluentui/react-internal!IStackStyles:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IStackProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#as:member",
              "docComment": "/**\n * Defines how to render the Stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "as?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementType",
                  "canonicalReference": "@types/react!~React.ElementType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "as",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#disableShrink:member",
              "docComment": "/**\n * Defines whether Stack children should not shrink to fit the available space.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disableShrink?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disableShrink",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#gap:member",
              "docComment": "/**\n * Defines the spacing between Stack children. The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'. If 'column gap' is omitted, it's set to the same value as 'row gap'.\n *\n * @deprecated\n *\n * Use `childrenGap` token in `IStackTokens` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gap?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#grow:member",
              "docComment": "/**\n * Defines how much to grow the Stack in proportion to its siblings.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "grow?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | number | 'inherit' | 'initial' | 'unset'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "grow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#horizontal:member",
              "docComment": "/**\n * Defines whether to render Stack children horizontally.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontal?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "horizontal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#horizontalAlign:member",
              "docComment": "/**\n * Defines how to align Stack children horizontally (along the x-axis).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontalAlign?: "
                },
                {
                  "kind": "Reference",
                  "text": "Alignment",
                  "canonicalReference": "@fluentui/react-internal!Alignment:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "horizontalAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#maxHeight:member",
              "docComment": "/**\n * Defines the maximum height that the Stack can take.\n *\n * @deprecated\n *\n * Use `maxHeight` token in `IStackTokens` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#maxWidth:member",
              "docComment": "/**\n * Defines the maximum width that the Stack can take.\n *\n * @deprecated\n *\n * Use `maxWidth` token in `IStackTokens` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#padding:member",
              "docComment": "/**\n * Defines the inner padding of the Stack.\n *\n * @deprecated\n *\n * Use `padding` token in `IStackTokens` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "padding?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "padding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#reversed:member",
              "docComment": "/**\n * Defines whether to render Stack children in the opposite direction (bottom-to-top if it's a vertical Stack and right-to-left if it's a horizontal Stack).\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reversed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "reversed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#verticalAlign:member",
              "docComment": "/**\n * Defines how to align Stack children vertically (along the y-axis).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verticalAlign?: "
                },
                {
                  "kind": "Reference",
                  "text": "Alignment",
                  "canonicalReference": "@fluentui/react-internal!Alignment:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "verticalAlign",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#verticalFill:member",
              "docComment": "/**\n * Defines whether the Stack should take up 100% of the height of its parent. This property is required to be set to true when using the `grow` flag on children in vertical oriented Stacks. Stacks are rendered as block elements and grow horizontally to the container already.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verticalFill?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "verticalFill",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackProps#wrap:member",
              "docComment": "/**\n * Defines whether Stack children should wrap onto multiple rows or columns when they are about to overflow the size of the Stack.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 14
            },
            {
              "startIndex": 15,
              "endIndex": 19
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackSlot:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackSlot = "
            },
            {
              "kind": "Reference",
              "text": "ISlotProp",
              "canonicalReference": "@fluentui/foundation-legacy!ISlotProp:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackProps",
              "canonicalReference": "@fluentui/react-internal!IStackProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackSlot",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStackSlots:interface",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStackSlots "
            }
          ],
          "releaseTag": "Public",
          "name": "IStackSlots",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackSlots#inner:member",
              "docComment": "/**\n * Defines a slot that is placed inside the root slot in order to achieve wrapping. Only used when the wrap property is set to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inner?: "
                },
                {
                  "kind": "Reference",
                  "text": "IHTMLSlot",
                  "canonicalReference": "@fluentui/foundation-legacy!IHTMLSlot:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackSlots#root:member",
              "docComment": "/**\n * Defines root slot of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IHTMLSlot",
                  "canonicalReference": "@fluentui/foundation-legacy!IHTMLSlot:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackStyles:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackStyles = "
            },
            {
              "kind": "Reference",
              "text": "IComponentStyles",
              "canonicalReference": "@fluentui/foundation-legacy!IComponentStyles:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackSlots",
              "canonicalReference": "@fluentui/react-internal!IStackSlots:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackStyles",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackStylesReturnType:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackStylesReturnType = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackComponent",
              "canonicalReference": "@fluentui/react-internal!IStackComponent:type"
            },
            {
              "kind": "Content",
              "text": "['styles'], "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackStylesReturnType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IStackTokenReturnType:type",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IStackTokenReturnType = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackComponent",
              "canonicalReference": "@fluentui/react-internal!IStackComponent:type"
            },
            {
              "kind": "Content",
              "text": "['tokens'], "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IStackTokenReturnType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStackTokens:interface",
          "docComment": "/**\n * {@docCategory Stack}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStackTokens "
            }
          ],
          "releaseTag": "Public",
          "name": "IStackTokens",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackTokens#childrenGap:member",
              "docComment": "/**\n * Defines the spacing between Stack children. The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'. If 'column gap' is omitted, it's set to the same value as 'row gap'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "childrenGap?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "childrenGap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackTokens#maxHeight:member",
              "docComment": "/**\n * Defines a maximum height for the Stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackTokens#maxWidth:member",
              "docComment": "/**\n * Defines a maximum width for the Stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStackTokens#padding:member",
              "docComment": "/**\n * Defines the padding to be applied to the Stack contents relative to its border.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "padding?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "padding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStickyProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStickyProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.Props",
              "canonicalReference": "@types/react!~React.Props:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Sticky",
              "canonicalReference": "@fluentui/react-internal!Sticky:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IStickyProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyProps#componentRef:member",
              "docComment": "/**\n * Gets ref to component interface.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IStickyProps",
                  "canonicalReference": "@fluentui/react-internal!IStickyProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyProps#isScrollSynced:member",
              "docComment": "/**\n * If true, then match scrolling position of placeholder element in Sticky.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isScrollSynced?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isScrollSynced",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyProps#stickyBackgroundColor:member",
              "docComment": "/**\n * color to apply as 'background-color' style for sticky element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyBackgroundColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyBackgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyProps#stickyClassName:member",
              "docComment": "/**\n * Class name to apply to the sticky element if component is sticky.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyProps#stickyPosition:member",
              "docComment": "/**\n * Region to render sticky component in.\n *\n * @defaultvalue\n *\n * Both\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stickyPosition?: "
                },
                {
                  "kind": "Reference",
                  "text": "StickyPositionType",
                  "canonicalReference": "@fluentui/react-internal!StickyPositionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IStickyState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStickyState "
            }
          ],
          "releaseTag": "Public",
          "name": "IStickyState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyState#distanceFromTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distanceFromTop?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distanceFromTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyState#isStickyBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isStickyBottom: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isStickyBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IStickyState#isStickyTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isStickyTop: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isStickyTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface",
          "docComment": "/**\n * Suggestion item props. Refers to the each individual suggested items rendered within Suggestions callout. Type T is the type of the item that is displayed. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionItemProps<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestionItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#className:member",
              "docComment": "/**\n * Optional className for the root element of the suggestion item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ISuggestionItem interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsItem",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#id:member",
              "docComment": "/**\n * Unique id of the suggested item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#isSelectedOverride:member",
              "docComment": "/**\n * An override for the 'selected' property of the SuggestionModel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSelectedOverride?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSelectedOverride",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#onClick:member",
              "docComment": "/**\n * Callback for when the user clicks on the suggestion.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#onRemoveItem:member",
              "docComment": "/**\n * Callback for when the item is removed from the array of suggested items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRemoveItem: "
                },
                {
                  "kind": "Content",
                  "text": "(ev: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLButtonElement",
                  "canonicalReference": "!HTMLButtonElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRemoveItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#removeButtonAriaLabel:member",
              "docComment": "/**\n * The ARIA label for the button to remove the suggestion from the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeButtonAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeButtonAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#RenderSuggestion:member",
              "docComment": "/**\n * Optional renderer to override the default one for each type of picker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RenderSuggestion: "
                },
                {
                  "kind": "Content",
                  "text": "(item: T, suggestionItemProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "RenderSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#showRemoveButton:member",
              "docComment": "/**\n * Whether the remove button should be rendered or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showRemoveButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showRemoveButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsItemStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsItemStyles",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#suggestionModel:member",
              "docComment": "/**\n * Individual suggestion object containing its properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionModel: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionModel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface",
          "docComment": "/**\n * SuggestionModel interface. Type T is the type of the item that is suggested (Persona, Tag or any other custom picker). {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionModel<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestionModel",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionModel#ariaLabel:member",
              "docComment": "/**\n * Aria-label string for each suggested item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionModel#item:member",
              "docComment": "/**\n * The suggested item of the type T\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "item: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "item",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionModel#selected:member",
              "docComment": "/**\n * Whether the suggested item is selected or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestions:interface",
          "docComment": "/**\n * Suggestions component. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestions<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#executeSelectedAction:member",
              "docComment": "/**\n * Execute the action selected. Can be SearchMore or ForceResolve actions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeSelectedAction: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "executeSelectedAction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#focusAboveSuggestions:member",
              "docComment": "/**\n * Focus on the ForceResolve action above the suggestions. If not available then focus on SearchMore action.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusAboveSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusAboveSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#focusBelowSuggestions:member",
              "docComment": "/**\n * Focus on the SearchMore action below the suggestions. If not available then focus on ForceResolve action.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusBelowSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusBelowSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#focusSearchForMoreButton:member",
              "docComment": "/**\n * Focus the SearchMore action button.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusSearchForMoreButton: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusSearchForMoreButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#hasSuggestedAction:member",
              "docComment": "/**\n * Whether it has any suggested actions like ForceResolve or SearchMore.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSuggestedAction: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasSuggestedAction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#hasSuggestedActionSelected:member",
              "docComment": "/**\n * Whether any of the suggested actions (ForceResolve or SearchMore) is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSuggestedActionSelected: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasSuggestedActionSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestions#tryHandleKeyDown:member",
              "docComment": "/**\n * Returns true if the event was handled, false otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryHandleKeyDown: "
                },
                {
                  "kind": "Content",
                  "text": "(keyCode: number, currentSuggestionIndex: number) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tryHandleKeyDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsControlProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsCoreProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestionsControlProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#className:member",
              "docComment": "/**\n * The CSS classname of the suggestions list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#completeSuggestion:member",
              "docComment": "/**\n * Completes the suggestion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "completeSuggestion: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "completeSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#footerItemsProps:member",
              "docComment": "/**\n * The footer items props\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footerItemsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsHeaderFooterProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "footerItemsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#headerItemsProps:member",
              "docComment": "/**\n * The header items props\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerItemsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsHeaderFooterProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headerItemsProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#shouldSelectFirstItem:member",
              "docComment": "/**\n * Whether or not the first selectable item in the suggestions list should be selected\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldSelectFirstItem?: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldSelectFirstItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#suggestionsFooterContainerAriaLabel:member",
              "docComment": "/**\n * An ARIA label for the container that is the parent of the suggestions footer items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsFooterContainerAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsFooterContainerAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps#suggestionsHeaderContainerAriaLabel:member",
              "docComment": "/**\n * An ARIA label for the container that is the parent of the suggestions header items.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsHeaderContainerAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsHeaderContainerAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            },
            {
              "startIndex": 4,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsControlState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsControlState<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestionsControlState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlState#selectedFooterIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedFooterIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedFooterIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlState#selectedHeaderIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedHeaderIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedHeaderIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlState#suggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsCoreProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.ClassAttributes",
              "canonicalReference": "@types/react!~React.ClassAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<any> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestionsCoreProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#componentRef:member",
              "docComment": "/**\n * Gets the component ref.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#onRenderSuggestion:member",
              "docComment": "/**\n * How the suggestion should look in the suggestion list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSuggestion?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: T, suggestionItemProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#onSuggestionClick:member",
              "docComment": "/**\n * What should occur when a suggestion is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuggestionClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: any, index?: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#onSuggestionRemove:member",
              "docComment": "/**\n * Function to fire when one of the optional remove buttons on a suggestion is clicked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuggestionRemove?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", index?: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionRemove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#resultsMaximumNumber:member",
              "docComment": "/**\n * Maximum number of suggestions to show in the full suggestion list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resultsMaximumNumber?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resultsMaximumNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#shouldLoopSelection:member",
              "docComment": "/**\n * Indicates whether to loop around to the top or bottom of the suggestions on calling nextSuggestion and previousSuggestion, respectively\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldLoopSelection: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldLoopSelection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#showRemoveButtons:member",
              "docComment": "/**\n * Indicates whether to show a button with each suggestion to remove that suggestion.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showRemoveButtons?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showRemoveButtons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#suggestions:member",
              "docComment": "/**\n * The list of Suggestions that will be displayed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#suggestionsAvailableAlertText:member",
              "docComment": "/**\n * Screen reader message to read when there are suggestions available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsAvailableAlertText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsAvailableAlertText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#suggestionsContainerAriaLabel:member",
              "docComment": "/**\n * An ARIA label for the container that is the parent of the suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsContainerAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsContainerAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps#suggestionsItemClassName:member",
              "docComment": "/**\n * the classname of the suggestion item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsItemClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsItemClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsHeaderFooterItemProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsHeaderFooterItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps#componentRef:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps#isSelected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSelected: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSelected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps#onExecute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onExecute?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExecute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps#renderItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItem: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsHeaderFooterProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsHeaderFooterProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps#ariaLabel:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps#onExecute:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onExecute?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onExecute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps#renderItem:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderItem: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterProps#shouldShow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldShow: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldShow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsItem:interface",
          "docComment": "/**\n * SuggestionItem component. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsItem "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsItem",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyleProps:type",
          "docComment": "/**\n * The props needed to construct SuggestionItem styles. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ISuggestionsItemStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionItemProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionItemProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, 'className'> & {\n    suggested?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsItemStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the SuggestionItem. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsItemStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyles#closeButton:member",
              "docComment": "/**\n * Refers to the remove button in case it's rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyles#itemButton:member",
              "docComment": "/**\n * Refers to the CommandButton holding the content of the suggested item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsItemStyles#root:member",
              "docComment": "/**\n * Root element of the suggested item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface",
          "docComment": "/**\n * Suggestions props interface. Refers to the entire container holding all the suggestions. Type T is the type of the items that are displayed. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsProps<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Props",
              "canonicalReference": "@types/react!~React.Props:interface"
            },
            {
              "kind": "Content",
              "text": "<any> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ISuggestionsProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#className:member",
              "docComment": "/**\n * The CSS className of the suggestions root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ISuggestions interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestions",
                  "canonicalReference": "@fluentui/react-internal!ISuggestions:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#createGenericItem:member",
              "docComment": "/**\n * The callback that should be called when the user attempts to use the input text as as item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGenericItem?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "createGenericItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#forceResolveText:member",
              "docComment": "/**\n * The text that appears indicating to the use to force resolve the input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceResolveText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceResolveText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#isLoading:member",
              "docComment": "/**\n * Used to indicate whether or not the suggestions are loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLoading?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#isMostRecentlyUsedVisible:member",
              "docComment": "/**\n * Indicates if a short list of recent suggestions should be shown.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMostRecentlyUsedVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isMostRecentlyUsedVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#isResultsFooterVisible:member",
              "docComment": "/**\n * Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isResultsFooterVisible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isResultsFooterVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#isSearching:member",
              "docComment": "/**\n * Used to indicate whether or not the component is searching for more results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSearching?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isSearching",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#loadingText:member",
              "docComment": "/**\n * The text to display while the results are loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadingText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadingText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#moreSuggestionsAvailable:member",
              "docComment": "/**\n * Used to indicate whether or not the user can request more suggestions. Dictates whether or not the searchForMore button is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "moreSuggestionsAvailable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "moreSuggestionsAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#mostRecentlyUsedHeaderText:member",
              "docComment": "/**\n * The text that should appear at the top of the most recently used box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mostRecentlyUsedHeaderText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mostRecentlyUsedHeaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#noResultsFoundText:member",
              "docComment": "/**\n * The text that should appear if no results are found when searching.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noResultsFoundText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "noResultsFoundText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#onGetMoreResults:member",
              "docComment": "/**\n * The callback that should be called when the user attempts to get more results\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onGetMoreResults?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGetMoreResults",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#onRenderNoResultFound:member",
              "docComment": "/**\n * How the \"no result found\" should look in the suggestion list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderNoResultFound?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderNoResultFound",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#onRenderSuggestion:member",
              "docComment": "/**\n * How the suggestion should look in the suggestion list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSuggestion: "
                },
                {
                  "kind": "Content",
                  "text": "(props: T, suggestionItemProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#onSuggestionClick:member",
              "docComment": "/**\n * What should occur when a suggestion is clicked\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuggestionClick: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: any, index?: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionClick",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#onSuggestionRemove:member",
              "docComment": "/**\n * Function to fire when one of the optional remove buttons on a suggestion is clicked.\n *\n * TODO (adjective-object) remove IPersonaprops before the next major version bump\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSuggestionRemove?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.MouseEvent",
                  "canonicalReference": "@types/react!~React.MouseEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, item?: T | "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", index?: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onSuggestionRemove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#refocusSuggestions:member",
              "docComment": "/**\n * A function that resets focus to the expected item in the suggestion list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refocusSuggestions?: "
                },
                {
                  "kind": "Content",
                  "text": "(keyCode: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyCodes",
                  "canonicalReference": "@fluentui/utilities!KeyCodes:type"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "refocusSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#removeSuggestionAriaLabel:member",
              "docComment": "/**\n * An ARIA label to use for the buttons to remove individual suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSuggestionAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeSuggestionAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#resultsFooter:member",
              "docComment": "/**\n * A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resultsFooter?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resultsFooter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#resultsFooterFull:member",
              "docComment": "/**\n * A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resultsFooterFull?: "
                },
                {
                  "kind": "Content",
                  "text": "(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resultsFooterFull",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#resultsMaximumNumber:member",
              "docComment": "/**\n * Maximum number of suggestions to show in the full suggestion list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resultsMaximumNumber?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resultsMaximumNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#searchErrorText:member",
              "docComment": "/**\n * The text that should appear if there is a search error.\n *\n * @deprecated\n *\n * Use noResultsFoundText instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchErrorText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchErrorText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#searchForMoreText:member",
              "docComment": "/**\n * The text that appears indicating to the user that they can search for more results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchForMoreText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchForMoreText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#searchingText:member",
              "docComment": "/**\n * The text to display while searching for more results in a limited suggestions list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchingText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchingText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#showForceResolve:member",
              "docComment": "/**\n * The callback that should be called to see if the force resolve command should be shown\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showForceResolve?: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showForceResolve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#showRemoveButtons:member",
              "docComment": "/**\n * Indicates whether to show a button with each suggestion to remove that suggestion.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showRemoveButtons?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showRemoveButtons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestions:member",
              "docComment": "/**\n * The list of Suggestions that will be displayed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestionsAvailableAlertText:member",
              "docComment": "/**\n * Screen reader message to read when there are suggestions available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsAvailableAlertText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsAvailableAlertText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestionsClassName:member",
              "docComment": "/**\n * The CSS className of the suggestions list\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestionsContainerAriaLabel:member",
              "docComment": "/**\n * An ARIA label for the container that is the parent of the suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsContainerAriaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsContainerAriaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestionsHeaderText:member",
              "docComment": "/**\n * The text that appears at the top of the suggestions list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsHeaderText?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsHeaderText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestionsItemClassName:member",
              "docComment": "/**\n * The className of the suggestion item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsItemClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsItemClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#suggestionsListId:member",
              "docComment": "/**\n * The string that will be used as the suggestionsListId. Will be used by the BasePicker to keep track of the list for aria.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsListId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsListId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsState "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsState#selectedActionType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedActionType: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionActionType",
                  "canonicalReference": "@fluentui/react-internal!SuggestionActionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedActionType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsStyleProps:type",
          "docComment": "/**\n * The props needed to construct Suggestions styles. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ISuggestionsStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
            },
            {
              "kind": "Content",
              "text": "<any>, 'className' | 'suggestionsClassName'> & {\n    forceResolveButtonSelected?: boolean;\n    searchForMoreButtonSelected?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the Suggestions. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#forceResolveButton:member",
              "docComment": "/**\n * Refers to the 'Force resolve' actionButton.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceResolveButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceResolveButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#noSuggestions:member",
              "docComment": "/**\n * Refers to the text rendered when no suggestions are found.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noSuggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "noSuggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#root:member",
              "docComment": "/**\n * Root element of the suggestions outer wrapper.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#searchForMoreButton:member",
              "docComment": "/**\n * Refers to the 'Search for more' actionButton.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchForMoreButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "searchForMoreButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#subComponentStyles:member",
              "docComment": "/**\n * SubComponents (Spinner) styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#suggestionsAvailable:member",
              "docComment": "/**\n * Refers to the text displaying if more suggestions available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsAvailable: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsAvailable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#suggestionsContainer:member",
              "docComment": "/**\n * Refers to the suggestions container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionsContainer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionsContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsStyles#title:member",
              "docComment": "/**\n * Refers to the title rendered for suggestions container header and/or footer (if provided).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISuggestionsSubComponentStyles:interface",
          "docComment": "/**\n * Styles interface of the SubComponents rendered within PeoplePickerItemSelected. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISuggestionsSubComponentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISuggestionsSubComponentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsSubComponentStyles#spinner:member",
              "docComment": "/**\n * Refers to the Spinner rendered within the Suggestions when searching or loading suggestions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spinner: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISpinnerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISpinnerStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "spinner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!isValidShade:function(1)",
          "docComment": "/**\n * Returns true if the argument is a valid Shade value\n *\n * @param shade - The Shade value to validate.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidShade(shade?: "
            },
            {
              "kind": "Reference",
              "text": "Shade",
              "canonicalReference": "@fluentui/react-internal!Shade:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "shade",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isValidShade"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps:interface",
          "docComment": "/**\n * {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISwatchColorPickerProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ISwatchColorPickerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#ariaPosInSet:member",
              "docComment": "/**\n * Position this grid is in the parent set (index in a parent menu, for example)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaPosInSet?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaPosInSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#ariaSetSize:member",
              "docComment": "/**\n * Size of the parent set (size of parent menu, for example)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaSetSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaSetSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#cellBorderWidth:member",
              "docComment": "/**\n * Width of the border indicating a hovered/selected cell, in pixels\n *\n * @defaultvalue\n *\n * If `cellWidth` is less than 24px, then default value is 2px. Otherwise it defaults to 4px.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellBorderWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellBorderWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#cellHeight:member",
              "docComment": "/**\n * Height of an individual cell, in pixels\n *\n * @defaultvalue\n *\n * 20\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#cellMargin:member",
              "docComment": "/**\n * The distance between cells, in pixels\n *\n * @defaultvalue\n *\n * 10\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellMargin?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellMargin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#cellShape:member",
              "docComment": "/**\n * The shape of the color cells.  @default 'circle'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellShape?: "
                },
                {
                  "kind": "Content",
                  "text": "'circle' | 'square'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellShape",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#cellWidth:member",
              "docComment": "/**\n * Width of an individual cell, in pixels\n *\n * @defaultvalue\n *\n * 20\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#className:member",
              "docComment": "/**\n * Additional class name to provide on the root element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#colorCells:member",
              "docComment": "/**\n * The color cells that will be made available to the user.\n *\n * Note: When the reference to this prop changes, regardless of how many color cells change, all of the color cells will be re-rendered (potentially bad perf) because we memoize based on this prop's reference.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorCells: "
                },
                {
                  "kind": "Reference",
                  "text": "IColorCellProps",
                  "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "colorCells",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#columnCount:member",
              "docComment": "/**\n * Number of columns for the swatch color picker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columnCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "columnCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#defaultSelectedId:member",
              "docComment": "/**\n * ID of the default selected color swatch. Only provide this if the SwatchColorPicker is an uncontrolled component; otherwise, use the `selectedId` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultSelectedId?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultSelectedId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#disabled:member",
              "docComment": "/**\n * Whether the control is disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#doNotContainWithinFocusZone:member",
              "docComment": "/**\n * If false (the default), the grid is contained inside a FocusZone. If true, a FocusZone is not used.  @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doNotContainWithinFocusZone?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "doNotContainWithinFocusZone",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#focusOnHover:member",
              "docComment": "/**\n * Whether to update focus when a cell is hovered.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusOnHover?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusOnHover",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#getColorGridCellStyles:member",
              "docComment": "/**\n * Styles for the grid cells.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getColorGridCellStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerGridCellStyleProps",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IColorPickerGridCellStyles",
                  "canonicalReference": "@fluentui/react-internal!IColorPickerGridCellStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getColorGridCellStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#id:member",
              "docComment": "/**\n * ID for the swatch color picker's root element. Also used as a prefix for the IDs of color cells.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#isControlled:member",
              "docComment": "/**\n * @deprecated\n *\n * No longer used. Provide `selectedId` if controlled or `defaultSelectedId` if uncontrolled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isControlled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isControlled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#mouseLeaveParentSelector:member",
              "docComment": "/**\n * Selector to focus on mouse leave. Should only be used in conjunction with `focusOnHover`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mouseLeaveParentSelector?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mouseLeaveParentSelector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#onCellFocused:member",
              "docComment": "/**\n * Callback for when the user focuses a color cell. If `id` and `color` are unspecified, cells are no longer being focused.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCellFocused?: "
                },
                {
                  "kind": "Content",
                  "text": "(id?: string, color?: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCellFocused",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#onCellHovered:member",
              "docComment": "/**\n * Callback for when the user hovers over a color cell. If `id` and `color` are unspecified, cells are no longer being hovered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onCellHovered?: "
                },
                {
                  "kind": "Content",
                  "text": "(id?: string, color?: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onCellHovered",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#onChange:member",
              "docComment": "/**\n * Callback for when the user changes the color. If `id` and `color` are unspecified, there is no selected cell. (e.g. the user executed the currently selected cell to unselect it)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FormEvent",
                  "canonicalReference": "@types/react!~React.FormEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, id: string | undefined, color: string | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#onColorChanged:member",
              "docComment": "/**\n * @deprecated\n *\n * Use `onChange`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onColorChanged?: "
                },
                {
                  "kind": "Content",
                  "text": "(id?: string, color?: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onColorChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#onRenderColorCell:member",
              "docComment": "/**\n * Custom render function for the color cell\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderColorCell?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IColorCellProps",
                  "canonicalReference": "@fluentui/react-internal!IColorCellProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderColorCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#selectedId:member",
              "docComment": "/**\n * ID of the current selected color swatch. Only provide this if the SwatchColorPicker is a controlled component where you are maintaining its current state; otherwise, use the `defaultSelectedId` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectedId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#shouldFocusCircularNavigate:member",
              "docComment": "/**\n * Whether focus should cycle back to the beginning once the user navigates past the end (and vice versa). Only relevant if `doNotContainWithinFocusZone` is not true.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldFocusCircularNavigate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldFocusCircularNavigate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#styles:member",
              "docComment": "/**\n * Styles for the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISwatchColorPickerStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ISwatchColorPickerStyles",
                  "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps#theme:member",
              "docComment": "/**\n * Theme to apply to the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyleProps:interface",
          "docComment": "/**\n * Properties required to build the styles for the color picker component. {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISwatchColorPickerStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ISwatchColorPickerStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyleProps#cellMargin:member",
              "docComment": "/**\n * The distance between cells\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cellMargin?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cellMargin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyleProps#className:member",
              "docComment": "/**\n * Custom className to apply to the container.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyleProps#theme:member",
              "docComment": "/**\n * Theme to apply to the container\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyles:interface",
          "docComment": "/**\n * Styles for the SwatchColorPicker. {@docCategory SwatchColorPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISwatchColorPickerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ISwatchColorPickerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyles#focusedContainer:member",
              "docComment": "/**\n * Style for the FocusZone container for the grid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusedContainer?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusedContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyles#root:member",
              "docComment": "/**\n * Style applied to the container grid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerStyles#tableCell:member",
              "docComment": "/**\n * Style for the table cells of the grid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tableCell: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tableCell",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITag:interface",
          "docComment": "/**\n * TagPickerItem item interface. {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITag "
            }
          ],
          "releaseTag": "Public",
          "name": "ITag",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITag#key:member",
              "docComment": "/**\n * Unique key for the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITag#name:member",
              "docComment": "/**\n * Name of the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITagItemProps:interface",
          "docComment": "/**\n * TagItem component props {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITagItemProps extends "
            },
            {
              "kind": "Reference",
              "text": "IPickerItemProps",
              "canonicalReference": "@fluentui/react-internal!IPickerItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITag",
              "canonicalReference": "@fluentui/react-internal!ITag:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITagItemProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the TagItem root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps#enableTagFocusInDisabledPicker:member",
              "docComment": "/**\n * Enable or not focus on TagItem when TagPicker is disabled.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableTagFocusInDisabledPicker?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableTagFocusInDisabledPicker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITagItemStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ITagItemStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ITagItemStyles",
                  "canonicalReference": "@fluentui/react-internal!ITagItemStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps#title:member",
              "docComment": "/**\n * The title (and aria-label) attribute used by the TagItem text element.\n *\n * @defaultvalue\n *\n * children if of type string or item.name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITagItemStyleProps:type",
          "docComment": "/**\n * The props needed to construct TagItem styles. {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITagItemStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagItemProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagItemProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'selected' | 'disabled'> & {}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITagItemStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITagItemStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the TagItem. {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITagItemStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITagItemStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemStyles#close:member",
              "docComment": "/**\n * Refers to the cancel action button on a picked TagItem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "close",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemStyles#root:member",
              "docComment": "/**\n * Root element of picked TagItem\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemStyles#text:member",
              "docComment": "/**\n * Refers to the text element of the TagItem already picked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps:interface",
          "docComment": "/**\n * TagItemSuggestion component props {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITagItemSuggestionProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITagItemSuggestionProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps#className:member",
              "docComment": "/**\n * Additional CSS class(es) to apply to the TagItemSuggestion div element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITagItemSuggestionStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ITagItemSuggestionStyles",
                  "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionStyleProps:type",
          "docComment": "/**\n * The props needed to construct TagItemSuggestion styles. {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITagItemSuggestionStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className'> & {}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITagItemSuggestionStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionStyles:interface",
          "docComment": "/**\n * Represents the stylable areas of the TagItemSuggestion {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITagItemSuggestionStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITagItemSuggestionStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionStyles#suggestionTextOverflow:member",
              "docComment": "/**\n * Refers to the text element of the TagItemSuggestion\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestionTextOverflow?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestionTextOverflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITagPickerProps:interface",
          "docComment": "/**\n * TagPicker component props {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITagPickerProps extends "
            },
            {
              "kind": "Reference",
              "text": "IBasePickerProps",
              "canonicalReference": "@fluentui/react-internal!IBasePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITag",
              "canonicalReference": "@fluentui/react-internal!ITag:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITagPickerProps",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITeachingBubble:interface",
          "docComment": "/**\n * {@docCategory TeachingBubble}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITeachingBubble "
            }
          ],
          "releaseTag": "Public",
          "name": "ITeachingBubble",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubble#focus:member(1)",
              "docComment": "/**\n * Sets focus to the TeachingBubble root element\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface",
          "docComment": "/**\n * TeachingBubble component props. {@docCategory TeachingBubble}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITeachingBubbleProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IAccessiblePopupProps",
              "canonicalReference": "@fluentui/react-internal!IAccessiblePopupProps:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ITeachingBubbleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#ariaDescribedBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing the description for the TeachingBubble.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#ariaLabelledBy:member",
              "docComment": "/**\n * Defines the element id referencing the element containing label text for TeachingBubble.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabelledBy?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabelledBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#calloutProps:member",
              "docComment": "/**\n * Properties to pass through for Callout, reference detail properties in ICalloutProps\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ITeachingBubble interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITeachingBubble",
                  "canonicalReference": "@fluentui/react-internal!ITeachingBubble:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#focusTrapZoneProps:member",
              "docComment": "/**\n * Properties to pass through for FocusTrapZone, reference detail properties in IFocusTrapZoneProps\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusTrapZoneProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFocusTrapZoneProps",
                  "canonicalReference": "@fluentui/react-internal!IFocusTrapZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focusTrapZoneProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#footerContent:member",
              "docComment": "/**\n * Text that will be rendered in the footer of the TeachingBubble. May be rendered alongside primary and secondary buttons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footerContent?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "footerContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#hasCloseButton:member",
              "docComment": "/**\n * Whether the TeachingBubble renders close button in the top right corner.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCloseButton?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCloseButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#hasCloseIcon:member",
              "docComment": "/**\n * @deprecated\n *\n * Use `hasCloseButton`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCloseIcon?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCloseIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#hasCondensedHeadline:member",
              "docComment": "/**\n * A variation with smaller bold headline and no margins.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasCondensedHeadline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasCondensedHeadline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#hasSmallHeadline:member",
              "docComment": "/**\n * A variation with smaller bold headline and margins to the body. (`hasCondensedHeadline` takes precedence if it is also set to true.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSmallHeadline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasSmallHeadline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#headline:member",
              "docComment": "/**\n * A headline for the Teaching Bubble.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headline?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#illustrationImage:member",
              "docComment": "/**\n * An Image for the TeachingBubble.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "illustrationImage?: "
                },
                {
                  "kind": "Reference",
                  "text": "IImageProps",
                  "canonicalReference": "@fluentui/react-internal!IImageProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "illustrationImage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#isWide:member",
              "docComment": "/**\n * Whether or not the TeachingBubble is wide, with image on the left side.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isWide?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isWide",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#onDismiss:member",
              "docComment": "/**\n * Callback when the TeachingBubble tries to close.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDismiss?: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: any) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onDismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#primaryButtonProps:member",
              "docComment": "/**\n * The Primary interaction button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#secondaryButtonProps:member",
              "docComment": "/**\n * The Secondary interaction button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryButtonProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IButtonProps",
                  "canonicalReference": "@fluentui/react-internal!IButtonProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryButtonProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITeachingBubbleStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ITeachingBubbleStyles",
                  "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#target:member",
              "docComment": "/**\n * Element, MouseEvent, Point, or querySelector string that the TeachingBubble should anchor to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target?: "
                },
                {
                  "kind": "Reference",
                  "text": "Target",
                  "canonicalReference": "@fluentui/react-hooks!Target:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#targetElement:member",
              "docComment": "/**\n * @deprecated\n *\n * use target instead Element to anchor the TeachingBubble to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps#theme:member",
              "docComment": "/**\n * Theme provided by High-Order Component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 8
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyleProps:type",
          "docComment": "/**\n * {@docCategory TeachingBubble}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITeachingBubbleStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITeachingBubbleProps",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITeachingBubbleProps",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'hasCondensedHeadline' | 'hasSmallHeadline' | 'isWide'> & {\n    calloutProps?: "
            },
            {
              "kind": "Reference",
              "text": "ICalloutContentStyleProps",
              "canonicalReference": "@fluentui/react-internal!ICalloutContentStyleProps:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    primaryButtonClassName?: string;\n    secondaryButtonClassName?: string;\n    hasCloseButton?: boolean;\n    hasHeadline?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITeachingBubbleStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles:interface",
          "docComment": "/**\n * {@docCategory TeachingBubble}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITeachingBubbleStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITeachingBubbleStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#body:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "body: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "body",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#bodyContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bodyContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bodyContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#closeButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#content:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#footer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footer: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "footer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#headline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headline: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "headline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#imageContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageContent: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#primaryButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primaryButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primaryButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#secondaryButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#subComponentStyles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITeachingBubbleSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!ITeachingBubbleSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleStyles#subText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITeachingBubbleSubComponentStyles:interface",
          "docComment": "/**\n * {@docCategory TeachingBubble}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITeachingBubbleSubComponentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITeachingBubbleSubComponentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleSubComponentStyles#callout:member",
              "docComment": "/**\n * Refers to the callout that hosts the TeachingBubble.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callout: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "callout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITextComponent:type",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITextComponent = "
            },
            {
              "kind": "Reference",
              "text": "IComponent",
              "canonicalReference": "@fluentui/foundation-legacy!IComponent:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextProps",
              "canonicalReference": "@fluentui/react-internal!ITextProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITextTokens",
              "canonicalReference": "@fluentui/react-internal!ITextTokens:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITextStyles",
              "canonicalReference": "@fluentui/react-internal!ITextStyles:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITextComponent",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextField:interface",
          "docComment": "/**\n * {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextField "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextField",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#blur:member",
              "docComment": "/**\n * Blurs the input\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blur: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "blur",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#focus:member",
              "docComment": "/**\n * Sets focus to the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#select:member",
              "docComment": "/**\n * Select the value of the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "select",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#selectionEnd:member",
              "docComment": "/**\n * Gets the selection end of the text field. Returns -1 if there is no selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionEnd: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#selectionStart:member",
              "docComment": "/**\n * Gets the selection start of the text field. Returns -1 if there is no selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectionStart: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#setSelectionEnd:member",
              "docComment": "/**\n * Sets the selection end of the text field to a specified value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectionEnd: "
                },
                {
                  "kind": "Content",
                  "text": "(value: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setSelectionEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#setSelectionRange:member",
              "docComment": "/**\n * Sets the start and end positions of a selection in a text field. Call with start and end set to the same value to set the cursor position.\n *\n * @param start - Index of the start of the selection.\n *\n * @param end - Index of the end of the selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectionRange: "
                },
                {
                  "kind": "Content",
                  "text": "(start: number, end: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setSelectionRange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#setSelectionStart:member",
              "docComment": "/**\n * Sets the selection start of the text field to a specified value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectionStart: "
                },
                {
                  "kind": "Content",
                  "text": "(value: number) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setSelectionStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextField#value:member",
              "docComment": "/**\n * Gets the current value of the input.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface",
          "docComment": "/**\n * TextField component props. {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextFieldProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.AllHTMLAttributes",
              "canonicalReference": "@types/react!~React.AllHTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLInputElement",
              "canonicalReference": "!HTMLInputElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HTMLTextAreaElement",
              "canonicalReference": "!HTMLTextAreaElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextFieldProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#ariaLabel:member",
              "docComment": "/**\n * Aria label for the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ariaLabel?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ariaLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#autoAdjustHeight:member",
              "docComment": "/**\n * For multiline text fields, whether or not to auto adjust text field height.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoAdjustHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "autoAdjustHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#autoComplete:member",
              "docComment": "/**\n * Whether the input field should have autocomplete enabled. This tells the browser to display options based on earlier typed values. Common values are 'on' and 'off' but for all possible values see the following links: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoComplete?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "autoComplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#borderless:member",
              "docComment": "/**\n * Whether or not the text field is borderless.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borderless?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "borderless",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#canRevealPassword:member",
              "docComment": "/**\n * Whether to show the reveal password button for input type `'password'` (will be ignored unless the `type` prop is set to `'password'`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canRevealPassword?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canRevealPassword",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#className:member",
              "docComment": "/**\n * Optional class name that is added to the container of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ITextField component. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextField",
                  "canonicalReference": "@fluentui/react-internal!ITextField:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#defaultValue:member",
              "docComment": "/**\n * Default value of the text field. Only provide this if the text field is an uncontrolled component; otherwise, use the `value` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultValue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#deferredValidationTime:member",
              "docComment": "/**\n * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds. Updates to this prop will not be respected.\n *\n * @defaultvalue\n *\n * 200\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deferredValidationTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "deferredValidationTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#description:member",
              "docComment": "/**\n * Description displayed below the text field to provide additional details about what text to enter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#disabled:member",
              "docComment": "/**\n * Disabled state of the text field.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#elementRef:member",
              "docComment": "/**\n * Optional callback to access the root DOM element.\n *\n * @deprecated\n *\n * Temporary solution which will be replaced with ref once TextField is converted to a function component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Ref",
                  "canonicalReference": "@types/react!~React.Ref:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#errorMessage:member",
              "docComment": "/**\n * Static error message displayed below the text field. Use `onGetErrorMessage` to dynamically change the error message displayed (if any) based on the current value. `errorMessage` and `onGetErrorMessage` are mutually exclusive (`errorMessage` takes precedence).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "errorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#iconProps:member",
              "docComment": "/**\n * Props for an optional icon, displayed in the far right end of the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IIconProps",
                  "canonicalReference": "@fluentui/react-internal!IIconProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#inputClassName:member",
              "docComment": "/**\n * Optional class name that is added specifically to the input/textarea element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inputClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inputClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#label:member",
              "docComment": "/**\n * Label displayed above the text field (and read by screen readers).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#multiline:member",
              "docComment": "/**\n * Whether or not the text field is a multiline text field.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiline?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "multiline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onChange:member",
              "docComment": "/**\n * Callback for when the input value changes. This is called on both `input` and `change` events. (In a later version, this will probably only be called for the `change` event.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onChange?: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "React.FormEvent",
                  "canonicalReference": "@types/react!~React.FormEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLInputElement",
                  "canonicalReference": "!HTMLInputElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLTextAreaElement",
                  "canonicalReference": "!HTMLTextAreaElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">, newValue?: string) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onGetErrorMessage:member",
              "docComment": "/**\n * Function used to determine whether the input value is valid and get an error message if not. Mutually exclusive with the static string `errorMessage` (it will take precedence over this).\n *\n * When it returns `string | JSX.Element`: - If valid, it returns empty string. - If invalid, it returns the error message and the text field will show a red border and show an error message below the text field.\n *\n * When it returns `Promise<string | JSX.Element>`: - The resolved value is displayed as the error message. - If rejected, the value is thrown away.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onGetErrorMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "(value: string) => string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PromiseLike",
                  "canonicalReference": "!PromiseLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onGetErrorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onNotifyValidationResult:member",
              "docComment": "/**\n * Function called after validation completes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onNotifyValidationResult?: "
                },
                {
                  "kind": "Content",
                  "text": "(errorMessage: string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ", value: string | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onNotifyValidationResult",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onRenderDescription:member",
              "docComment": "/**\n * Custom renderer for the description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderDescription?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderDescription",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onRenderLabel:member",
              "docComment": "/**\n * Custom renderer for the label. If you don't call defaultRender, ensure that you give your custom-rendered label an id and that you set the textfield's aria-labelledby prop to that id.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderLabel?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderLabel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onRenderPrefix:member",
              "docComment": "/**\n * Custom render function for prefix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderPrefix?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderPrefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#onRenderSuffix:member",
              "docComment": "/**\n * Custom render function for suffix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderSuffix?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderSuffix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#prefix:member",
              "docComment": "/**\n * Prefix displayed before the text field contents. This is not included in the value. Ensure a descriptive label is present to assist screen readers, as the value does not include the prefix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prefix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "prefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#readOnly:member",
              "docComment": "/**\n * If true, the text field is readonly.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readOnly?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "readOnly",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#resizable:member",
              "docComment": "/**\n * For multiline text fields, whether or not the field is resizable.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resizable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resizable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldStyleProps:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldStyles",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#suffix:member",
              "docComment": "/**\n * Suffix displayed after the text field contents. This is not included in the value. Ensure a descriptive label is present to assist screen readers, as the value does not include the suffix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suffix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suffix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#theme:member",
              "docComment": "/**\n * Theme (provided through customization).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#underlined:member",
              "docComment": "/**\n * Whether or not the text field is underlined.\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "underlined?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "underlined",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#validateOnFocusIn:member",
              "docComment": "/**\n * Run validation when focus moves into the input, and **do not** validate on change.\n *\n * (Unless this prop and/or `validateOnFocusOut` is set to true, validation will run on every change.)\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateOnFocusIn?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "validateOnFocusIn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#validateOnFocusOut:member",
              "docComment": "/**\n * Run validation when focus moves out of the input, and **do not** validate on change.\n *\n * (Unless this prop and/or `validateOnFocusIn` is set to true, validation will run on every change.)\n *\n * @defaultvalue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateOnFocusOut?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "validateOnFocusOut",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#validateOnLoad:member",
              "docComment": "/**\n * Whether validation should run when the input is initially rendered.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateOnLoad?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "validateOnLoad",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps#value:member",
              "docComment": "/**\n * Current value of the text field. Only provide this if the text field is a controlled component where you are maintaining its current state; otherwise, use the `defaultValue` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITextFieldStyleProps:type",
          "docComment": "/**\n * {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITextFieldStyleProps = "
            },
            {
              "kind": "Reference",
              "text": "Required",
              "canonicalReference": "!Required:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextFieldProps",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme'>> & "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextFieldProps",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'className' | 'disabled' | 'inputClassName' | 'required' | 'multiline' | 'borderless' | 'resizable' | 'underlined' | 'autoAdjustHeight'> & {\n    hasErrorMessage?: boolean;\n    hasIcon?: boolean;\n    hasLabel?: boolean;\n    focused?: boolean;\n    hasRevealButton?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITextFieldStyleProps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 11
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextFieldStyles:interface",
          "docComment": "/**\n * {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextFieldStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextFieldStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#description:member",
              "docComment": "/**\n * Style for description element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#errorMessage:member",
              "docComment": "/**\n * Style for error message element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorMessage: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "errorMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#field:member",
              "docComment": "/**\n * Style for main field entry element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "field: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "field",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#fieldGroup:member",
              "docComment": "/**\n * Style for field group encompassing entry area (prefix, field, icon and suffix).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fieldGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fieldGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#icon:member",
              "docComment": "/**\n * Style for icon prop element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "icon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "icon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#prefix:member",
              "docComment": "/**\n * Style for prefix element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prefix: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "prefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#revealButton:member",
              "docComment": "/**\n * Styling for reveal password button\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revealButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "revealButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#revealIcon:member",
              "docComment": "/**\n * Styling for reveal password icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revealIcon: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "revealIcon",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#revealSpan:member",
              "docComment": "/**\n * Styling for reveal password span\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revealSpan: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "revealSpan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#root:member",
              "docComment": "/**\n * Style for root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#subComponentStyles:member",
              "docComment": "/**\n * Styling for subcomponents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subComponentStyles: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldSubComponentStyles",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldSubComponentStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subComponentStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#suffix:member",
              "docComment": "/**\n * Style for suffix element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suffix: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suffix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldStyles#wrapper:member",
              "docComment": "/**\n * Style for TextField wrapper element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextFieldSubComponentStyles:interface",
          "docComment": "/**\n * {@docCategory TextField}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextFieldSubComponentStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextFieldSubComponentStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextFieldSubComponentStyles#label:member",
              "docComment": "/**\n * Styling for Label child component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextProps:interface",
          "docComment": "/**\n * Inputs to the component {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextProps extends "
            },
            {
              "kind": "Reference",
              "text": "ISlottableProps",
              "canonicalReference": "@fluentui/foundation-legacy!ISlottableProps:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextSlots",
              "canonicalReference": "@fluentui/react-internal!ITextSlots:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStyleableComponentProps",
              "canonicalReference": "@fluentui/foundation-legacy!IStyleableComponentProps:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextProps",
              "canonicalReference": "@fluentui/react-internal!ITextProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITextTokens",
              "canonicalReference": "@fluentui/react-internal!ITextTokens:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITextStyles",
              "canonicalReference": "@fluentui/react-internal!ITextStyles:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextProps#as:member",
              "docComment": "/**\n * Optionally render the component as another component type or primitive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "as?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.ElementType",
                  "canonicalReference": "@types/react!~React.ElementType:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "React.HTMLAttributes",
                  "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "as",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextProps#block:member",
              "docComment": "/**\n * Whether the text is displayed as a block element.\n *\n * Note that in order for ellipsis on overflow to work properly, `block` and `nowrap` should be set to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "block?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "block",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextProps#nowrap:member",
              "docComment": "/**\n * Whether the text is not wrapped.\n *\n * Note that in order for ellipsis on overflow to work properly, `block` and `nowrap` should be set to true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nowrap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nowrap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextProps#variant:member",
              "docComment": "/**\n * Optional font type for Text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "variant?: "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "IFontStyles",
                  "canonicalReference": "@fluentui/theme!IFontStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "variant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 14
            },
            {
              "startIndex": 15,
              "endIndex": 19
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITextSlot:type",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITextSlot = "
            },
            {
              "kind": "Reference",
              "text": "ISlotProp",
              "canonicalReference": "@fluentui/foundation-legacy!ISlotProp:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextProps",
              "canonicalReference": "@fluentui/react-internal!ITextProps:interface"
            },
            {
              "kind": "Content",
              "text": ", string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITextSlot",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextSlots:interface",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextSlots "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextSlots",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITextSlots#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root?: "
                },
                {
                  "kind": "Reference",
                  "text": "IHTMLSlot",
                  "canonicalReference": "@fluentui/foundation-legacy!IHTMLSlot:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITextStyles:type",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITextStyles = "
            },
            {
              "kind": "Reference",
              "text": "IComponentStyles",
              "canonicalReference": "@fluentui/foundation-legacy!IComponentStyles:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextSlots",
              "canonicalReference": "@fluentui/react-internal!ITextSlots:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITextStyles",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITextStylesReturnType:type",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITextStylesReturnType = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextComponent",
              "canonicalReference": "@fluentui/react-internal!ITextComponent:type"
            },
            {
              "kind": "Content",
              "text": "['styles'], "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITextStylesReturnType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ITextTokenReturnType:type",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ITextTokenReturnType = "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Extract",
              "canonicalReference": "!Extract:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextComponent",
              "canonicalReference": "@fluentui/react-internal!ITextComponent:type"
            },
            {
              "kind": "Content",
              "text": "['tokens'], "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ITextTokenReturnType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITextTokens:interface",
          "docComment": "/**\n * {@docCategory Text}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITextTokens "
            }
          ],
          "releaseTag": "Public",
          "name": "ITextTokens",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IThemeRules:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IThemeRules "
            }
          ],
          "releaseTag": "Public",
          "name": "IThemeRules",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluentui/react-internal!IThemeRules:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeSlotRule",
                  "canonicalReference": "@fluentui/react-internal!IThemeSlotRule:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IThemeSlotRule:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IThemeSlotRule "
            }
          ],
          "releaseTag": "Public",
          "name": "IThemeSlotRule",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#asShade:member",
              "docComment": "/**\n * If set, this slot is the specified shade of the slot it inherits from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asShade?: "
                },
                {
                  "kind": "Reference",
                  "text": "Shade",
                  "canonicalReference": "@fluentui/react-internal!Shade:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "asShade",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#color:member",
              "docComment": "/**\n * The actual color this theme slot is if it is a color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#dependentRules:member",
              "docComment": "/**\n * A collection of rules that inherit from this one. It is the responsibility of the inheriting rule to add itself to its parent's dependentRules collection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dependentRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeSlotRule",
                  "canonicalReference": "@fluentui/react-internal!IThemeSlotRule:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dependentRules",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#inherits:member",
              "docComment": "/**\n * The theme slot this slot is based on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inherits?: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeSlotRule",
                  "canonicalReference": "@fluentui/react-internal!IThemeSlotRule:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inherits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#isBackgroundShade:member",
              "docComment": "/**\n * Whether this slot is a background shade, which uses different logic for generating its inheriting-as-shade value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBackgroundShade?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isBackgroundShade",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#isCustomized:member",
              "docComment": "/**\n * Whether this slot has been manually overridden (else, it was automatically generated based on inheritance).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isCustomized?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isCustomized",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#name:member",
              "docComment": "/**\n * The name of this theme slot.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IThemeSlotRule#value:member",
              "docComment": "/**\n * The value of this slot if it is NOT a color. Must be falsey if not a color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltip:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltip "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltip",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipHost:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipHost "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipHost",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHost#dismiss:member",
              "docComment": "/**\n * Dismisses the tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHost#show:member",
              "docComment": "/**\n * Shows the tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "show: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "show",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipHostProps:interface",
          "docComment": "/**\n * TooltipHost props. Note that native props (such as `id`, `className`, and `aria-` props) are passed through to the Tooltip itself, rather than being used on the host element. {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipHostProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TooltipHostBase",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipHostProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#calloutProps:member",
              "docComment": "/**\n * Additional properties to pass through for Callout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#className:member",
              "docComment": "/**\n * Class name to apply to the *tooltip itself*, not the host. To apply a class to the host, use `hostClassName` or `styles.root`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#closeDelay:member",
              "docComment": "/**\n * Number of milliseconds to delay closing the tooltip, so that the user has time to hover over the tooltip and interact with it. Hovering over the tooltip will count as hovering over the host, so that the tooltip will stay open if the user is actively interacting with it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "closeDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipHost",
                  "canonicalReference": "@fluentui/react-internal!ITooltipHost:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#content:member",
              "docComment": "/**\n * Content to display in the Tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#delay:member",
              "docComment": "/**\n * Length of delay before showing the tooltip on hover.\n *\n * @defaultvalue\n *\n * TooltipDelay.medium\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delay?: "
                },
                {
                  "kind": "Reference",
                  "text": "TooltipDelay",
                  "canonicalReference": "@fluentui/react-internal!TooltipDelay:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#directionalHint:member",
              "docComment": "/**\n * How the tooltip should be anchored to its `targetElement`.\n *\n * @defaultvalue\n *\n * DirectionalHint.topCenter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#directionalHintForRTL:member",
              "docComment": "/**\n * How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintForRTL?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintForRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#hostClassName:member",
              "docComment": "/**\n * Class name to apply to tooltip host.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hostClassName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hostClassName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#id:member",
              "docComment": "/**\n * Optional ID to pass through to the tooltip (not used on the host itself). Auto-generated if not provided.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#onTooltipToggle:member(1)",
              "docComment": "/**\n * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTooltipToggle?(isTooltipVisible: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "isTooltipVisible",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onTooltipToggle"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#overflowMode:member",
              "docComment": "/**\n * If this is unset (the default), the tooltip is always shown even if there's no overflow.\n *\n * If set, only show the tooltip if the specified element (`Self` or `Parent`) has overflow. When set to `Parent`, the parent element is also used as the tooltip's target element.\n *\n * Note that even with `Self` mode, the TooltipHost *does not* check whether any children have overflow.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overflowMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "TooltipOverflowMode",
                  "canonicalReference": "@fluentui/react-internal!TooltipOverflowMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overflowMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#setAriaDescribedBy:member",
              "docComment": "/**\n * Whether or not to mark the TooltipHost root element as described by the tooltip. If not specified, the caller should pass an `id` to the TooltipHost (to be passed through to the Tooltip) and mark the appropriate element as `aria-describedby` the `id`.\n *\n * @defaultvalue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setAriaDescribedBy?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setAriaDescribedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipHostStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipHostStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipHostStyles",
                  "canonicalReference": "@fluentui/react-internal!ITooltipHostStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#theme:member",
              "docComment": "/**\n * Theme provided by higher-order component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps#tooltipProps:member",
              "docComment": "/**\n * Additional properties to pass through for Tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tooltipProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tooltipProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipHostState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipHostState "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipHostState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostState#isAriaPlaceholderRendered:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAriaPlaceholderRendered: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAriaPlaceholderRendered",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostState#isTooltipVisible:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTooltipVisible: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isTooltipVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipHostStyleProps:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipHostStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipHostStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipHostStyles:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipHostStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipHostStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostStyles#root:member",
              "docComment": "/**\n * Style for the host wrapper element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipProps:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TooltipBase",
              "canonicalReference": "@fluentui/react-internal!TooltipBase:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#calloutProps:member",
              "docComment": "/**\n * Properties to pass through for Callout.\n *\n * @defaultvalue\n *\n * `{ isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false }`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calloutProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ICalloutProps",
                  "canonicalReference": "@fluentui/react-internal!ICalloutProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calloutProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#componentRef:member",
              "docComment": "/**\n * Optional callback to access the ITooltip interface. Use this instead of ref for accessing the public methods and properties of the component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentRef?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRefObject",
                  "canonicalReference": "@fluentui/utilities!IRefObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITooltip",
                  "canonicalReference": "@fluentui/react-internal!ITooltip:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "componentRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#content:member",
              "docComment": "/**\n * Content to be passed to the tooltip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#delay:member",
              "docComment": "/**\n * Length of delay. Set to `TooltipDelay.zero` if you do not want a delay.\n *\n * @defaultvalue\n *\n * TooltipDelay.medium\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delay?: "
                },
                {
                  "kind": "Reference",
                  "text": "TooltipDelay",
                  "canonicalReference": "@fluentui/react-internal!TooltipDelay:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#directionalHint:member",
              "docComment": "/**\n * How the tooltip should be anchored to its `targetElement`.\n *\n * @defaultvalue\n *\n * DirectionalHint.topCenter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHint?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#directionalHintForRTL:member",
              "docComment": "/**\n * How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directionalHintForRTL?: "
                },
                {
                  "kind": "Reference",
                  "text": "DirectionalHint",
                  "canonicalReference": "@fluentui/react-internal!DirectionalHint:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directionalHintForRTL",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#maxWidth:member",
              "docComment": "/**\n * Max width of tooltip\n *\n * @defaultvalue\n *\n * 364px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#onRenderContent:member",
              "docComment": "/**\n * Render function to populate tooltip content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onRenderContent?: "
                },
                {
                  "kind": "Reference",
                  "text": "IRenderFunction",
                  "canonicalReference": "@fluentui/utilities!IRenderFunction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onRenderContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#styles:member",
              "docComment": "/**\n * Call to provide customized styling that will layer on top of the variant rules.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipStyleProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipStyles",
                  "canonicalReference": "@fluentui/react-internal!ITooltipStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#targetElement:member",
              "docComment": "/**\n * Element to anchor the Tooltip to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "targetElement?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "targetElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps#theme:member",
              "docComment": "/**\n * Theme provided by higher-order component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipStyleProps "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipStyleProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps#beakWidth:member",
              "docComment": "/**\n * The width of the Callout's beak\n *\n * @defaultvalue\n *\n * 16\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beakWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "beakWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps#className:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps#delay:member",
              "docComment": "/**\n * Delay before tooltip appears.\n *\n * @deprecated\n *\n * Delay logic moved to TooltipHost vs relying on animation delay.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delay?: "
                },
                {
                  "kind": "Reference",
                  "text": "TooltipDelay",
                  "canonicalReference": "@fluentui/react-internal!TooltipDelay:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps#gapSpace:member",
              "docComment": "/**\n * The gap between the Callout and the target\n *\n * @defaultvalue\n *\n * 0\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gapSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gapSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps#maxWidth:member",
              "docComment": "/**\n * Maximum width of tooltip.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyleProps#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!ITooltipStyles:interface",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITooltipStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "ITooltipStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyles#content:member",
              "docComment": "/**\n * Style for the content element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "content: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "content",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyles#root:member",
              "docComment": "/**\n * Style for the root element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "root: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!ITooltipStyles#subText:member",
              "docComment": "/**\n * Style for the subtext element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subText: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IUniqueKeytip:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IUniqueKeytip "
            }
          ],
          "releaseTag": "Public",
          "name": "IUniqueKeytip",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IUniqueKeytip#keytip:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytip: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IUniqueKeytip#uniqueID:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uniqueID: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uniqueID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IVerticalDividerClassNames:interface",
          "docComment": "/**\n * {@docCategory VerticalDivider}\n *\n * @deprecated\n *\n * Deprecated class names, used to be used to provider customizations, use IVerticalDividerStyles instead\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IVerticalDividerClassNames "
            }
          ],
          "releaseTag": "Public",
          "name": "IVerticalDividerClassNames",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerClassNames#divider:member",
              "docComment": "/**\n * Styling for the divider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divider: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerClassNames#wrapper:member",
              "docComment": "/**\n * Styling for the div that wraps the actual divider\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapper: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps:interface",
          "docComment": "/**\n * {@docCategory VerticalDivider} Props for the Vertical Divider\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IVerticalDividerProps extends "
            },
            {
              "kind": "Reference",
              "text": "React.HTMLAttributes",
              "canonicalReference": "@types/react!~React.HTMLAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "React.RefAttributes",
              "canonicalReference": "@types/react!~React.RefAttributes:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IVerticalDividerProps",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps#className:member",
              "docComment": "/**\n * className that will be placed on the divider wrapper div\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "className?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "className",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps#getClassNames:member",
              "docComment": "/**\n * @deprecated\n *\n * Use styles instead. Optional function to generate the class names for the divider for custom styling\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getClassNames?: "
                },
                {
                  "kind": "Content",
                  "text": "(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "IVerticalDividerClassNames",
                  "canonicalReference": "@fluentui/react-internal!IVerticalDividerClassNames:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getClassNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps#styles:member",
              "docComment": "/**\n * Optional override stylings that will get merged with the dividers styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyleFunctionOrObject",
                  "canonicalReference": "@fluentui/merge-styles!IStyleFunctionOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IVerticalDividerPropsStyles",
                  "canonicalReference": "@fluentui/react-internal!IVerticalDividerPropsStyles:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "IVerticalDividerStyles",
                  "canonicalReference": "@fluentui/react-internal!IVerticalDividerStyles:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps#theme:member",
              "docComment": "/**\n * The theme that should be used to render the vertical divider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITheme",
                  "canonicalReference": "@fluentui/theme!ITheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            },
            {
              "startIndex": 6,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!IVerticalDividerPropsStyles:type",
          "docComment": "/**\n * {@docCategory VerticalDivider} Props that will get passed to the styling function to style the Vertical Divider\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IVerticalDividerPropsStyles = "
            },
            {
              "kind": "Reference",
              "text": "Pick",
              "canonicalReference": "!Pick:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IVerticalDividerProps",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", 'theme' | 'getClassNames' | 'className'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IVerticalDividerPropsStyles",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IVerticalDividerStyles:interface",
          "docComment": "/**\n * {@docCategory VerticalDivider} Style interface that defines the different areas that styles can be customized on the Vertical Divider\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IVerticalDividerStyles "
            }
          ],
          "releaseTag": "Public",
          "name": "IVerticalDividerStyles",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerStyles#divider:member",
              "docComment": "/**\n * Styling for the divider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "divider: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "divider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerStyles#wrapper:member",
              "docComment": "/**\n * Styling for the div that wraps the actual divider\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapper: "
                },
                {
                  "kind": "Reference",
                  "text": "IStyle",
                  "canonicalReference": "@fluentui/merge-styles!IStyle:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrapper",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluentui/react-internal!IWindowWithSegments:interface",
          "docComment": "/**\n * Window with typings for experimental features regarding Dual Screen devices.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IWindowWithSegments extends "
            },
            {
              "kind": "Reference",
              "text": "Window",
              "canonicalReference": "!Window:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IWindowWithSegments",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluentui/react-internal!IWindowWithSegments#getWindowSegments:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWindowSegments?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "DOMRect",
                  "canonicalReference": "!DOMRect:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getWindowSegments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!KeyboardSpinDirection:enum",
          "docComment": "/**\n * {@docCategory SpinButton}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum KeyboardSpinDirection "
            }
          ],
          "releaseTag": "Public",
          "name": "KeyboardSpinDirection",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!KeyboardSpinDirection.down:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "down = "
                },
                {
                  "kind": "Content",
                  "text": "-1"
                }
              ],
              "releaseTag": "Public",
              "name": "down",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!KeyboardSpinDirection.notSpinning:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "notSpinning = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "notSpinning",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!KeyboardSpinDirection.up:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "up = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "up",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!Keytip:class",
          "docComment": "/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Keytip extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IKeytipProps",
              "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "Keytip",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Keytip#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KeytipData:var",
          "docComment": "/**\n * A small element to help the target component correctly read out its aria-describedby for its Keytip {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KeytipData: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IKeytipDataProps",
              "canonicalReference": "@fluentui/react-internal!IKeytipDataProps:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "IRenderComponent",
              "canonicalReference": "@fluentui/utilities!IRenderComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<{}>>"
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipData",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!KeytipDataOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type KeytipDataOptions = "
            },
            {
              "kind": "Reference",
              "text": "IKeytipDataProps",
              "canonicalReference": "@fluentui/react-internal!IKeytipDataProps:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipDataOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@fluentui/react-internal!KeytipEvents:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace KeytipEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipEvents",
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.ENTER_KEYTIP_MODE:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ENTER_KEYTIP_MODE = \"enterKeytipMode\""
                }
              ],
              "releaseTag": "Public",
              "name": "ENTER_KEYTIP_MODE",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.EXIT_KEYTIP_MODE:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EXIT_KEYTIP_MODE = \"exitKeytipMode\""
                }
              ],
              "releaseTag": "Public",
              "name": "EXIT_KEYTIP_MODE",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.KEYTIP_ADDED:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "KEYTIP_ADDED = \"keytipAdded\""
                }
              ],
              "releaseTag": "Public",
              "name": "KEYTIP_ADDED",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.KEYTIP_REMOVED:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "KEYTIP_REMOVED = \"keytipRemoved\""
                }
              ],
              "releaseTag": "Public",
              "name": "KEYTIP_REMOVED",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.KEYTIP_UPDATED:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "KEYTIP_UPDATED = \"keytipUpdated\""
                }
              ],
              "releaseTag": "Public",
              "name": "KEYTIP_UPDATED",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.PERSISTED_KEYTIP_ADDED:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PERSISTED_KEYTIP_ADDED = \"persistedKeytipAdded\""
                }
              ],
              "releaseTag": "Public",
              "name": "PERSISTED_KEYTIP_ADDED",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.PERSISTED_KEYTIP_EXECUTE:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PERSISTED_KEYTIP_EXECUTE = \"persistedKeytipExecute\""
                }
              ],
              "releaseTag": "Public",
              "name": "PERSISTED_KEYTIP_EXECUTE",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!KeytipEvents.PERSISTED_KEYTIP_REMOVED:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PERSISTED_KEYTIP_REMOVED = \"persistedKeytipRemoved\""
                }
              ],
              "releaseTag": "Public",
              "name": "PERSISTED_KEYTIP_REMOVED",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KeytipLayer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KeytipLayer: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IKeytipLayerProps",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipLayer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!KeytipLayerBase:class",
          "docComment": "/**\n * A layer that holds all keytip items {@docCategory Keytips}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class KeytipLayerBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IKeytipLayerProps",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IKeytipLayerState",
              "canonicalReference": "@fluentui/react-internal!IKeytipLayerState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipLayerBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `KeytipLayerBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipLayerProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipLayerProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipLayerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#getCurrentSequence:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentSequence(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCurrentSequence"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#getKeytipTree:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getKeytipTree(): "
                },
                {
                  "kind": "Reference",
                  "text": "KeytipTree",
                  "canonicalReference": "@fluentui/react-internal!KeytipTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getKeytipTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#processInput:member(1)",
              "docComment": "/**\n * Processes inputs from the document listener and traverse the keytip tree\n *\n * @param key - Key pressed by the user\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "processInput(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "ev",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                }
              ],
              "name": "processInput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#processTransitionInput:member(1)",
              "docComment": "/**\n * Processes an IKeytipTransitionKey entered by the user\n *\n * @param transitionKey - IKeytipTransitionKey received by the layer to process\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "processTransitionInput(transitionKey: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipTransitionKey",
                  "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
                },
                {
                  "kind": "Content",
                  "text": ", ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "React.KeyboardEvent",
                  "canonicalReference": "@types/react!~React.KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transitionKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "ev",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                }
              ],
              "name": "processTransitionInput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipLayerBase#showKeytips:member(1)",
              "docComment": "/**\n * Show the given keytips and hide all others\n *\n * @param ids - Keytip IDs to show\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showKeytips(ids: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ids",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "showKeytips"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!KeytipManager:class",
          "docComment": "/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class KeytipManager "
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipManager",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#addParentOverflow:member(1)",
              "docComment": "/**\n * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n *\n * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n *\n * @returns - Modified keytip props, if needed to be modified\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addParentOverflow(keytipProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keytipProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addParentOverflow"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#delayUpdatingKeytipChange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delayUpdatingKeytipChange: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "delayUpdatingKeytipChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#enterKeytipMode:member(1)",
              "docComment": "/**\n * Manual call to enter keytip mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enterKeytipMode(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "enterKeytipMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#exitKeytipMode:member(1)",
              "docComment": "/**\n * Manual call to exit keytip mode\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exitKeytipMode(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exitKeytipMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager.getInstance:member(1)",
              "docComment": "/**\n * Static function to get singleton KeytipManager instance\n *\n * @returns Singleton KeytipManager instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getInstance(): "
                },
                {
                  "kind": "Reference",
                  "text": "KeytipManager",
                  "canonicalReference": "@fluentui/react-internal!KeytipManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getInstance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#getKeytips:member(1)",
              "docComment": "/**\n * Gets all IKeytipProps from this.keytips\n *\n * @returns All keytips stored in the manager\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getKeytips(): "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getKeytips"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#init:member(1)",
              "docComment": "/**\n * Initialization code to set set parameters to define how the KeytipManager handles keytip data.\n *\n * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers of keytip changes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "init(delayUpdatingKeytipChange: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "delayUpdatingKeytipChange",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "init"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#inKeytipMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inKeytipMode: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inKeytipMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#keytips:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keytips: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "IUniqueKeytip",
                  "canonicalReference": "@fluentui/react-internal!IUniqueKeytip:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keytips",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#menuExecute:member(1)",
              "docComment": "/**\n * Public function to bind for overflow items that have a submenu\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "menuExecute(overflowButtonSequences: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", keytipSequences: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "overflowButtonSequences",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "keytipSequences",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "menuExecute"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#persistedKeytips:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "persistedKeytips: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "IUniqueKeytip",
                  "canonicalReference": "@fluentui/react-internal!IUniqueKeytip:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "persistedKeytips",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#register:member(1)",
              "docComment": "/**\n * Registers a keytip\n *\n * @param keytipProps - Keytip to register\n *\n * @param persisted - T/F if this keytip should be persisted, default is false\n *\n * @returns Unique ID for this keytip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "register(keytipProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", persisted?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keytipProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "persisted",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "register"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#sequenceMapping:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sequenceMapping: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sequenceMapping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#shouldEnterKeytipMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldEnterKeytipMode: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shouldEnterKeytipMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#unregister:member(1)",
              "docComment": "/**\n * Unregisters a keytip\n *\n * @param keytipToRemove - IKeytipProps of the keytip to remove\n *\n * @param uniqueID - Unique ID of this keytip\n *\n * @param persisted - T/F if this keytip should be persisted, default is false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unregister(keytipToRemove: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", uniqueID: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", persisted?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keytipToRemove",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "uniqueID",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "persisted",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "unregister"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!KeytipManager#update:member(1)",
              "docComment": "/**\n * Update a keytip\n *\n * @param keytipProps - Keytip to update\n *\n * @param uniqueID - Unique ID of this keytip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(keytipProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IKeytipProps",
                  "canonicalReference": "@fluentui/react-internal!IKeytipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", uniqueID: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keytipProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "uniqueID",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "update"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!KeytipTransitionModifier:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type KeytipTransitionModifier = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "KeyCodes.shift",
              "canonicalReference": "@fluentui/utilities!~__type#shift:member"
            },
            {
              "kind": "Content",
              "text": " | typeof "
            },
            {
              "kind": "Reference",
              "text": "KeyCodes.ctrl",
              "canonicalReference": "@fluentui/utilities!~__type#ctrl:member"
            },
            {
              "kind": "Content",
              "text": " | typeof "
            },
            {
              "kind": "Reference",
              "text": "KeyCodes.alt",
              "canonicalReference": "@fluentui/utilities!~__type#alt:member"
            },
            {
              "kind": "Content",
              "text": " | typeof "
            },
            {
              "kind": "Reference",
              "text": "KeyCodes.leftWindow",
              "canonicalReference": "@fluentui/utilities!~__type#leftWindow:member"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "KeytipTransitionModifier",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KTP_ARIA_SEPARATOR:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KTP_ARIA_SEPARATOR = \", \""
            }
          ],
          "releaseTag": "Public",
          "name": "KTP_ARIA_SEPARATOR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KTP_FULL_PREFIX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KTP_FULL_PREFIX: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "releaseTag": "Public",
          "name": "KTP_FULL_PREFIX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KTP_LAYER_ID:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KTP_LAYER_ID = \"ktp-layer-id\""
            }
          ],
          "releaseTag": "Public",
          "name": "KTP_LAYER_ID",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KTP_PREFIX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KTP_PREFIX = \"ktp\""
            }
          ],
          "releaseTag": "Public",
          "name": "KTP_PREFIX",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!KTP_SEPARATOR:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KTP_SEPARATOR = \"-\""
            }
          ],
          "releaseTag": "Public",
          "name": "KTP_SEPARATOR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!ktpTargetFromId:function(1)",
          "docComment": "/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n *\n * @returns String selector to use to query for the keytip execute target.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ktpTargetFromId(keytipId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keytipId",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "ktpTargetFromId"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!ktpTargetFromSequences:function(1)",
          "docComment": "/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n *\n * @returns String selector to use to query for the keytip target.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ktpTargetFromSequences(keySequences: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySequences",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "ktpTargetFromSequences"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Label:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Label: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ILabelProps",
              "canonicalReference": "@fluentui/react-internal!ILabelProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Label",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!LabelBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LabelBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ILabelProps",
              "canonicalReference": "@fluentui/react-internal!ILabelProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "LabelBase",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!LabelBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Layer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Layer: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ILayerProps",
              "canonicalReference": "@fluentui/react-internal!ILayerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Layer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!LayerBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LayerBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ILayerProps",
              "canonicalReference": "@fluentui/react-internal!ILayerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "LayerBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!LayerHost:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LayerHost: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ILayerHostProps",
              "canonicalReference": "@fluentui/react-internal!ILayerHostProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "LayerHost",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!List:class",
          "docComment": "/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window) 2. If changes are necessary, apply changes (add/remove pages) 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false, List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time. And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props, or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class List<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IListProps",
              "canonicalReference": "@fluentui/react-internal!IListProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, "
            },
            {
              "kind": "Reference",
              "text": "IListState",
              "canonicalReference": "@fluentui/react-internal!IListState:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IList",
              "canonicalReference": "@fluentui/react-internal!IList:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "List",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!List:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `List` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IListProps",
                  "canonicalReference": "@fluentui/react-internal!IListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!List.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        startIndex: number;\n        onRenderCell: (item: any, index: number, containsFocus: boolean) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        renderedWindowsAhead: number;\n        renderedWindowsBehind: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#forceUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "forceUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List.getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getDerivedStateFromProps<T = "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ">(nextProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IListProps",
                  "canonicalReference": "@fluentui/react-internal!IListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", previousState: "
                },
                {
                  "kind": "Reference",
                  "text": "IListState",
                  "canonicalReference": "@fluentui/react-internal!IListState:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IListState",
                  "canonicalReference": "@fluentui/react-internal!IListState:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "previousState",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#getStartItemIndexInView:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStartItemIndexInView(measureItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(itemIndex: number) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "measureItem",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getStartItemIndexInView"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#getTotalListHeight:member(1)",
              "docComment": "/**\n * Get the current height the list and it's pages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTotalListHeight(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTotalListHeight"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!List#pageRefs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get pageRefs(): "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pageRefs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#scrollToIndex:member(1)",
              "docComment": "/**\n * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n *\n * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n *\n * @param index - Index of item to scroll to\n *\n * @param measureItem - Optional callback to measure the height of an individual item\n *\n * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollToIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", measureItem?: "
                },
                {
                  "kind": "Content",
                  "text": "(itemIndex: number) => number"
                },
                {
                  "kind": "Content",
                  "text": ", scrollToMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrollToMode",
                  "canonicalReference": "@fluentui/react-internal!ScrollToMode:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "measureItem",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "scrollToMode",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "scrollToIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!List#shouldComponentUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldComponentUpdate(newProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IListProps",
                  "canonicalReference": "@fluentui/react-internal!IListProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", newState: "
                },
                {
                  "kind": "Reference",
                  "text": "IListState",
                  "canonicalReference": "@fluentui/react-internal!IListState:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "newState",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "name": "shouldComponentUpdate"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "implementsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ListPeoplePicker:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ListPeoplePicker: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ListPeoplePicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ListPeoplePickerBase:class",
          "docComment": "/**\n * MemberList layout. The selected people show up below the search box. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ListPeoplePickerBase extends "
            },
            {
              "kind": "Reference",
              "text": "MemberListPeoplePicker",
              "canonicalReference": "@fluentui/react-internal!MemberListPeoplePicker:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ListPeoplePickerBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ListPeoplePickerBase.defaultProps:member",
              "docComment": "/**\n * Default props for ListPeoplePicker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onRenderItem: (props: "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedProps",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        onRenderSuggestionsItem: (personaProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", suggestionsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerSuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerSuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any> | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        createGenericItem: typeof "
                },
                {
                  "kind": "Reference",
                  "text": "createGenericItem",
                  "canonicalReference": "@fluentui/react-internal!createGenericItem:function"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MarqueeSelection:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MarqueeSelection: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IMarqueeSelectionProps",
              "canonicalReference": "@fluentui/react-internal!IMarqueeSelectionProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "MarqueeSelection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MaskedTextField:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MaskedTextField: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IMaskedTextFieldProps",
              "canonicalReference": "@fluentui/react-internal!IMaskedTextFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "MaskedTextField",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_COLOR_ALPHA:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_COLOR_ALPHA = 100"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_COLOR_ALPHA",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_COLOR_HUE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_COLOR_HUE = 359"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_COLOR_HUE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_COLOR_RGB:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_COLOR_RGB = 255"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_COLOR_RGB",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_COLOR_RGBA:var",
          "docComment": "/**\n * @deprecated\n *\n * Use MAX_COLOR_RGB (255) or MAX_COLOR_ALPHA (100)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_COLOR_RGBA = 255"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_COLOR_RGBA",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_COLOR_SATURATION:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_COLOR_SATURATION = 100"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_COLOR_SATURATION",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_COLOR_VALUE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_COLOR_VALUE = 100"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_COLOR_VALUE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_HEX_LENGTH:var",
          "docComment": "/**\n * Maximum length for a hexadecimal color string (not including the #)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_HEX_LENGTH = 6"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_HEX_LENGTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MAX_RGBA_LENGTH:var",
          "docComment": "/**\n * Maximum length for a string of an RGBA color component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_RGBA_LENGTH = 3"
            }
          ],
          "releaseTag": "Public",
          "name": "MAX_RGBA_LENGTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MeasuredContext:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MeasuredContext: "
            },
            {
              "kind": "Reference",
              "text": "React.Context",
              "canonicalReference": "@types/react!~React.Context:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n    isMeasured: boolean;\n}>"
            }
          ],
          "releaseTag": "Public",
          "name": "MeasuredContext",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!MemberListPeoplePicker:class",
          "docComment": "/**\n * {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MemberListPeoplePicker extends "
            },
            {
              "kind": "Reference",
              "text": "BasePickerListBelow",
              "canonicalReference": "@fluentui/react-internal!BasePickerListBelow:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "MemberListPeoplePicker",
          "members": [],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!mergeOverflows:function(1)",
          "docComment": "/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n *\n * @param overflowKeySequences - Full overflow keytip sequence.\n *\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mergeOverflows(keySequences: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", overflowKeySequences: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySequences",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "overflowKeySequences",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "mergeOverflows"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MessageBar:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MessageBar: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IMessageBarProps",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageBar",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MessageBarBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MessageBarBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IMessageBarProps",
              "canonicalReference": "@fluentui/react-internal!IMessageBarProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "MessageBarBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!MessageBarType:enum",
          "docComment": "/**\n * {@docCategory MessageBar}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MessageBarType "
            }
          ],
          "releaseTag": "Public",
          "name": "MessageBarType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!MessageBarType.blocked:member",
              "docComment": "/**\n * Blocked styled MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blocked = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "blocked",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!MessageBarType.error:member",
              "docComment": "/**\n * Error styled MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "error",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!MessageBarType.info:member",
              "docComment": "/**\n * Info styled MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "info = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "info",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!MessageBarType.severeWarning:member",
              "docComment": "/**\n * SevereWarning styled MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "severeWarning = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "severeWarning",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!MessageBarType.success:member",
              "docComment": "/**\n * Success styled MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "success = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "success",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!MessageBarType.warning:member",
              "docComment": "/**\n * Warning styled MessageBar\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warning = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "warning",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MIN_HEX_LENGTH:var",
          "docComment": "/**\n * Minimum length for a hexadecimal color string (not including the #)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MIN_HEX_LENGTH = 3"
            }
          ],
          "releaseTag": "Public",
          "name": "MIN_HEX_LENGTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!MIN_RGBA_LENGTH:var",
          "docComment": "/**\n * Minimum length for a string of an RGBA color component\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MIN_RGBA_LENGTH = 1"
            }
          ],
          "releaseTag": "Public",
          "name": "MIN_RGBA_LENGTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Modal:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Modal: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IModalProps",
              "canonicalReference": "@fluentui/react-internal!IModalProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Modal",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ModalBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ModalBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IModalProps",
              "canonicalReference": "@fluentui/react-internal!IModalProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ModalBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Nav:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Nav: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "INavProps",
              "canonicalReference": "@fluentui/react-internal!INavProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Nav",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!NavBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NavBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "INavProps",
              "canonicalReference": "@fluentui/react-internal!INavProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "INavState",
              "canonicalReference": "@fluentui/react-internal!INavState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "INav",
              "canonicalReference": "@fluentui/react-internal!INav:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NavBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!NavBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NavBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "INavProps",
                  "canonicalReference": "@fluentui/react-internal!INavProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!NavBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "INavProps",
                  "canonicalReference": "@fluentui/react-internal!INavProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!NavBase#focus:member(1)",
              "docComment": "/**\n * Sets focus to the first tabbable item in the zone.\n *\n * @param forceIntoFirstElement - If true, focus will be forced into the first element, even if focus is already in the focus zone.\n *\n * @returns True if focus could be set to an active element, false if no operation was taken.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(forceIntoFirstElement?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forceIntoFirstElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!NavBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!NavBase#selectedKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectedKey(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!NormalPeoplePicker:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NormalPeoplePicker: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "NormalPeoplePicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!NormalPeoplePickerBase:class",
          "docComment": "/**\n * Standard People Picker. {@docCategory PeoplePicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NormalPeoplePickerBase extends "
            },
            {
              "kind": "Reference",
              "text": "BasePeoplePicker",
              "canonicalReference": "@fluentui/react-internal!BasePeoplePicker:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NormalPeoplePickerBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!NormalPeoplePickerBase.defaultProps:member",
              "docComment": "/**\n * Default props for NormalPeoplePicker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onRenderItem: (props: "
                },
                {
                  "kind": "Reference",
                  "text": "IPeoplePickerItemSelectedProps",
                  "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        onRenderSuggestionsItem: (personaProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IPersonaProps",
                  "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", suggestionsProps?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBasePickerSuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!IBasePickerSuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any> | undefined) => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        createGenericItem: typeof "
                },
                {
                  "kind": "Reference",
                  "text": "createGenericItem",
                  "canonicalReference": "@fluentui/react-internal!createGenericItem:function"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!OpenCardMode:enum",
          "docComment": "/**\n * {@docCategory HoverCard}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum OpenCardMode "
            }
          ],
          "releaseTag": "Public",
          "name": "OpenCardMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!OpenCardMode.hotKey:member",
              "docComment": "/**\n * Open card by hot key\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hotKey = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "hotKey",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!OpenCardMode.hover:member",
              "docComment": "/**\n * Open card by hover\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hover = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "hover",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!OverflowButtonType:enum",
          "docComment": "/**\n * {@docCategory Facepile}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum OverflowButtonType "
            }
          ],
          "releaseTag": "Public",
          "name": "OverflowButtonType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!OverflowButtonType.descriptive:member",
              "docComment": "/**\n * +1 overflow icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descriptive = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "descriptive",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!OverflowButtonType.downArrow:member",
              "docComment": "/**\n * Chevron overflow icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "downArrow = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "downArrow",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!OverflowButtonType.more:member",
              "docComment": "/**\n * More overflow icon\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "more = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "more",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!OverflowButtonType.none:member",
              "docComment": "/**\n * No overflow\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "none = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "none",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!OverflowSet:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "OverflowSet: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IOverflowSetProps",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "OverflowSet",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!OverflowSetBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "OverflowSetBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IOverflowSetProps",
              "canonicalReference": "@fluentui/react-internal!IOverflowSetProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "OverflowSetBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Overlay:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Overlay: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IOverlayProps",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Overlay",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!OverlayBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class OverlayBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IOverlayProps",
              "canonicalReference": "@fluentui/react-internal!IOverlayProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "OverlayBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!OverlayBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `OverlayBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IOverlayProps",
                  "canonicalReference": "@fluentui/react-internal!IOverlayProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!OverlayBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!OverlayBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!OverlayBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Panel:var",
          "docComment": "/**\n * Panel description\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Panel: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPanelProps",
              "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Panel",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!PanelBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PanelBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPanelProps",
              "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IPanelState",
              "canonicalReference": "@fluentui/react-internal!~IPanelState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IPanel",
              "canonicalReference": "@fluentui/react-internal!IPanel:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PanelBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!PanelBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PanelBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase#close:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(previousProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", previousState: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelState",
                  "canonicalReference": "@fluentui/react-internal!~IPanelState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "previousProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "previousState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!PanelBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!PanelBase#dismiss:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "(ev?: "
                },
                {
                  "kind": "Reference",
                  "text": "KeyboardEvent",
                  "canonicalReference": "!KeyboardEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "React.SyntheticEvent",
                  "canonicalReference": "@types/react!~React.SyntheticEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Event",
                  "canonicalReference": "!Event:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase.getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getDerivedStateFromProps(nextProps: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelProps",
                  "canonicalReference": "@fluentui/react-internal!IPanelProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelState",
                  "canonicalReference": "@fluentui/react-internal!~IPanelState:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IPanelState",
                  "canonicalReference": "@fluentui/react-internal!~IPanelState:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!PanelBase#isActive:member",
              "docComment": "/**\n * isActive is true when panel is open or opening.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isActive(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isActive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase#open:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "open(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "open"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PanelBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!PanelType:enum",
          "docComment": "/**\n * {@docCategory Panel}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PanelType "
            }
          ],
          "releaseTag": "Public",
          "name": "PanelType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.custom:member",
              "docComment": "/**\n * Renders the Panel in `custom` size using `customWidth`, anchored to the far side (right in LTR mode). - Has a fixed width provided by the `customWidth` prop - When screen width reaches the `customWidth` value it will behave like a fluid width Panel taking up 100% of the viewport width\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "custom = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "custom",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.customNear:member",
              "docComment": "/**\n * Renders the Panel in `custom` size using `customWidth`, anchored to the near side (left in LTR mode). - Has a fixed width provided by the `customWidth` prop - When screen width reaches the `customWidth` value it will behave like a fluid width Panel taking up 100% of the viewport width\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customNear = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "customNear",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.extraLarge:member",
              "docComment": "/**\n * Renders the Panel in `extra large` size, anchored to the far side (right in LTR mode). - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint - Large (640-1023): adapts to `PanelType.medium` at this breakpoint - XLarge (1024-1365): adapts to `PanelType.large` at this breakpoint - XXLarge (1366-1919): 176px fixed left margin, fluid width, 40px left/right padding - XXXLarge (1920-up): 176px fixed left margin, fluid width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraLarge = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "extraLarge",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.large:member",
              "docComment": "/**\n * Renders the Panel in `large` size, anchored to the far side (right in LTR mode). - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint - Large (640-1023): adapts to `PanelType.medium` at this breakpoint - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding - XXLarge (1366-up): 428px fixed left margin, fluid width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "large = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "large",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.largeFixed:member",
              "docComment": "/**\n * Renders the Panel in `large` size, anchored to the far side (right in LTR mode), with a fixed width at XX-Large breakpoint. - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint - Large (640-1023): adapts to `PanelType.medium` at this breakpoint - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding - XXLarge (1366-up): 940px width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "largeFixed = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "largeFixed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.medium:member",
              "docComment": "/**\n * Renders the Panel in `medium` size, anchored to the far side (right in LTR mode). - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint - Large (640-1023): 592px width, 32px left/right padding - XLarge (1024-1365): 644px width, 32px left/right padding - XXLarge (1366-up): 644px width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "medium = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "medium",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.smallFixedFar:member",
              "docComment": "/**\n * Renders the Panel in fixed-width `small` size, anchored to the far side (right in LTR mode). - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint - Medium (480-639): 340px width, 16px left/right padding - Large (640-1023): 340px width, 32px left/right padding - XLarge (1024-1365): 340px width, 32px left/right padding - XXLarge (1366-up): 340px width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "smallFixedFar = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "smallFixedFar",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.smallFixedNear:member",
              "docComment": "/**\n * Renders the Panel in fixed-width `small` size, anchored to the near side (left in LTR mode). - Small (320-479): 272px width, 16px left/right padding - Medium (480-639): 272px width, 16px left/right padding - Large (640-1023): 272px width, 32px left/right padding - XLarge (1024-1365): 272px width, 32px left/right padding - XXLarge (1366-up): 272px width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "smallFixedNear = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "smallFixedNear",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PanelType.smallFluid:member",
              "docComment": "/**\n * Renders the Panel with a `fluid` (full screen) width. Recommended for use on small screen breakpoints. - Small (320-479): full screen width, 16px left/right padding - Medium (480-639): full screen width, 16px left/right padding - Large (640-1023): full screen width, 32px left/right padding - XLarge (1024-1365): full screen width, 32px left/right padding - XXLarge (1366-up): full screen width, 40px left/right padding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "smallFluid = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "smallFluid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PeoplePickerItem:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PeoplePickerItem: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSelectedProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PeoplePickerItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PeoplePickerItemBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PeoplePickerItemBase: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSelectedProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSelectedProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "PeoplePickerItemBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PeoplePickerItemSuggestion:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PeoplePickerItemSuggestion: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PeoplePickerItemSuggestion",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PeoplePickerItemSuggestionBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PeoplePickerItemSuggestionBase: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "IPeoplePickerItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!IPeoplePickerItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "PeoplePickerItemSuggestionBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Persona:var",
          "docComment": "/**\n * Personas are used for rendering an individual's avatar, presence and details. They are used within the PeoplePicker components.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Persona: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Persona",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PersonaBase:var",
          "docComment": "/**\n * Persona with no default styles. [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PersonaBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PersonaBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PersonaCoin:var",
          "docComment": "/**\n * PersonaCoin is used to render an individual's avatar and presence.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PersonaCoin: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaCoinProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PersonaCoin",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PersonaCoinBase:var",
          "docComment": "/**\n * PersonaCoin with no default styles. [Use the `getStyles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PersonaCoinBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPersonaCoinProps",
              "canonicalReference": "@fluentui/react-internal!IPersonaCoinProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PersonaCoinBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor:enum",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PersonaInitialsColor "
            }
          ],
          "releaseTag": "Public",
          "name": "PersonaInitialsColor",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.black:member",
              "docComment": "/**\n * Black can result in offensive persona coins with some initials combinations, so it can only be set with overrides.\n *\n * @deprecated\n *\n * will be removed in a future major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "black = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "releaseTag": "Public",
              "name": "black",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.blue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blue = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "blue",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.burgundy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "burgundy = "
                },
                {
                  "kind": "Content",
                  "text": "19"
                }
              ],
              "releaseTag": "Public",
              "name": "burgundy",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.coolGray:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coolGray = "
                },
                {
                  "kind": "Content",
                  "text": "21"
                }
              ],
              "releaseTag": "Public",
              "name": "coolGray",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.cyan:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cyan = "
                },
                {
                  "kind": "Content",
                  "text": "23"
                }
              ],
              "releaseTag": "Public",
              "name": "cyan",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.darkBlue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "darkBlue = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "darkBlue",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.darkGreen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "darkGreen = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "darkGreen",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.darkRed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "darkRed = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "releaseTag": "Public",
              "name": "darkRed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.gold:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gold = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "releaseTag": "Public",
              "name": "gold",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.gray:member",
              "docComment": "/**\n * Gray can result in offensive persona coins with some initials combinations, so it can only be set with overrides.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gray = "
                },
                {
                  "kind": "Content",
                  "text": "22"
                }
              ],
              "releaseTag": "Public",
              "name": "gray",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.green:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "green = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "green",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.lightBlue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lightBlue = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "lightBlue",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.lightGreen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lightGreen = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "lightGreen",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.lightPink:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lightPink = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "lightPink",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.lightRed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lightRed = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "releaseTag": "Public",
              "name": "lightRed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.magenta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "magenta = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "magenta",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.orange:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "orange = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "releaseTag": "Public",
              "name": "orange",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.pink:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pink = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "pink",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.purple:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "purple = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "releaseTag": "Public",
              "name": "purple",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.red:member",
              "docComment": "/**\n * Red often has a special meaning, so it is considered a reserved color and can only be set with overrides.\n *\n * @deprecated\n *\n * will be removed in a future major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "red = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "releaseTag": "Public",
              "name": "red",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.rust:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rust = "
                },
                {
                  "kind": "Content",
                  "text": "24"
                }
              ],
              "releaseTag": "Public",
              "name": "rust",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.teal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "teal = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "teal",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.transparent:member",
              "docComment": "/**\n * Transparent is not intended to be used with typical initials due to accessibility issues. Its primary use is for overflow buttons, so it is considered a reserved color and can only be set with overrides.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.violet:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "violet = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "violet",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaInitialsColor.warmGray:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warmGray = "
                },
                {
                  "kind": "Content",
                  "text": "20"
                }
              ],
              "releaseTag": "Public",
              "name": "warmGray",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!PersonaPresence:enum",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PersonaPresence "
            }
          ],
          "releaseTag": "Public",
          "name": "PersonaPresence",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.away:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "away = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "away",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.blocked:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blocked = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "blocked",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.busy:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "busy = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "busy",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.dnd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dnd = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "dnd",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.none:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "none = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "none",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.offline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offline = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "offline",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence.online:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "online = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "online",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@fluentui/react-internal!personaPresenceSize:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace personaPresenceSize "
            }
          ],
          "releaseTag": "Public",
          "name": "personaPresenceSize",
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.border:var",
              "docComment": "/**\n * @deprecated\n *\n * This is now unused\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "border = \"2px\""
                }
              ],
              "releaseTag": "Public",
              "name": "border",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size12:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size12 = \"12px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size12",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size16:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size16 = \"16px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size16",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size20:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size20 = \"20px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size20",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size28:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size28 = \"28px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size28",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size32:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size32 = \"32px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size32",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size6:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size6 = \"6px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size6",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaPresenceSize.size8:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size8 = \"8px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size8",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!PersonaSize:enum",
          "docComment": "/**\n * {@docCategory Persona}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PersonaSize "
            }
          ],
          "releaseTag": "Public",
          "name": "PersonaSize",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.extraExtraSmall:member",
              "docComment": "/**\n * `extraExtraSmall` size has been deprecated in favor of standardized numeric sizing. Use `size24` instead.\n *\n * @deprecated\n *\n * Use `size24` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraExtraSmall = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "extraExtraSmall",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.extraLarge:member",
              "docComment": "/**\n * `extraLarge` size has been deprecated in favor of standardized numeric sizing. Use `size100` instead.\n *\n * @deprecated\n *\n * Use `size100` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraLarge = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "extraLarge",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.extraSmall:member",
              "docComment": "/**\n * `extraSmall` size has been deprecated in favor of standardized numeric sizing. Use `size32` instead.\n *\n * @deprecated\n *\n * Use `size32` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraSmall = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "extraSmall",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.large:member",
              "docComment": "/**\n * `large` size has been deprecated in favor of standardized numeric sizing. Use `size72` instead.\n *\n * @deprecated\n *\n * Use `size72` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "large = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "large",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.regular:member",
              "docComment": "/**\n * `regular` size has been deprecated in favor of standardized numeric sizing. Use `size48` instead.\n *\n * @deprecated\n *\n * Use `size48` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "regular = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "regular",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size10:member",
              "docComment": "/**\n * No `PersonaCoin` is rendered. Deprecated in favor of `size8` to align with design specifications.\n *\n * @deprecated\n *\n * Use `size8` instead. Will be removed in a future major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size10 = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "size10",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size100:member",
              "docComment": "/**\n * Renders a 100px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size100 = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "releaseTag": "Public",
              "name": "size100",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size120:member",
              "docComment": "/**\n * Renders a 120px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size120 = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "releaseTag": "Public",
              "name": "size120",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size16:member",
              "docComment": "/**\n * Renders a 16px `PersonaCoin`. Deprecated due to not being in the design specification.\n *\n * @deprecated\n *\n * Will be removed in a future major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size16 = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "size16",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size24:member",
              "docComment": "/**\n * Renders a 24px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size24 = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "releaseTag": "Public",
              "name": "size24",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size28:member",
              "docComment": "/**\n * Renders a 28px `PersonaCoin`. Deprecated due to not being in the design specification.\n *\n * @deprecated\n *\n * Will be removed in a future major release.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size28 = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "size28",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size32:member",
              "docComment": "/**\n * Renders a 32px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size32 = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "releaseTag": "Public",
              "name": "size32",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size40:member",
              "docComment": "/**\n * Renders a 40px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size40 = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "releaseTag": "Public",
              "name": "size40",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size48:member",
              "docComment": "/**\n * Renders a 48px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size48 = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "releaseTag": "Public",
              "name": "size48",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size56:member",
              "docComment": "/**\n * Renders a 56px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size56 = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "size56",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size72:member",
              "docComment": "/**\n * Renders a 72px `PersonaCoin`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size72 = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "releaseTag": "Public",
              "name": "size72",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.size8:member",
              "docComment": "/**\n * No `PersonaCoin` is rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size8 = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "releaseTag": "Public",
              "name": "size8",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.small:member",
              "docComment": "/**\n * `small` size has been deprecated in favor of standardized numeric sizing. Use `size40` instead.\n *\n * @deprecated\n *\n * Use `size40` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "small = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "small",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!PersonaSize.tiny:member",
              "docComment": "/**\n * `tiny` size has been deprecated in favor of standardized numeric sizing. Use `size8` instead.\n *\n * @deprecated\n *\n * Use `size8` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tiny = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "tiny",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@fluentui/react-internal!personaSize:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace personaSize "
            }
          ],
          "releaseTag": "Public",
          "name": "personaSize",
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size10:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size10 = \"20px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size10",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size100:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size100 = \"100px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size100",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size120:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size120 = \"120px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size120",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size16:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size16 = \"16px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size16",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size24:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size24 = \"24px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size24",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size28:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size28 = \"28px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size28",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size32:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size32 = \"32px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size32",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size40:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size40 = \"40px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size40",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size48:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size48 = \"48px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size48",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size56:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size56 = \"56px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size56",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size72:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size72 = \"72px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size72",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@fluentui/react-internal!personaSize.size8:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size8 = \"20px\""
                }
              ],
              "releaseTag": "Public",
              "name": "size8",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PlainCard:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PlainCard: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPlainCardProps",
              "canonicalReference": "@fluentui/react-internal!IPlainCardProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PlainCard",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!PlainCardBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PlainCardBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPlainCardProps",
              "canonicalReference": "@fluentui/react-internal!IPlainCardProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "PlainCardBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!PlainCardBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PlainCardBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IPlainCardProps",
                  "canonicalReference": "@fluentui/react-internal!IPlainCardProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!PlainCardBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Popup:var",
          "docComment": "/**\n * This adds accessibility to Dialog and Panel controls\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Popup: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPopupProps",
              "canonicalReference": "@fluentui/react-internal!IPopupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Popup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!Position:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Position "
            }
          ],
          "releaseTag": "Public",
          "name": "Position",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Position.bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "bottom",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Position.end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "end = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "end",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Position.start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "start",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Position.top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "top",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!positionCallout:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function positionCallout(props: "
            },
            {
              "kind": "Reference",
              "text": "IPositionProps",
              "canonicalReference": "@fluentui/react-internal!IPositionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", hostElement: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", elementToPosition: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", previousPositions?: "
            },
            {
              "kind": "Reference",
              "text": "ICalloutPositionedInfo",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ICalloutPositionedInfo",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "hostElement",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "elementToPosition",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "previousPositions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "positionCallout"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!positionCard:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function positionCard(props: "
            },
            {
              "kind": "Reference",
              "text": "IPositionProps",
              "canonicalReference": "@fluentui/react-internal!IPositionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", hostElement: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", elementToPosition: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", previousPositions?: "
            },
            {
              "kind": "Reference",
              "text": "ICalloutPositionedInfo",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ICalloutPositionedInfo",
              "canonicalReference": "@fluentui/react-internal!ICalloutPositionedInfo:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "hostElement",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "elementToPosition",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "previousPositions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "positionCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!positionElement:function(1)",
          "docComment": "/**\n * Used to position an element relative to the given positioning props. If positioning has been completed before, previousPositions can be passed to ensure that the positioning element repositions based on its previous targets rather than starting with directionalhint.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function positionElement(props: "
            },
            {
              "kind": "Reference",
              "text": "IPositionProps",
              "canonicalReference": "@fluentui/react-internal!IPositionProps:interface"
            },
            {
              "kind": "Content",
              "text": ", hostElement: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", elementToPosition: "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ", previousPositions?: "
            },
            {
              "kind": "Reference",
              "text": "IPositionedData",
              "canonicalReference": "@fluentui/react-internal!IPositionedData:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IPositionedData",
              "canonicalReference": "@fluentui/react-internal!IPositionedData:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "hostElement",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "elementToPosition",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "previousPositions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "positionElement"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!PositioningContainer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PositioningContainer: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IPositioningContainerProps",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "PositioningContainer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!presenceBoolean:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "presenceBoolean: "
            },
            {
              "kind": "Content",
              "text": "(presence: "
            },
            {
              "kind": "Reference",
              "text": "PersonaPresence",
              "canonicalReference": "@fluentui/react-internal!PersonaPresence:enum"
            },
            {
              "kind": "Content",
              "text": ") => {\n    isAvailable: boolean;\n    isAway: boolean;\n    isBlocked: boolean;\n    isBusy: boolean;\n    isDoNotDisturb: boolean;\n    isOffline: boolean;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "presenceBoolean",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ProgressIndicator:var",
          "docComment": "/**\n * ProgressIndicator description\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ProgressIndicator: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IProgressIndicatorProps",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ProgressIndicator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ProgressIndicatorBase:class",
          "docComment": "/**\n * ProgressIndicator with no default styles. [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ProgressIndicatorBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IProgressIndicatorProps",
              "canonicalReference": "@fluentui/react-internal!IProgressIndicatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "ProgressIndicatorBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ProgressIndicatorBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        label: string;\n        description: string;\n        width: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ProgressIndicatorBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Rating:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Rating: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IRatingProps",
              "canonicalReference": "@fluentui/react-internal!IRatingProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Rating",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!RatingBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RatingBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IRatingProps",
              "canonicalReference": "@fluentui/react-internal!IRatingProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "RatingBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!RatingSize:enum",
          "docComment": "/**\n * {@docCategory Rating}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum RatingSize "
            }
          ],
          "releaseTag": "Public",
          "name": "RatingSize",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!RatingSize.Large:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Large = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Large",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!RatingSize.Small:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Small = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Small",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!RectangleEdge:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum RectangleEdge "
            }
          ],
          "releaseTag": "Public",
          "name": "RectangleEdge",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!RectangleEdge.bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottom = "
                },
                {
                  "kind": "Content",
                  "text": "-1"
                }
              ],
              "releaseTag": "Public",
              "name": "bottom",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!RectangleEdge.left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "left = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "left",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!RectangleEdge.right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "right = "
                },
                {
                  "kind": "Content",
                  "text": "-2"
                }
              ],
              "releaseTag": "Public",
              "name": "right",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!RectangleEdge.top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "top = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "top",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ResizeGroup:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ResizeGroup: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IResizeGroupProps",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ResizeGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ResizeGroupBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ResizeGroupBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IResizeGroupProps",
              "canonicalReference": "@fluentui/react-internal!IResizeGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ResizeGroupBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ResizeGroupDirection:enum",
          "docComment": "/**\n * {@docCategory ResizeGroup}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ResizeGroupDirection "
            }
          ],
          "releaseTag": "Public",
          "name": "ResizeGroupDirection",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResizeGroupDirection.horizontal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontal = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "horizontal",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResizeGroupDirection.vertical:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vertical = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "vertical",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ResponsiveMode:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ResponsiveMode "
            }
          ],
          "releaseTag": "Public",
          "name": "ResponsiveMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.large:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "large = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "large",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.medium:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "medium = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "medium",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.small:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "small = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "small",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.unknown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unknown = "
                },
                {
                  "kind": "Content",
                  "text": "999"
                }
              ],
              "releaseTag": "Public",
              "name": "unknown",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.xLarge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xLarge = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "xLarge",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.xxLarge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xxLarge = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "xxLarge",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ResponsiveMode.xxxLarge:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xxxLarge = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "xxxLarge",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!rgb2hex:function(1)",
          "docComment": "/**\n * Converts RGB components to a hex color string (without # prefix).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rgb2hex(r: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", g: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "r",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "g",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "rgb2hex"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!rgb2hsv:function(1)",
          "docComment": "/**\n * Converts RGB components to an HSV color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rgb2hsv(r: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", g: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IHSV",
              "canonicalReference": "@fluentui/react-internal!IHSV:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "r",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "g",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "rgb2hsv"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!RGBA_REGEX:var",
          "docComment": "/**\n * Regular expression matching only numbers\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RGBA_REGEX: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "RGBA_REGEX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ScrollablePane:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ScrollablePane: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IScrollablePaneProps",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollablePane",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ScrollablePaneBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IScrollablePaneProps",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IScrollablePaneState",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IScrollablePane",
              "canonicalReference": "@fluentui/react-internal!IScrollablePane:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollablePaneBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ScrollablePaneBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneProps",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#addSticky:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSticky: "
                },
                {
                  "kind": "Content",
                  "text": "(sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addSticky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(prevProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneProps",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneState",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prevProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#contentContainer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get contentContainer(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contentContainer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#forceLayoutUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceLayoutUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "forceLayoutUpdate"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#getScrollPosition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScrollPosition: "
                },
                {
                  "kind": "Content",
                  "text": "() => number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "getScrollPosition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#notifySubscribers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "notifySubscribers: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "notifySubscribers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#removeSticky:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSticky: "
                },
                {
                  "kind": "Content",
                  "text": "(sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "removeSticky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get root(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#setStickiesDistanceFromTop:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStickiesDistanceFromTop(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "setStickiesDistanceFromTop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#shouldComponentUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldComponentUpdate(nextProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneProps",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextState: "
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneState",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "nextState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "shouldComponentUpdate"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#sortSticky:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sortSticky: "
                },
                {
                  "kind": "Content",
                  "text": "(sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ", sortAgain?: boolean | undefined) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sortSticky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#stickyAbove:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get stickyAbove(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyAbove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#stickyBelow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get stickyBelow(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyBelow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#subscribe:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe: "
                },
                {
                  "kind": "Content",
                  "text": "(handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#syncScrollSticky:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "syncScrollSticky: "
                },
                {
                  "kind": "Content",
                  "text": "(sticky: "
                },
                {
                  "kind": "Reference",
                  "text": "Sticky",
                  "canonicalReference": "@fluentui/react-internal!Sticky:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "syncScrollSticky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#unsubscribe:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unsubscribe: "
                },
                {
                  "kind": "Content",
                  "text": "(handler: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "unsubscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!ScrollablePaneBase#updateStickyRefHeights:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateStickyRefHeights: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "updateStickyRefHeights",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ScrollablePaneContext:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ScrollablePaneContext: "
            },
            {
              "kind": "Reference",
              "text": "React.Context",
              "canonicalReference": "@types/react!~React.Context:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IScrollablePaneContext",
              "canonicalReference": "@fluentui/react-internal!IScrollablePaneContext:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollablePaneContext",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ScrollbarVisibility:type",
          "docComment": "/**\n * {@docCategory ScrollablePane}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ScrollbarVisibility = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ScrollbarVisibility",
              "canonicalReference": "@fluentui/react-internal!ScrollbarVisibility:var"
            },
            {
              "kind": "Content",
              "text": "[keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "ScrollbarVisibility",
              "canonicalReference": "@fluentui/react-internal!ScrollbarVisibility:var"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollbarVisibility",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ScrollbarVisibility:var",
          "docComment": "/**\n * {@docCategory ScrollablePane}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ScrollbarVisibility: "
            },
            {
              "kind": "Content",
              "text": "{\n    auto: \"auto\";\n    always: \"always\";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollbarVisibility",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!ScrollToMode:type",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ScrollToMode = "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ScrollToMode",
              "canonicalReference": "@fluentui/react-internal!ScrollToMode:var"
            },
            {
              "kind": "Content",
              "text": "[keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "ScrollToMode",
              "canonicalReference": "@fluentui/react-internal!ScrollToMode:var"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollToMode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ScrollToMode:var",
          "docComment": "/**\n * {@docCategory List}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ScrollToMode: "
            },
            {
              "kind": "Content",
              "text": "{\n    auto: 0;\n    top: 1;\n    bottom: 2;\n    center: 3;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrollToMode",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!SearchBox:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SearchBox: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISearchBoxProps",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBox",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!SearchBoxBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SearchBoxBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISearchBoxProps",
              "canonicalReference": "@fluentui/react-internal!ISearchBoxProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "SearchBoxBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!SelectableOptionMenuItemType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SelectableOptionMenuItemType "
            }
          ],
          "releaseTag": "Public",
          "name": "SelectableOptionMenuItemType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SelectableOptionMenuItemType.Divider:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Divider = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Divider",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SelectableOptionMenuItemType.Header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Header = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Header",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SelectableOptionMenuItemType.Normal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Normal = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Normal",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SelectedPeopleList:class",
          "docComment": "/**\n * Standard People Picker.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SelectedPeopleList extends "
            },
            {
              "kind": "Reference",
              "text": "BasePeopleSelectedItemsList",
              "canonicalReference": "@fluentui/react-internal!BasePeopleSelectedItemsList:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SelectedPeopleList",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SelectedPeopleList.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SelectedPeopleList#renderItems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderItems: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderItems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SelectionZone:class",
          "docComment": "/**\n * {@docCategory Selection}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SelectionZone extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISelectionZoneProps",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ISelectionZoneState",
              "canonicalReference": "@fluentui/react-internal!ISelectionZoneState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "SelectionZone",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SelectionZone:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SelectionZone` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectionZoneProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SelectionZone#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SelectionZone#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(previousProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectionZoneProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "previousProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SelectionZone#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SelectionZone.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isSelectedOnFocus: boolean;\n        selectionMode: "
                },
                {
                  "kind": "Reference",
                  "text": "SelectionMode",
                  "canonicalReference": "@fluentui/utilities!SelectionMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SelectionZone.getDerivedStateFromProps:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getDerivedStateFromProps(nextProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectionZoneProps",
                  "canonicalReference": "@fluentui/react-internal!ISelectionZoneProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectionZoneState",
                  "canonicalReference": "@fluentui/react-internal!ISelectionZoneState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISelectionZoneState",
                  "canonicalReference": "@fluentui/react-internal!ISelectionZoneState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getDerivedStateFromProps"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SelectionZone#ignoreNextFocus:member",
              "docComment": "/**\n * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has been called on an element, so we need a flag to store the idea that we will bypass the \"next\" focus event that occurs. This method does that.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreNextFocus: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreNextFocus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SelectionZone#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!SemanticColorSlots:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SemanticColorSlots "
            }
          ],
          "releaseTag": "Public",
          "name": "SemanticColorSlots",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SemanticColorSlots.bodyBackground:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bodyBackground = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "bodyBackground",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SemanticColorSlots.bodyText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bodyText = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "bodyText",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SemanticColorSlots.disabledBackground:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabledBackground = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "disabledBackground",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SemanticColorSlots.disabledText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disabledText = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "disabledText",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Separator:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Separator: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISeparatorProps",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Separator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!SeparatorBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SeparatorBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISeparatorProps",
              "canonicalReference": "@fluentui/react-internal!ISeparatorProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "SeparatorBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!sequencesToID:function(1)",
          "docComment": "/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n *\n * @returns String to use for the keytip ID.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sequencesToID(keySequences: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySequences",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "sequencesToID"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!Shade:enum",
          "docComment": "/**\n * Shades of a given color, from softest to strongest.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Shade "
            }
          ],
          "releaseTag": "Public",
          "name": "Shade",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade1:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade1 = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade1",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade2:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade2 = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade2",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade3:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade3 = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade3",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade4:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade4 = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade4",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade5:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade5 = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade5",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade6:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade6 = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade6",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade7:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade7 = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade7",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Shade8:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Shade8 = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "Shade8",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!Shade.Unshaded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unshaded = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Unshaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Shimmer:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Shimmer: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Shimmer",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerBase:var",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerCircle:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerCircle: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerCircleProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerCircle",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerCircleBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerCircleBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerCircleProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerCircleProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerCircleBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ShimmerElementsDefaultHeights:enum",
          "docComment": "/**\n * Describes the default heights for shimmer elements when omitted in implementation. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ShimmerElementsDefaultHeights "
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerElementsDefaultHeights",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ShimmerElementsDefaultHeights.circle:member",
              "docComment": "/**\n * Default height of the circle element when not provided by user: 24px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle = "
                },
                {
                  "kind": "Content",
                  "text": "24"
                }
              ],
              "releaseTag": "Public",
              "name": "circle",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ShimmerElementsDefaultHeights.gap:member",
              "docComment": "/**\n * Default height of the gap element when not provided by user: 16px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gap = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "gap",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ShimmerElementsDefaultHeights.line:member",
              "docComment": "/**\n * Default height of the line element when not provided by user: 16px\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "line = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "line",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerElementsGroup:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerElementsGroup: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerElementsGroupProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerElementsGroup",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerElementsGroupBase:var",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerElementsGroupBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerElementsGroupProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerElementsGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerElementsGroupBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ShimmerElementType:enum",
          "docComment": "/**\n * Describes the possible types for shimmer elements used. {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ShimmerElementType "
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerElementType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ShimmerElementType.circle:member",
              "docComment": "/**\n * Circle element type\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "circle = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "circle",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ShimmerElementType.gap:member",
              "docComment": "/**\n * Gap element type\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gap = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "gap",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ShimmerElementType.line:member",
              "docComment": "/**\n * Line element type\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "line = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "line",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerGap:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerGap: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerGapProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerGap",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerGapBase:var",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerGapBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerGapProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerGapProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerGapBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerLine:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerLine: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerLineProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerLine",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!ShimmerLineBase:var",
          "docComment": "/**\n * {@docCategory Shimmer}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ShimmerLineBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IShimmerLineProps",
              "canonicalReference": "@fluentui/react-internal!IShimmerLineProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "ShimmerLineBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!sizeBoolean:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sizeBoolean: "
            },
            {
              "kind": "Content",
              "text": "(size: "
            },
            {
              "kind": "Reference",
              "text": "PersonaSize",
              "canonicalReference": "@fluentui/react-internal!PersonaSize:enum"
            },
            {
              "kind": "Content",
              "text": ") => {\n    isSize8: boolean;\n    isSize10: boolean;\n    isSize16: boolean;\n    isSize24: boolean;\n    isSize28: boolean;\n    isSize32: boolean;\n    isSize40: boolean;\n    isSize48: boolean;\n    isSize56: boolean;\n    isSize72: boolean;\n    isSize100: boolean;\n    isSize120: boolean;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "sizeBoolean",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!sizeToPixels:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sizeToPixels: "
            },
            {
              "kind": "Content",
              "text": "{\n    [key: number]: number;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "sizeToPixels",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!SpinButton:var",
          "docComment": "/**\n * The SpinButton control and related tabs pattern are used for navigating frequently accessed, distinct content categories. SpinButtons allow for navigation between two or more content views and relies on text headers to articulate the different sections of content.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SpinButton: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISpinButtonProps",
              "canonicalReference": "@fluentui/react-internal!ISpinButtonProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "SpinButton",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Spinner:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Spinner: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISpinnerProps",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Spinner",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SpinnerBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SpinnerBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISpinnerProps",
              "canonicalReference": "@fluentui/react-internal!ISpinnerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", any> "
            }
          ],
          "releaseTag": "Public",
          "name": "SpinnerBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SpinnerBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISpinnerProps",
                  "canonicalReference": "@fluentui/react-internal!ISpinnerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SpinnerBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!SpinnerLabelPosition:type",
          "docComment": "/**\n * Possible locations of the label in regards to the spinner\n *\n * @defaultvalue\n *\n * bottom {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SpinnerLabelPosition = "
            },
            {
              "kind": "Content",
              "text": "'top' | 'right' | 'bottom' | 'left'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SpinnerLabelPosition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!SpinnerSize:enum",
          "docComment": "/**\n * Possible variations of the spinner circle size. {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SpinnerSize "
            }
          ],
          "releaseTag": "Public",
          "name": "SpinnerSize",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SpinnerSize.large:member",
              "docComment": "/**\n * 28px Spinner diameter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "large = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "large",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SpinnerSize.medium:member",
              "docComment": "/**\n * 20px Spinner diameter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "medium = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "medium",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SpinnerSize.small:member",
              "docComment": "/**\n * 16px Spinner diameter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "small = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "small",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SpinnerSize.xSmall:member",
              "docComment": "/**\n * 12px Spinner diameter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xSmall = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "xSmall",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!SpinnerType:enum",
          "docComment": "/**\n * Deprecated at v2.0.0, use `SpinnerSize` instead.\n *\n * @deprecated\n *\n * Use `SpinnerSize` instead. {@docCategory Spinner}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SpinnerType "
            }
          ],
          "releaseTag": "Public",
          "name": "SpinnerType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SpinnerType.large:member",
              "docComment": "/**\n * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.large` instead.\n *\n * @deprecated\n *\n * Use `SpinnerSize.large` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "large = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "large",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SpinnerType.normal:member",
              "docComment": "/**\n * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.medium` instead.\n *\n * @deprecated\n *\n * Use `SpinnerSize.medium` instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normal = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "normal",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Stack:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Stack: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackProps",
              "canonicalReference": "@fluentui/react-internal!IStackProps:interface"
            },
            {
              "kind": "Content",
              "text": "> & {\n    Item: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemProps",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "Stack",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!StackItem:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StackItem: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStackItemProps",
              "canonicalReference": "@fluentui/react-internal!IStackItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "StackItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!Sticky:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Sticky extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IStickyProps",
              "canonicalReference": "@fluentui/react-internal!IStickyProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "IStickyState",
              "canonicalReference": "@fluentui/react-internal!IStickyState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "Sticky",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!Sticky:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Sticky` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "IStickyProps",
                  "canonicalReference": "@fluentui/react-internal!IStickyProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#addSticky:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSticky(stickyContent: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "stickyContent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addSticky"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#canStickyBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get canStickyBottom(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canStickyBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#canStickyTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get canStickyTop(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canStickyTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(prevProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IStickyProps",
                  "canonicalReference": "@fluentui/react-internal!IStickyProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "IStickyState",
                  "canonicalReference": "@fluentui/react-internal!IStickyState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prevProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky.contextType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static contextType: "
                },
                {
                  "kind": "Reference",
                  "text": "React.Context",
                  "canonicalReference": "@types/react!~React.Context:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IScrollablePaneContext",
                  "canonicalReference": "@fluentui/react-internal!IScrollablePaneContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "contextType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IStickyProps",
                  "canonicalReference": "@fluentui/react-internal!IStickyProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#nonStickyContent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get nonStickyContent(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nonStickyContent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#placeholder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get placeholder(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "placeholder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#resetSticky:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetSticky(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "resetSticky"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get root(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#setDistanceFromTop:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDistanceFromTop(container: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "container",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setDistanceFromTop"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Sticky#shouldComponentUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldComponentUpdate(nextProps: "
                },
                {
                  "kind": "Reference",
                  "text": "IStickyProps",
                  "canonicalReference": "@fluentui/react-internal!IStickyProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", nextState: "
                },
                {
                  "kind": "Reference",
                  "text": "IStickyState",
                  "canonicalReference": "@fluentui/react-internal!IStickyState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nextProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "nextState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "shouldComponentUpdate"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#stickyContentBottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get stickyContentBottom(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyContentBottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#stickyContentTop:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get stickyContentTop(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stickyContentTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Sticky#syncScroll:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "syncScroll: "
                },
                {
                  "kind": "Content",
                  "text": "(container: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "syncScroll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!StickyPositionType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StickyPositionType "
            }
          ],
          "releaseTag": "Public",
          "name": "StickyPositionType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!StickyPositionType.Both:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Both = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Both",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!StickyPositionType.Footer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Footer = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Footer",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!StickyPositionType.Header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Header = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Header",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!SuggestionActionType:enum",
          "docComment": "/**\n * Enum to help identify which suggestions action button is selected. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SuggestionActionType "
            }
          ],
          "releaseTag": "Public",
          "name": "SuggestionActionType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SuggestionActionType.forceResolve:member",
              "docComment": "/**\n * ForceResolve action is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceResolve = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "forceResolve",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SuggestionActionType.none:member",
              "docComment": "/**\n * None of the actions is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "none = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "none",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SuggestionActionType.searchMore:member",
              "docComment": "/**\n * SearchMore action is selected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "searchMore = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "searchMore",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!SuggestionItemType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SuggestionItemType "
            }
          ],
          "releaseTag": "Public",
          "name": "SuggestionItemType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SuggestionItemType.footer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footer = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "footer",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SuggestionItemType.header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "header",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!SuggestionItemType.suggestion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestion = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestion",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!Suggestions:class",
          "docComment": "/**\n * {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Suggestions<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, "
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsState",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Suggestions",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Suggestions#_forceResolveButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _forceResolveButton: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButton",
                  "canonicalReference": "@fluentui/react-internal!IButton:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_forceResolveButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Suggestions#_searchForMoreButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _searchForMoreButton: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IButton",
                  "canonicalReference": "@fluentui/react-internal!IButton:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_searchForMoreButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Suggestions#_selectedElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _selectedElement: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_selectedElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!Suggestions:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Suggestions` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(suggestionsProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestionsProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#executeSelectedAction:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeSelectedAction(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "executeSelectedAction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#focusAboveSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusAboveSuggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focusAboveSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#focusBelowSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusBelowSuggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focusBelowSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#focusSearchForMoreButton:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focusSearchForMoreButton(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focusSearchForMoreButton"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#hasSuggestedAction:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSuggestedAction(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSuggestedAction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#hasSuggestedActionSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSuggestedActionSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSuggestedActionSelected"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!Suggestions#scrollSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollSelected"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!Suggestions#tryHandleKeyDown:member",
              "docComment": "/**\n * Returns true if the event was handled, false otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryHandleKeyDown: "
                },
                {
                  "kind": "Content",
                  "text": "(keyCode: number, currentSuggestionIndex: number) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tryHandleKeyDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SuggestionsControl:class",
          "docComment": "/**\n * Class when used with SuggestionsStore, renders a suggestions control with customizable headers and footers\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SuggestionsControl<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsControlProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, "
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsControlState",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsControlState:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SuggestionsControl",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#_forceResolveButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _forceResolveButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IButton",
                  "canonicalReference": "@fluentui/react-internal!IButton:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_forceResolveButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#_renderSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _renderSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "_renderSuggestions"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#_searchForMoreButton:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _searchForMoreButton: "
                },
                {
                  "kind": "Reference",
                  "text": "IButton",
                  "canonicalReference": "@fluentui/react-internal!IButton:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_searchForMoreButton",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#_selectedElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _selectedElement: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_selectedElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#_suggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsCore",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsCore:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SuggestionsControl` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(suggestionsProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsControlProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestionsProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(oldProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsControlProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsControlProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "oldProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#currentSuggestion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get currentSuggestion(): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#currentSuggestionIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get currentSuggestionIndex(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentSuggestionIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#executeSelectedAction:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeSelectedAction(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "executeSelectedAction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#handleKeyDown:member(1)",
              "docComment": "/**\n * Handles the key down, returns true, if the event was handled, false otherwise\n *\n * @param keyCode - The keyCode to handle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleKeyDown(keyCode: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keyCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "handleKeyDown"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#hasSelection:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSelection(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSelection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#hasSuggestionSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSuggestionSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSuggestionSelected"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#removeSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSuggestion(index?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#renderFooterItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderFooterItems(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderFooterItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#renderHeaderItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected renderHeaderItems(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "renderHeaderItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#resetSelectedItem:member(1)",
              "docComment": "/**\n * Resets the selected state and selects the first selectable item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected resetSelectedItem(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "resetSelectedItem"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#scrollSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollSelected"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#selectedElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectedElement(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#selectFirstItem:member(1)",
              "docComment": "/**\n * Selects the first item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selectFirstItem(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "selectFirstItem"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#selectLastItem:member(1)",
              "docComment": "/**\n * Selects the last item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selectLastItem(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "selectLastItem"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#selectNextItem:member(1)",
              "docComment": "/**\n * Selects the next selectable item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selectNextItem(itemType: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionItemType",
                  "canonicalReference": "@fluentui/react-internal!SuggestionItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", originalItemType?: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionItemType",
                  "canonicalReference": "@fluentui/react-internal!SuggestionItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "itemType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "originalItemType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "selectNextItem"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsControl#selectPreviousItem:member(1)",
              "docComment": "/**\n * Selects the previous selectable item\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected selectPreviousItem(itemType: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionItemType",
                  "canonicalReference": "@fluentui/react-internal!SuggestionItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", originalItemType?: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionItemType",
                  "canonicalReference": "@fluentui/react-internal!SuggestionItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "itemType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "originalItemType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "selectPreviousItem"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SuggestionsController:class",
          "docComment": "/**\n * {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SuggestionsController<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SuggestionsController",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SuggestionsController` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#convertSuggestionsToSuggestionItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertSuggestionsToSuggestionItems(suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "convertSuggestionsToSuggestionItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#createGenericSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createGenericSuggestion(itemToConvert: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "itemToConvert",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "createGenericSuggestion"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#currentIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#currentSuggestion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentSuggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#deselectAllSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deselectAllSuggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "deselectAllSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#getCurrentItem:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentItem(): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCurrentItem"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#getSuggestionAtIndex:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestionAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSuggestionAtIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#getSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#hasSelectedSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSelectedSuggestion(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSelectedSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#nextSuggestion:member(1)",
              "docComment": "/**\n * Increments the suggestion index and gets the next suggestion in the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextSuggestion(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "nextSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#previousSuggestion:member(1)",
              "docComment": "/**\n * Decrements the suggestion index and gets the previous suggestion in the list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "previousSuggestion(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "previousSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#removeSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSuggestion(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#setSelectedSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectedSuggestion(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSelectedSuggestion"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#suggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsController#updateSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSuggestions(newSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", selectedIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newSuggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "selectedIndex",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateSuggestions"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SuggestionsCore:class",
          "docComment": "/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SuggestionsCore<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsCoreProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, {}> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SuggestionsCore",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#_selectedElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected _selectedElement: "
                },
                {
                  "kind": "Reference",
                  "text": "React.RefObject",
                  "canonicalReference": "@types/react!~React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_selectedElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SuggestionsCore` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(suggestionsProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsCoreProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsCoreProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestionsProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#currentIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#currentSuggestion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentSuggestion: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentSuggestion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#deselectAllSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deselectAllSuggestions(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "deselectAllSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#getCurrentItem:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCurrentItem(): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCurrentItem"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#getSuggestionAtIndex:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestionAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSuggestionAtIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#hasSuggestionSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSuggestionSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasSuggestionSelected"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#nextSuggestion:member(1)",
              "docComment": "/**\n * Increments the selected suggestion index\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nextSuggestion(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "nextSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#previousSuggestion:member(1)",
              "docComment": "/**\n * Decrements the selected suggestion index\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "previousSuggestion(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "previousSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#removeSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSuggestion(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeSuggestion"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#scrollSelected:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollSelected(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "scrollSelected"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#selectedElement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectedElement(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLDivElement",
                  "canonicalReference": "!HTMLDivElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectedElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsCore#setSelectedSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectedSuggestion(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSelectedSuggestion"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SuggestionsHeaderFooterItem:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SuggestionsHeaderFooterItem extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionsHeaderFooterItemProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ", {}> "
            }
          ],
          "releaseTag": "Public",
          "name": "SuggestionsHeaderFooterItem",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SuggestionsHeaderFooterItem:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SuggestionsHeaderFooterItem` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionsHeaderFooterItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionsHeaderFooterItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsHeaderFooterItem#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SuggestionsItem:class",
          "docComment": "/**\n * {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SuggestionsItem<T> extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISuggestionItemProps",
              "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, {}> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SuggestionsItem",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SuggestionsItem:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SuggestionsItem` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionItemProps",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsItem#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!SuggestionsStore:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SuggestionsStore<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SuggestionsStore",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SuggestionsStore` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "SuggestionsStoreOptions",
                  "canonicalReference": "@fluentui/react-internal!SuggestionsStoreOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore#convertSuggestionsToSuggestionItems:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertSuggestionsToSuggestionItems(suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "suggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "convertSuggestionsToSuggestionItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore#getSuggestionAtIndex:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestionAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSuggestionAtIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore#getSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSuggestions(): "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSuggestions"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore#removeSuggestion:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSuggestion(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeSuggestion"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore#suggestions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "suggestions: "
                },
                {
                  "kind": "Reference",
                  "text": "ISuggestionModel",
                  "canonicalReference": "@fluentui/react-internal!ISuggestionModel:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "suggestions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!SuggestionsStore#updateSuggestions:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateSuggestions(newSuggestions: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newSuggestions",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateSuggestions"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluentui/react-internal!SuggestionsStoreOptions:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SuggestionsStoreOptions<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    getAriaLabel?: (item: T) => string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SuggestionsStoreOptions",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!SwatchColorPicker:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SwatchColorPicker: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISwatchColorPickerProps",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "SwatchColorPicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!SwatchColorPickerBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SwatchColorPickerBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISwatchColorPickerProps",
              "canonicalReference": "@fluentui/react-internal!ISwatchColorPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "SwatchColorPickerBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TagItem:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TagItem: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagItemProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TagItem",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TagItemBase:var",
          "docComment": "/**\n * {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TagItemBase: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ITagItemProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "TagItemBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TagItemSuggestion:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TagItemSuggestion: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TagItemSuggestion",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TagItemSuggestionBase:var",
          "docComment": "/**\n * {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TagItemSuggestionBase: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "ITagItemSuggestionProps",
              "canonicalReference": "@fluentui/react-internal!ITagItemSuggestionProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!~__global.JSX.Element:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "TagItemSuggestionBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TagPicker:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TagPicker: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITagPickerProps",
              "canonicalReference": "@fluentui/react-internal!ITagPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TagPicker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!TagPickerBase:class",
          "docComment": "/**\n * {@docCategory TagPicker}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TagPickerBase extends "
            },
            {
              "kind": "Reference",
              "text": "BasePicker",
              "canonicalReference": "@fluentui/react-internal!BasePicker:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITag",
              "canonicalReference": "@fluentui/react-internal!ITag:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITagPickerProps",
              "canonicalReference": "@fluentui/react-internal!ITagPickerProps:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "TagPickerBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!TagPickerBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TagPickerBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ITagPickerProps",
                  "canonicalReference": "@fluentui/react-internal!ITagPickerProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TagPickerBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        onRenderItem: (props: "
                },
                {
                  "kind": "Reference",
                  "text": "ITagItemProps",
                  "canonicalReference": "@fluentui/react-internal!ITagItemProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        onRenderSuggestionsItem: (props: "
                },
                {
                  "kind": "Reference",
                  "text": "ITag",
                  "canonicalReference": "@fluentui/react-internal!ITag:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TeachingBubble:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TeachingBubble: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITeachingBubbleProps",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TeachingBubble",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TeachingBubbleBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TeachingBubbleBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITeachingBubbleProps",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TeachingBubbleBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TeachingBubbleContent:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TeachingBubbleContent: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITeachingBubbleProps",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TeachingBubbleContent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TeachingBubbleContentBase:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TeachingBubbleContentBase: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITeachingBubbleProps",
              "canonicalReference": "@fluentui/react-internal!ITeachingBubbleProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TeachingBubbleContentBase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Text:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Text: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextProps",
              "canonicalReference": "@fluentui/react-internal!ITextProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Text",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TextField:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextField: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextFieldProps",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TextField",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!TextFieldBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextFieldBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITextFieldProps",
              "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITextFieldState",
              "canonicalReference": "@fluentui/react-internal!ITextFieldState:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITextFieldSnapshot",
              "canonicalReference": "@fluentui/react-internal!ITextFieldSnapshot:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "ITextField",
              "canonicalReference": "@fluentui/react-internal!ITextField:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TextFieldBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TextFieldBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#blur:member(1)",
              "docComment": "/**\n * Blurs the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "blur(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "blur"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#componentDidMount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidMount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentDidMount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#componentDidUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentDidUpdate(prevProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldState",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldState:interface"
                },
                {
                  "kind": "Content",
                  "text": ", snapshot: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldSnapshot",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldSnapshot:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prevProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "snapshot",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "componentDidUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#focus:member(1)",
              "docComment": "/**\n * Sets focus on the text field\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "focus(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "focus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#getSnapshotBeforeUpdate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSnapshotBeforeUpdate(prevProps: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldProps",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ", prevState: "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldState",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ITextFieldSnapshot",
                  "canonicalReference": "@fluentui/react-internal!ITextFieldSnapshot:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "prevProps",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "prevState",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getSnapshotBeforeUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#select:member(1)",
              "docComment": "/**\n * Selects the text field\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "select(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "select"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#selectionEnd:member",
              "docComment": "/**\n * Gets the selection end of the text field\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectionEnd(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#selectionStart:member",
              "docComment": "/**\n * Gets the selection start of the text field\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get selectionStart(): "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "selectionStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#setSelectionEnd:member(1)",
              "docComment": "/**\n * Sets the selection end of the text field to a specified value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectionEnd(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSelectionEnd"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#setSelectionRange:member(1)",
              "docComment": "/**\n * Sets the start and end positions of a selection in a text field.\n *\n * @param start - Index of the start of the selection.\n *\n * @param end - Index of the end of the selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectionRange(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setSelectionRange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#setSelectionStart:member(1)",
              "docComment": "/**\n * Sets the selection start of the text field to a specified value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSelectionStart(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setSelectionStart"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TextFieldBase#value:member",
              "docComment": "/**\n * Gets the current value of the text field.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get value(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          },
          "implementsTokenRanges": [
            {
              "startIndex": 10,
              "endIndex": 12
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TextStyles:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextStyles: "
            },
            {
              "kind": "Reference",
              "text": "ITextComponent",
              "canonicalReference": "@fluentui/react-internal!ITextComponent:type"
            },
            {
              "kind": "Content",
              "text": "['styles']"
            }
          ],
          "releaseTag": "Public",
          "name": "TextStyles",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TextView:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TextView: "
            },
            {
              "kind": "Reference",
              "text": "ITextComponent",
              "canonicalReference": "@fluentui/react-internal!ITextComponent:type"
            },
            {
              "kind": "Content",
              "text": "['view']"
            }
          ],
          "releaseTag": "Public",
          "name": "TextView",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!ThemeGenerator:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ThemeGenerator "
            }
          ],
          "releaseTag": "Public",
          "name": "ThemeGenerator",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.getThemeAsCode:member(1)",
              "docComment": "/**\n * Gets code-formatted load theme blob that can be copy and pasted. Only used for the old theme designer, where loadTheme usage is acceptable, unlike in the new theme designer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getThemeAsCode(slotRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeRules",
                  "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "slotRules",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getThemeAsCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.getThemeAsCodeWithCreateTheme:member(1)",
              "docComment": "/**\n * Gets code-formatted load theme blob, specifically for the new theme designer, aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated. We want to use the theme object from createTheme and use the Customizations.applySettings API instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getThemeAsCodeWithCreateTheme(slotRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeRules",
                  "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "slotRules",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getThemeAsCodeWithCreateTheme"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.getThemeAsJson:member(1)",
              "docComment": "/**\n * Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints:\n * ```\n * { [theme slot name as string] : [color as string],\n *  \"tokenName\": \"#f00f00\",\n *  \"tokenName2\": \"#ba2ba2\",\n *   ... }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getThemeAsJson(slotRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeRules",
                  "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "slotRules",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getThemeAsJson"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.getThemeAsSass:member(1)",
              "docComment": "/**\n * Gets the theme as a list of SASS variables that can be used in code\n * ```\n * $tokenName: \"[theme:tokenName, default:#f00f00]\";\n * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\n * ...\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getThemeAsSass(slotRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeRules",
                  "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "slotRules",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getThemeAsSass"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.getThemeForPowerShell:member(1)",
              "docComment": "/**\n * Gets the theme formatted for PowerShell scripts\n * ```\n * @{\n * \"tokenName\" = \"#f00f00\";\n * \"tokenName2\" = \"#ba2ba2\";\n * ...\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getThemeForPowerShell(slotRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeRules",
                  "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "slotRules",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getThemeForPowerShell"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.insureSlots:member(1)",
              "docComment": "/**\n * Sets the color of each slot based on its rule. Slots that don't inherit must have a color already. If this completes without error, then the theme is ready to use. (All slots will have a color.) setSlot() can be called before this, but this must be called before getThemeAs*(). Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static insureSlots(slotRules: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeRules",
                  "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
                },
                {
                  "kind": "Content",
                  "text": ", isInverted: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "slotRules",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "isInverted",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "insureSlots"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!ThemeGenerator.setSlot:member(1)",
              "docComment": "/**\n * Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules in the theme that inherit from that color.\n *\n * @param isInverted - whether it's a dark theme or not, which affects the algorithm used to generate shades\n *\n * @param isCustomization - should be true only if it's a user action, and indicates overwriting the slot's inheritance (if any)\n *\n * @param overwriteCustomColor - A slot could have a generated color based on its inheritance rules (isCustomized is false), or a custom color based on user input (isCustomized is true). This bool tells us whether to override existing customized colors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static setSlot(rule: "
                },
                {
                  "kind": "Reference",
                  "text": "IThemeSlotRule",
                  "canonicalReference": "@fluentui/react-internal!IThemeSlotRule:interface"
                },
                {
                  "kind": "Content",
                  "text": ", color: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColor",
                  "canonicalReference": "@fluentui/react-internal!IColor:interface"
                },
                {
                  "kind": "Content",
                  "text": ", isInverted?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", isCustomization?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", overwriteCustomColor?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rule",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "color",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "isInverted",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "isCustomization",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "overwriteCustomColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                }
              ],
              "name": "setSlot"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!themeRulesStandardCreator:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function themeRulesStandardCreator(): "
            },
            {
              "kind": "Reference",
              "text": "IThemeRules",
              "canonicalReference": "@fluentui/react-internal!IThemeRules:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "themeRulesStandardCreator"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!Tooltip:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Tooltip: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITooltipProps",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "Tooltip",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!TooltipBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TooltipBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITooltipProps",
              "canonicalReference": "@fluentui/react-internal!ITooltipProps:interface"
            },
            {
              "kind": "Content",
              "text": ", any> "
            }
          ],
          "releaseTag": "Public",
          "name": "TooltipBase",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TooltipBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TooltipBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!TooltipDelay:enum",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TooltipDelay "
            }
          ],
          "releaseTag": "Public",
          "name": "TooltipDelay",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!TooltipDelay.long:member",
              "docComment": "/**\n * 500 ms delay before showing the tooltip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "long = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "long",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!TooltipDelay.medium:member",
              "docComment": "/**\n * 300 ms delay before showng the tooltip\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "medium = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "medium",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!TooltipDelay.zero:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zero = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "zero",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!TooltipHost:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TooltipHost: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITooltipHostProps",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "TooltipHost",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluentui/react-internal!TooltipHostBase:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TooltipHostBase extends "
            },
            {
              "kind": "Reference",
              "text": "React.Component",
              "canonicalReference": "@types/react!~React.Component:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ITooltipHostProps",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostProps:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ITooltipHostState",
              "canonicalReference": "@fluentui/react-internal!ITooltipHostState:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "ITooltipHost",
              "canonicalReference": "@fluentui/react-internal!ITooltipHost:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TooltipHostBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TooltipHostBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props: "
                },
                {
                  "kind": "Reference",
                  "text": "ITooltipHostProps",
                  "canonicalReference": "@fluentui/react-internal!ITooltipHostProps:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase#componentWillUnmount:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "componentWillUnmount(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "componentWillUnmount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase.defaultProps:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultProps: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        delay: "
                },
                {
                  "kind": "Reference",
                  "text": "TooltipDelay",
                  "canonicalReference": "@fluentui/react-internal!TooltipDelay:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase#dismiss:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dismiss: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dismiss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSX.Element",
                  "canonicalReference": "@types/react!~__global.JSX.Element:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluentui/react-internal!TooltipHostBase#show:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "show: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "show",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "implementsTokenRanges": [
            {
              "startIndex": 8,
              "endIndex": 10
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!TooltipOverflowMode:enum",
          "docComment": "/**\n * {@docCategory Tooltip}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TooltipOverflowMode "
            }
          ],
          "releaseTag": "Public",
          "name": "TooltipOverflowMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!TooltipOverflowMode.Parent:member",
              "docComment": "/**\n * Only show tooltip if parent DOM element is overflowing\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Parent = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Parent",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!TooltipOverflowMode.Self:member",
              "docComment": "/**\n * Only show tooltip if tooltip host's content is overflowing. Note that this does not check the children for overflow, only the TooltipHost root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Self = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Self",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!transitionKeysAreEqual:function(1)",
          "docComment": "/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n *\n * @param key2 - Second IKeytipTransitionKey.\n *\n * @returns T/F if the transition keys are equal.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function transitionKeysAreEqual(key1: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipTransitionKey",
              "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
            },
            {
              "kind": "Content",
              "text": ", key2: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipTransitionKey",
              "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "key2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "transitionKeysAreEqual"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!transitionKeysContain:function(1)",
          "docComment": "/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n *\n * @param key - IKeytipTransitionKey to find in 'keys'.\n *\n * @returns T/F if 'keys' contains 'key'.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function transitionKeysContain(keys: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipTransitionKey",
              "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", key: "
            },
            {
              "kind": "Reference",
              "text": "IKeytipTransitionKey",
              "canonicalReference": "@fluentui/react-internal!IKeytipTransitionKey:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "transitionKeysContain"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!updateA:function(1)",
          "docComment": "/**\n * Gets a color with the given alpha value and the same other components as `color`. Does not modify the original color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateA(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", a: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "updateA"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!updateH:function(1)",
          "docComment": "/**\n * Gets a color with the same saturation and value as `color` and the other components updated to match the given hue.\n *\n * Does not modify the original `color` and does not supply a default alpha value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateH(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", h: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "h",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "updateH"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!updateRGB:function(1)",
          "docComment": "/**\n * Gets a color with a single RGBA component updated to a new value. Does not modify the original `color`. Alpha defaults to 100 if not set.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateRGB(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", component: "
            },
            {
              "kind": "Content",
              "text": "keyof "
            },
            {
              "kind": "Reference",
              "text": "IRGB",
              "canonicalReference": "@fluentui/react-internal!IRGB:interface"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "component",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "updateRGB"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!updateSV:function(1)",
          "docComment": "/**\n * Gets a color with the same hue as `color` and other components updated to match the given saturation and value.\n *\n * Does not modify the original `color` and does not supply a default alpha value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateSV(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", s: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", v: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "updateSV"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!updateT:function(1)",
          "docComment": "/**\n * Gets a color with the given transparency value and the same other components as `color`. Does not modify the original color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function updateT(color: "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ", t: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "IColor",
              "canonicalReference": "@fluentui/react-internal!IColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "t",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "updateT"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!useHeightOffset:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useHeightOffset({ finalHeight }: "
            },
            {
              "kind": "Reference",
              "text": "IPositioningContainerProps",
              "canonicalReference": "@fluentui/react-internal!IPositioningContainerProps:interface"
            },
            {
              "kind": "Content",
              "text": ", contentHost: "
            },
            {
              "kind": "Reference",
              "text": "React.RefObject",
              "canonicalReference": "@types/react!~React.RefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLDivElement",
              "canonicalReference": "!HTMLDivElement:interface"
            },
            {
              "kind": "Content",
              "text": " | null>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ finalHeight }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "contentHost",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "name": "useHeightOffset"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluentui/react-internal!useKeytipRef:function(1)",
          "docComment": "/**\n * Hook that creates a ref which is used for passing to Keytip target element. The ref will handle setting the attributes needed for Keytip to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useKeytipRef<TElement extends "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">(options: "
            },
            {
              "kind": "Reference",
              "text": "KeytipDataOptions",
              "canonicalReference": "@fluentui/react-internal!KeytipDataOptions:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "React.Ref",
              "canonicalReference": "@types/react!~React.Ref:type"
            },
            {
              "kind": "Content",
              "text": "<TElement>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TElement",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "useKeytipRef"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluentui/react-internal!ValidationState:enum",
          "docComment": "/**\n * Validation state of the user's input. {@docCategory Pickers}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ValidationState "
            }
          ],
          "releaseTag": "Public",
          "name": "ValidationState",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ValidationState.invalid:member",
              "docComment": "/**\n * User input is invalid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalid = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "invalid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ValidationState.valid:member",
              "docComment": "/**\n * User input is valid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "valid = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "valid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluentui/react-internal!ValidationState.warning:member",
              "docComment": "/**\n * User input could be valid or invalid, its state is not known yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warning = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "warning",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluentui/react-internal!VerticalDivider:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VerticalDivider: "
            },
            {
              "kind": "Reference",
              "text": "React.FunctionComponent",
              "canonicalReference": "@types/react!~React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IVerticalDividerProps",
              "canonicalReference": "@fluentui/react-internal!IVerticalDividerProps:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "VerticalDivider",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        }
      ]
    }
  ]
}
